{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0","program":"C:\\Users\\samfa\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","imageproc","--edition=2018","C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"rayon\"","-C","metadata=bc4dba22e5db0a41","-C","extra-filename=-bc4dba22e5db0a41","--out-dir","c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps","--extern","conv=c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps\\libconv-2d83f93b0ffe4c46.rmeta","--extern","image=c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps\\libimage-ecc6a6b1b73f8b97.rmeta","--extern","itertools=c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps\\libitertools-d805854bd80fca46.rmeta","--extern","num=c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps\\libnum-19b10f9a4795a3bf.rmeta","--extern","rand=c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps\\librand-b337b85f0eeeab17.rmeta","--extern","rand_distr=c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps\\librand_distr-6978e4c1037f01de.rmeta","--extern","rayon=c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps\\librayon-3537f9a4792455ec.rmeta","--extern","rulinalg=c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps\\librulinalg-af241b5e12b69c52.rmeta","--extern","rusttype=c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps\\librusttype-dbc6ea251f71ead0.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\samfa\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps\\libimageproc-bc4dba22e5db0a41.rmeta"},"prelude":{"crate_id":{"name":"imageproc","disambiguator":[14355935728433272425,4272542537698585210]},"crate_root":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src","external_crates":[{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[3270634090130538391,14263718429753122316]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[5532051063976025760,2256364509988431667]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7281929168992546274,2424678954744988439]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[353429176083156877,8877241423562725442]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12196241746694410349,3365331946273478086]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[13433537899495627439,16859208643582984883]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8262757423788146228,17823423584984973278]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15770910386717746279,2673050061768012116]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[15973938195753786773,1947565178479551552]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1495831041033125177,733230368880816191]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[17679945988426249108,16004284943229030185]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[4674106540844190265,14311593861468432536]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[12112277384381649788,786361786206656603]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","num":14,"id":{"name":"image","disambiguator":[15288647372949103458,9293270725959563937]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","num":15,"id":{"name":"num_traits","disambiguator":[4453721453643426444,5204455879344048998]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","num":16,"id":{"name":"num_rational","disambiguator":[11097481541191238817,6739968123774349388]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","num":17,"id":{"name":"num_bigint","disambiguator":[2858156354010232203,2525292268392833216]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","num":18,"id":{"name":"num_integer","disambiguator":[14944211420072738374,10475570320693077453]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","num":19,"id":{"name":"bytemuck","disambiguator":[17416722967539893986,13325586726212651376]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","num":20,"id":{"name":"num_iter","disambiguator":[9224019066167692980,16790804248219118945]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","num":21,"id":{"name":"color_quant","disambiguator":[15000818413689279554,17803015438202206150]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","num":22,"id":{"name":"itertools","disambiguator":[5769138436018533870,16788992572359333381]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","num":23,"id":{"name":"either","disambiguator":[731556050107699924,2661730122560586874]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","num":24,"id":{"name":"num","disambiguator":[15575557938043780928,12328389834146516582]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","num":25,"id":{"name":"num_complex","disambiguator":[1717408065603765238,3200798900951944602]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","num":26,"id":{"name":"rayon","disambiguator":[16483999883696526564,4406378222345885789]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","num":27,"id":{"name":"rayon_core","disambiguator":[5238229713379470010,11655207458051922852]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","num":28,"id":{"name":"crossbeam_channel","disambiguator":[1246771499786131502,12126484629305016102]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","num":29,"id":{"name":"cfg_if","disambiguator":[14002630626307095317,15618755111291099765]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","num":30,"id":{"name":"crossbeam_utils","disambiguator":[7379185812066407721,18197701062572051231]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","num":31,"id":{"name":"lazy_static","disambiguator":[8654439713170539049,1507313105118591276]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","num":32,"id":{"name":"crossbeam_deque","disambiguator":[233251398809295724,518674499068545931]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","num":33,"id":{"name":"crossbeam_epoch","disambiguator":[17352835122155532863,16536069304098595417]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","num":34,"id":{"name":"scopeguard","disambiguator":[5947231525636294207,16398805924646897060]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","num":35,"id":{"name":"memoffset","disambiguator":[2743784800436089603,4137997652979349414]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","num":36,"id":{"name":"num_cpus","disambiguator":[6138396285059427596,4149227045960095791]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\text.rs","num":37,"id":{"name":"conv","disambiguator":[251684435904151109,5445014293091629220]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\text.rs","num":38,"id":{"name":"custom_derive","disambiguator":[2741206187499138967,14482466239573803689]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\text.rs","num":39,"id":{"name":"rusttype","disambiguator":[1764234522402305281,3767040108550014703]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\text.rs","num":40,"id":{"name":"owned_ttf_parser","disambiguator":[8746797641520488384,12756358011565633370]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\text.rs","num":41,"id":{"name":"ttf_parser","disambiguator":[8179497626491510893,1763561329683559999]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\text.rs","num":42,"id":{"name":"ab_glyph_rasterizer","disambiguator":[3463742150656085270,11885862924188392681]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","num":43,"id":{"name":"rulinalg","disambiguator":[17778907607030863209,1170317182996361356]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","num":44,"id":{"name":"num","disambiguator":[13058618155054662148,11922563511318179970]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","num":45,"id":{"name":"matrixmultiply","disambiguator":[13019172803571084838,292249894036936625]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","num":46,"id":{"name":"rawpointer","disambiguator":[14529993592137138788,10809938396700857631]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\noise.rs","num":47,"id":{"name":"rand","disambiguator":[3841925913292711225,15042415727196055877]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\noise.rs","num":48,"id":{"name":"rand_core","disambiguator":[10080472747316097777,8511551773706787356]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\noise.rs","num":49,"id":{"name":"getrandom","disambiguator":[855660843477180889,1887112247115001696]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\noise.rs","num":50,"id":{"name":"rand_chacha","disambiguator":[11387280118517550305,6393467267560899799]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\noise.rs","num":51,"id":{"name":"ppv_lite86","disambiguator":[8666118574159300734,9723602165078258917]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\noise.rs","num":52,"id":{"name":"rand_distr","disambiguator":[14221780797632866157,6512290178389081736]}}],"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":0,"byte_end":1562,"line_start":1,"line_end":66,"column_start":1,"column_end":16}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":413},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":99370,"byte_end":99393,"line_start":4,"line_end":4,"column_start":24,"column_end":47},"alias_span":null,"name":"draw_cubic_bezier_curve","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":415},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":99395,"byte_end":99422,"line_start":4,"line_end":4,"column_start":49,"column_end":76},"alias_span":null,"name":"draw_cubic_bezier_curve_mut","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":450},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":99461,"byte_end":99466,"line_start":7,"line_end":7,"column_start":24,"column_end":29},"alias_span":null,"name":"Blend","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":451},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":99461,"byte_end":99466,"line_start":7,"line_end":7,"column_start":24,"column_end":29},"alias_span":null,"name":"Blend","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":437},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":99468,"byte_end":99474,"line_start":7,"line_end":7,"column_start":31,"column_end":37},"alias_span":null,"name":"Canvas","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":511},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":99518,"byte_end":99536,"line_start":11,"line_end":11,"column_start":5,"column_end":23},"alias_span":null,"name":"draw_filled_circle","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":509},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":99538,"byte_end":99560,"line_start":11,"line_end":11,"column_start":25,"column_end":47},"alias_span":null,"name":"draw_filled_circle_mut","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":498},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":99562,"byte_end":99581,"line_start":11,"line_end":11,"column_start":49,"column_end":68},"alias_span":null,"name":"draw_filled_ellipse","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":500},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":99583,"byte_end":99606,"line_start":11,"line_end":11,"column_start":70,"column_end":93},"alias_span":null,"name":"draw_filled_ellipse_mut","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":505},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":99612,"byte_end":99630,"line_start":12,"line_end":12,"column_start":5,"column_end":23},"alias_span":null,"name":"draw_hollow_circle","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":507},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":99632,"byte_end":99654,"line_start":12,"line_end":12,"column_start":25,"column_end":47},"alias_span":null,"name":"draw_hollow_circle_mut","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":493},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":99656,"byte_end":99675,"line_start":12,"line_end":12,"column_start":49,"column_end":68},"alias_span":null,"name":"draw_hollow_ellipse","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":495},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":99677,"byte_end":99700,"line_start":12,"line_end":12,"column_start":70,"column_end":93},"alias_span":null,"name":"draw_hollow_ellipse_mut","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":555},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":99739,"byte_end":99749,"line_start":16,"line_end":16,"column_start":23,"column_end":33},"alias_span":null,"name":"draw_cross","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":2283},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":99751,"byte_end":99765,"line_start":16,"line_end":16,"column_start":35,"column_end":49},"alias_span":null,"name":"draw_cross_mut","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":647},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":99805,"byte_end":99834,"line_start":20,"line_end":20,"column_start":5,"column_end":34},"alias_span":null,"name":"draw_antialiased_line_segment","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":650},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":99836,"byte_end":99869,"line_start":20,"line_end":20,"column_start":36,"column_end":69},"alias_span":null,"name":"draw_antialiased_line_segment_mut","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":642},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":99871,"byte_end":99888,"line_start":20,"line_end":20,"column_start":71,"column_end":88},"alias_span":null,"name":"draw_line_segment","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":644},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":99894,"byte_end":99915,"line_start":21,"line_end":21,"column_start":5,"column_end":26},"alias_span":null,"name":"draw_line_segment_mut","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":594},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":99917,"byte_end":99934,"line_start":21,"line_end":21,"column_start":28,"column_end":45},"alias_span":null,"name":"BresenhamLineIter","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":611},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":99936,"byte_end":99958,"line_start":21,"line_end":21,"column_start":47,"column_end":69},"alias_span":null,"name":"BresenhamLinePixelIter","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":626},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":99960,"byte_end":99985,"line_start":21,"line_end":21,"column_start":71,"column_end":96},"alias_span":null,"name":"BresenhamLinePixelIterMut","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":729},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":100028,"byte_end":100040,"line_start":25,"line_end":25,"column_start":25,"column_end":37},"alias_span":null,"name":"draw_polygon","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":731},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":100042,"byte_end":100058,"line_start":25,"line_end":25,"column_start":39,"column_end":55},"alias_span":null,"name":"draw_polygon_mut","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":768},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":100098,"byte_end":100114,"line_start":29,"line_end":29,"column_start":5,"column_end":21},"alias_span":null,"name":"draw_filled_rect","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":770},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":100116,"byte_end":100136,"line_start":29,"line_end":29,"column_start":23,"column_end":43},"alias_span":null,"name":"draw_filled_rect_mut","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":764},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":100138,"byte_end":100154,"line_start":29,"line_end":29,"column_start":45,"column_end":61},"alias_span":null,"name":"draw_hollow_rect","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":766},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":100156,"byte_end":100176,"line_start":29,"line_end":29,"column_start":63,"column_end":83},"alias_span":null,"name":"draw_hollow_rect_mut","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":835},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":100213,"byte_end":100222,"line_start":33,"line_end":33,"column_start":22,"column_end":31},"alias_span":null,"name":"draw_text","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":831},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":100224,"byte_end":100237,"line_start":33,"line_end":33,"column_start":33,"column_end":46},"alias_span":null,"name":"draw_text_mut","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":906},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":160137,"byte_end":160150,"line_start":4,"line_end":4,"column_start":23,"column_end":36},"alias_span":null,"name":"median_filter","value":"","parent":{"krate":0,"index":887}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":160189,"byte_end":160190,"line_start":7,"line_end":7,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":887}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":0,"byte_end":1562,"line_start":1,"line_end":66,"column_start":1,"column_end":16},"name":"","qualname":"::","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":122},{"krate":0,"index":155},{"krate":0,"index":212},{"krate":0,"index":255},{"krate":0,"index":308},{"krate":0,"index":389},{"krate":0,"index":847},{"krate":0,"index":887},{"krate":0,"index":1069},{"krate":0,"index":1198},{"krate":0,"index":1253},{"krate":0,"index":1311},{"krate":0,"index":1371},{"krate":0,"index":1481},{"krate":0,"index":1522},{"krate":0,"index":1598},{"krate":0,"index":1617},{"krate":0,"index":1731},{"krate":0,"index":1742},{"krate":0,"index":1770},{"krate":0,"index":1818},{"krate":0,"index":1838},{"krate":0,"index":1892},{"krate":0,"index":1914},{"krate":0,"index":1940},{"krate":0,"index":1987},{"krate":0,"index":2036},{"krate":0,"index":2069},{"krate":0,"index":2103}],"decl_id":null,"docs":" An image processing library based on the\n [image] crate.","sig":null,"attributes":[{"value":"/ An image processing library based on the","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":0,"byte_end":44,"line_start":1,"line_end":1,"column_start":1,"column_end":45}},{"value":"/ [image] crate.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":45,"byte_end":63,"line_start":2,"line_end":2,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":64,"byte_end":67,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ Note that the image crate contains some image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":68,"byte_end":117,"line_start":4,"line_end":4,"column_start":1,"column_end":50}},{"value":"/ processing functions (including image resizing) in its","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":118,"byte_end":176,"line_start":5,"line_end":5,"column_start":1,"column_end":59}},{"value":"/ `imageops` module, so check there if you cannot find","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":177,"byte_end":233,"line_start":6,"line_end":6,"column_start":1,"column_end":57}},{"value":"/ a standard image processing function in this crate.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":234,"byte_end":289,"line_start":7,"line_end":7,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":290,"byte_end":293,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [image]: https://github.com/image-rs/image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":294,"byte_end":340,"line_start":9,"line_end":9,"column_start":1,"column_end":47}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":341,"byte_end":363,"line_start":10,"line_end":10,"column_start":1,"column_end":23}},{"value":"allow(clippy :: cast_lossless, clippy :: too_many_arguments, clippy ::\n        needless_range_loop, clippy :: useless_let_if_seq, clippy ::\n        match_wild_err_arm, clippy :: needless_doctest_main, clippy ::\n        range_plus_one, clippy :: trivially_copy_pass_by_ref, clippy ::\n        nonminimal_bool, clippy :: expect_fun_call, clippy ::\n        many_single_char_names)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":398,"byte_end":762,"line_start":12,"line_end":24,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":3},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utils","qualname":"::utils","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","parent":null,"children":[{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":60},{"krate":0,"index":65},{"krate":0,"index":73},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":88},{"krate":0,"index":98},{"krate":0,"index":107},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":117},{"krate":0,"index":118}],"decl_id":null,"docs":" Utils for testing and debugging.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":854,"byte_end":866,"line_start":32,"line_end":32,"column_start":1,"column_end":13}},{"value":"/ Utils for testing and debugging.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":1564,"byte_end":1600,"line_start":1,"line_end":1,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":60},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":11168,"byte_end":11186,"line_start":324,"line_end":324,"column_start":8,"column_end":26},"name":"pixel_diff_summary","qualname":"::utils::pixel_diff_summary","value":"pub fn pixel_diff_summary<I, J, P>(&I, &J) -> Option<String> where P: Pixel +\nPartialEq, P::Subpixel: fmt::Debug, I: GenericImage<Pixel = P>,\nJ: GenericImage<Pixel = P>","parent":null,"children":[],"decl_id":null,"docs":" Human readable description of some of the pixels that differ\n between left and right, or None if all pixels match.\n","sig":null,"attributes":[{"value":"/ Human readable description of some of the pixels that differ","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":11039,"byte_end":11103,"line_start":322,"line_end":322,"column_start":1,"column_end":65}},{"value":"/ between left and right, or None if all pixels match.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":11104,"byte_end":11160,"line_start":323,"line_end":323,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":65},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":11617,"byte_end":11647,"line_start":337,"line_end":337,"column_start":8,"column_end":38},"name":"significant_pixel_diff_summary","qualname":"::utils::significant_pixel_diff_summary","value":"pub fn significant_pixel_diff_summary<I, J, F, P>(&I, &J, F) -> Option<String>\nwhere P: Pixel, P::Subpixel: fmt::Debug, I: GenericImage<Pixel = P>,\nJ: GenericImage<Pixel = P>, F: Fn((u32, u32, I::Pixel), (u32, u32, J::Pixel))\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Human readable description of some of the pixels that differ\n signifcantly (according to provided function) between left\n and right, or None if all pixels match.\n","sig":null,"attributes":[{"value":"/ Human readable description of some of the pixels that differ","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":11438,"byte_end":11502,"line_start":334,"line_end":334,"column_start":1,"column_end":65}},{"value":"/ signifcantly (according to provided function) between left","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":11503,"byte_end":11565,"line_start":335,"line_end":335,"column_start":1,"column_end":63}},{"value":"/ and right, or None if all pixels match.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":11566,"byte_end":11609,"line_start":336,"line_end":336,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":14603,"byte_end":14614,"line_start":435,"line_end":435,"column_start":8,"column_end":19},"name":"pixel_diffs","qualname":"::utils::pixel_diffs","value":"pub fn pixel_diffs<I, J, F, P>(&I, &J, F) -> Vec<Diff<I::Pixel>> where\nP: Pixel, I: GenericImage<Pixel = P>, J: GenericImage<Pixel = P>,\nF: Fn((u32, u32, I::Pixel), (u32, u32, J::Pixel)) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Lists pixels that differ between left and right images.\n","sig":null,"attributes":[{"value":"/ Lists pixels that differ between left and right images.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":14536,"byte_end":14595,"line_start":434,"line_end":434,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":15644,"byte_end":15648,"line_start":469,"line_end":469,"column_start":12,"column_end":16},"name":"Diff","qualname":"::utils::Diff","value":"Diff { x, y, expected, actual }","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87}],"decl_id":null,"docs":" A difference between two images\n","sig":null,"attributes":[{"value":"/ A difference between two images","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":15597,"byte_end":15632,"line_start":468,"line_end":468,"column_start":1,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":84},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":15692,"byte_end":15693,"line_start":471,"line_end":471,"column_start":9,"column_end":10},"name":"x","qualname":"::utils::Diff::x","value":"u32","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" x-coordinate of diff.\n","sig":null,"attributes":[{"value":"/ x-coordinate of diff.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":15658,"byte_end":15683,"line_start":470,"line_end":470,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":15738,"byte_end":15739,"line_start":473,"line_end":473,"column_start":9,"column_end":10},"name":"y","qualname":"::utils::Diff::y","value":"u32","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" y-coordinate of diff.\n","sig":null,"attributes":[{"value":"/ y-coordinate of diff.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":15704,"byte_end":15729,"line_start":472,"line_end":472,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":15793,"byte_end":15801,"line_start":475,"line_end":475,"column_start":9,"column_end":17},"name":"expected","qualname":"::utils::Diff::expected","value":"P","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Pixel value in expected image.\n","sig":null,"attributes":[{"value":"/ Pixel value in expected image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":15750,"byte_end":15784,"line_start":474,"line_end":474,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":15851,"byte_end":15857,"line_start":477,"line_end":477,"column_start":9,"column_end":15},"name":"actual","qualname":"::utils::Diff::actual","value":"P","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Pixel value in actual image.\n","sig":null,"attributes":[{"value":"/ Pixel value in actual image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":15810,"byte_end":15842,"line_start":476,"line_end":476,"column_start":5,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":15956,"byte_end":15976,"line_start":481,"line_end":481,"column_start":8,"column_end":28},"name":"describe_pixel_diffs","qualname":"::utils::describe_pixel_diffs","value":"pub fn describe_pixel_diffs<I, J, P>(&I, &J, &[Diff<P>]) -> String where\nP: Pixel, P::Subpixel: fmt::Debug, I: GenericImage<Pixel = P>,\nJ: GenericImage<Pixel = P>","parent":null,"children":[],"decl_id":null,"docs":" Gives a summary description of a list of pixel diffs for use in error messages.\n","sig":null,"attributes":[{"value":"/ Gives a summary description of a list of pixel diffs for use in error messages.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":15865,"byte_end":15948,"line_start":480,"line_end":480,"column_start":1,"column_end":84}}]},{"kind":"Function","id":{"krate":0,"index":115},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":21369,"byte_end":21388,"line_start":652,"line_end":652,"column_start":8,"column_end":27},"name":"load_image_or_panic","qualname":"::utils::load_image_or_panic","value":"pub fn load_image_or_panic<P: AsRef<Path> + fmt::Debug>(P) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Loads image at given path, panicking on failure.\n","sig":null,"attributes":[{"value":"/ Loads image at given path, panicking on failure.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":21309,"byte_end":21361,"line_start":651,"line_end":651,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":21714,"byte_end":21730,"line_start":659,"line_end":659,"column_start":8,"column_end":24},"name":"gray_bench_image","qualname":"::utils::gray_bench_image","value":"pub fn gray_bench_image(u32, u32) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Gray image to use in benchmarks. This is neither noise nor\n similar to natural images - it's just a convenience method\n to produce an image that's not constant.\n","sig":null,"attributes":[{"value":"/ Gray image to use in benchmarks. This is neither noise nor","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":21536,"byte_end":21598,"line_start":656,"line_end":656,"column_start":1,"column_end":63}},{"value":"/ similar to natural images - it's just a convenience method","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":21599,"byte_end":21661,"line_start":657,"line_end":657,"column_start":1,"column_end":63}},{"value":"/ to produce an image that's not constant.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":21662,"byte_end":21706,"line_start":658,"line_end":658,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":118},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":22103,"byte_end":22118,"line_start":671,"line_end":671,"column_start":8,"column_end":23},"name":"rgb_bench_image","qualname":"::utils::rgb_bench_image","value":"pub fn rgb_bench_image(u32, u32) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" RGB image to use in benchmarks. See comment on `gray_bench_image`.\n","sig":null,"attributes":[{"value":"/ RGB image to use in benchmarks. See comment on `gray_bench_image`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\utils.rs","byte_start":22025,"byte_end":22095,"line_start":670,"line_end":670,"column_start":1,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":122},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"contours","qualname":"::contours","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":133},{"krate":0,"index":136},{"krate":0,"index":139},{"krate":0,"index":2120},{"krate":0,"index":2125},{"krate":0,"index":2127},{"krate":0,"index":2128},{"krate":0,"index":2130},{"krate":0,"index":2131},{"krate":0,"index":2133},{"krate":0,"index":2134},{"krate":0,"index":2136},{"krate":0,"index":2141},{"krate":0,"index":142},{"krate":0,"index":145},{"krate":0,"index":147},{"krate":0,"index":151},{"krate":0,"index":154}],"decl_id":null,"docs":" Functions for finding border contours within binary images.\n","sig":null,"attributes":[{"value":"/ Functions for finding border contours within binary images.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":23795,"byte_end":23858,"line_start":1,"line_end":1,"column_start":1,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2121},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":24310,"byte_end":24315,"line_start":13,"line_end":13,"column_start":5,"column_end":10},"name":"Outer","qualname":"::contours::BorderType::Outer","value":"BorderType::Outer","parent":{"krate":0,"index":2120},"children":[],"decl_id":null,"docs":" A border between a foreground region and the backround region enclosing it.\n All points in the border lie within the foreground region.\n","sig":null,"attributes":[{"value":"/ A border between a foreground region and the backround region enclosing it.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":24159,"byte_end":24238,"line_start":11,"line_end":11,"column_start":5,"column_end":84}},{"value":"/ All points in the border lie within the foreground region.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":24243,"byte_end":24305,"line_start":12,"line_end":12,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2123},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":24478,"byte_end":24482,"line_start":16,"line_end":16,"column_start":5,"column_end":9},"name":"Hole","qualname":"::contours::BorderType::Hole","value":"BorderType::Hole","parent":{"krate":0,"index":2120},"children":[],"decl_id":null,"docs":" A border between a foreground region and a background region contained within it.\n All points in the border lie within the foreground region.\n","sig":null,"attributes":[{"value":"/ A border between a foreground region and a background region contained within it.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":24321,"byte_end":24406,"line_start":14,"line_end":14,"column_start":5,"column_end":90}},{"value":"/ All points in the border lie within the foreground region.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":24411,"byte_end":24473,"line_start":15,"line_end":15,"column_start":5,"column_end":67}}]},{"kind":"Enum","id":{"krate":0,"index":2120},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":24142,"byte_end":24152,"line_start":10,"line_end":10,"column_start":10,"column_end":20},"name":"BorderType","qualname":"::contours::BorderType","value":"pub enum BorderType { Outer, Hole, }","parent":null,"children":[{"krate":0,"index":2121},{"krate":0,"index":2123}],"decl_id":null,"docs":" Whether a border of a foreground region borders an enclosing background region or a contained background region.\n","sig":null,"attributes":[{"value":"/ Whether a border of a foreground region borders an enclosing background region or a contained background region.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":23971,"byte_end":24087,"line_start":8,"line_end":8,"column_start":1,"column_end":117}}]},{"kind":"Struct","id":{"krate":0,"index":2136},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":24565,"byte_end":24572,"line_start":21,"line_end":21,"column_start":12,"column_end":19},"name":"Contour","qualname":"::contours::Contour","value":"Contour { points, border_type, parent }","parent":null,"children":[{"krate":0,"index":2138},{"krate":0,"index":2139},{"krate":0,"index":2140}],"decl_id":null,"docs":" A border of an 8-connected foreground region.\n","sig":null,"attributes":[{"value":"/ A border of an 8-connected foreground region.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":24487,"byte_end":24536,"line_start":19,"line_end":19,"column_start":1,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":2138},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":24620,"byte_end":24626,"line_start":23,"line_end":23,"column_start":9,"column_end":15},"name":"points","qualname":"::contours::Contour::points","value":"std::vec::Vec<point::Point<T>>","parent":{"krate":0,"index":2136},"children":[],"decl_id":null,"docs":" The points in the border.\n","sig":null,"attributes":[{"value":"/ The points in the border.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":24582,"byte_end":24611,"line_start":22,"line_end":22,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":2139},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":24709,"byte_end":24720,"line_start":25,"line_end":25,"column_start":9,"column_end":20},"name":"border_type","qualname":"::contours::Contour::border_type","value":"contours::BorderType","parent":{"krate":0,"index":2136},"children":[],"decl_id":null,"docs":" Whether this is an outer border or a hole border.\n","sig":null,"attributes":[{"value":"/ Whether this is an outer border or a hole border.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":24647,"byte_end":24700,"line_start":24,"line_end":24,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":2140},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":24943,"byte_end":24949,"line_start":28,"line_end":28,"column_start":9,"column_end":15},"name":"parent","qualname":"::contours::Contour::parent","value":"std::option::Option<usize>","parent":{"krate":0,"index":2136},"children":[],"decl_id":null,"docs":" Calls to `find_contours` and `find_contours_with_threshold` return a `Vec` of all borders\n in an image. This field provides the index for the parent of the current border in that `Vec`.\n","sig":null,"attributes":[{"value":"/ Calls to `find_contours` and `find_contours_with_threshold` return a `Vec` of all borders","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":24738,"byte_end":24831,"line_start":26,"line_end":26,"column_start":5,"column_end":98}},{"value":"/ in an image. This field provides the index for the parent of the current border in that `Vec`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":24836,"byte_end":24934,"line_start":27,"line_end":27,"column_start":5,"column_end":103}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":25030,"byte_end":25033,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"new","qualname":"<Contour<T>>::new","value":"pub fn new(Vec<Point<T>>, BorderType, Option<usize>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a contour.\n","sig":null,"attributes":[{"value":"/ Construct a contour.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":24994,"byte_end":25018,"line_start":32,"line_end":32,"column_start":5,"column_end":29}}]},{"kind":"Function","id":{"krate":0,"index":145},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":25492,"byte_end":25505,"line_start":47,"line_end":47,"column_start":8,"column_end":21},"name":"find_contours","qualname":"::contours::find_contours","value":"pub fn find_contours<T>(&GrayImage) -> Vec<Contour<T>> where T: Num +\nNumCast + Copy + PartialEq + Eq","parent":null,"children":[],"decl_id":null,"docs":" Finds all borders of foreground regions in an image. All non-zero pixels are\n treated as belonging to the foreground.","sig":null,"attributes":[{"value":"/ Finds all borders of foreground regions in an image. All non-zero pixels are","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":25217,"byte_end":25297,"line_start":42,"line_end":42,"column_start":1,"column_end":81}},{"value":"/ treated as belonging to the foreground.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":25298,"byte_end":25341,"line_start":43,"line_end":43,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":25342,"byte_end":25345,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ Based on the algorithm proposed by Suzuki and Abe: Topological Structural","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":25346,"byte_end":25423,"line_start":45,"line_end":45,"column_start":1,"column_end":78}},{"value":"/ Analysis of Digitized Binary Images by Border Following.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":25424,"byte_end":25484,"line_start":46,"line_end":46,"column_start":1,"column_end":61}}]},{"kind":"Function","id":{"krate":0,"index":147},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":25962,"byte_end":25990,"line_start":59,"line_end":59,"column_start":8,"column_end":36},"name":"find_contours_with_threshold","qualname":"::contours::find_contours_with_threshold","value":"pub fn find_contours_with_threshold<T>(&GrayImage, u8) -> Vec<Contour<T>>\nwhere T: Num + NumCast + Copy + PartialEq + Eq","parent":null,"children":[],"decl_id":null,"docs":" Finds all borders of foreground regions in an image. All pixels with intensity strictly greater\n than `threshold` are treated as belonging to the foreground.","sig":null,"attributes":[{"value":"/ Finds all borders of foreground regions in an image. All pixels with intensity strictly greater","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":25647,"byte_end":25746,"line_start":54,"line_end":54,"column_start":1,"column_end":100}},{"value":"/ than `threshold` are treated as belonging to the foreground.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":25747,"byte_end":25811,"line_start":55,"line_end":55,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":25812,"byte_end":25815,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ Based on the algorithm proposed by Suzuki and Abe: Topological Structural","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":25816,"byte_end":25893,"line_start":57,"line_end":57,"column_start":1,"column_end":78}},{"value":"/ Analysis of Digitized Binary Images by Border Following.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":25894,"byte_end":25954,"line_start":58,"line_end":58,"column_start":1,"column_end":61}}]},{"kind":"Mod","id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"contrast","qualname":"::contrast","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":160},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":167},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":174},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":181},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":192},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":210},{"krate":0,"index":211}],"decl_id":null,"docs":" Functions for manipulating the contrast of images.\n","sig":null,"attributes":[{"value":"/ Functions for manipulating the contrast of images.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":39153,"byte_end":39207,"line_start":1,"line_end":1,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":195},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":39830,"byte_end":39848,"line_start":16,"line_end":16,"column_start":8,"column_end":26},"name":"adaptive_threshold","qualname":"::contrast::adaptive_threshold","value":"pub fn adaptive_threshold(&GrayImage, u32) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Applies an adaptive threshold to an image.","sig":null,"attributes":[{"value":"/ Applies an adaptive threshold to an image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":39490,"byte_end":39536,"line_start":11,"line_end":11,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":39537,"byte_end":39540,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This algorithm compares each pixel's brightness with the average brightness of the pixels","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":39541,"byte_end":39634,"line_start":13,"line_end":13,"column_start":1,"column_end":94}},{"value":"/ in the (2 * `block_radius` + 1) square block centered on it. If the pixel is at least as bright","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":39635,"byte_end":39734,"line_start":14,"line_end":14,"column_start":1,"column_end":100}},{"value":"/ as the threshold then it will have a value of 255 in the output image, otherwise 0.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":39735,"byte_end":39822,"line_start":15,"line_end":15,"column_start":1,"column_end":88}}]},{"kind":"Function","id":{"krate":0,"index":196},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":41155,"byte_end":41165,"line_start":49,"line_end":49,"column_start":8,"column_end":18},"name":"otsu_level","qualname":"::contrast::otsu_level","value":"pub fn otsu_level(&GrayImage) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the [Otsu threshold level] of an 8bpp image.","sig":null,"attributes":[{"value":"/ Returns the [Otsu threshold level] of an 8bpp image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":41013,"byte_end":41069,"line_start":46,"line_end":46,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":41070,"byte_end":41073,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ [Otsu threshold level]: https://en.wikipedia.org/wiki/Otsu%27s_method","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":41074,"byte_end":41147,"line_start":48,"line_end":48,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":198},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43528,"byte_end":43537,"line_start":125,"line_end":125,"column_start":8,"column_end":17},"name":"threshold","qualname":"::contrast::threshold","value":"pub fn threshold(&GrayImage, u8) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a binarized image from an input 8bpp grayscale image\n obtained by applying the given threshold. Pixels with intensity\n equal to the threshold are assigned to the background.","sig":null,"attributes":[{"value":"/ Returns a binarized image from an input 8bpp grayscale image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":42934,"byte_end":42998,"line_start":102,"line_end":102,"column_start":1,"column_end":65}},{"value":"/ obtained by applying the given threshold. Pixels with intensity","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":42999,"byte_end":43066,"line_start":103,"line_end":103,"column_start":1,"column_end":68}},{"value":"/ equal to the threshold are assigned to the background.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43067,"byte_end":43125,"line_start":104,"line_end":104,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43126,"byte_end":43129,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43130,"byte_end":43144,"line_start":106,"line_end":106,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43145,"byte_end":43152,"line_start":107,"line_end":107,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43153,"byte_end":43178,"line_start":108,"line_end":108,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43179,"byte_end":43197,"line_start":109,"line_end":109,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43198,"byte_end":43227,"line_start":110,"line_end":110,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43228,"byte_end":43245,"line_start":111,"line_end":111,"column_start":1,"column_end":18}},{"value":"/ use imageproc::contrast::threshold;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43246,"byte_end":43285,"line_start":112,"line_end":112,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43286,"byte_end":43289,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43290,"byte_end":43318,"line_start":114,"line_end":114,"column_start":1,"column_end":29}},{"value":"/     10, 80, 20;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43319,"byte_end":43338,"line_start":115,"line_end":115,"column_start":1,"column_end":20}},{"value":"/     50, 90, 70);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43339,"byte_end":43359,"line_start":116,"line_end":116,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43360,"byte_end":43363,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ let thresholded = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43364,"byte_end":43398,"line_start":118,"line_end":118,"column_start":1,"column_end":35}},{"value":"/     0, 255,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43399,"byte_end":43419,"line_start":119,"line_end":119,"column_start":1,"column_end":21}},{"value":"/     0, 255, 255);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43420,"byte_end":43441,"line_start":120,"line_end":120,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43442,"byte_end":43445,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(threshold(&image, 50), thresholded);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43446,"byte_end":43504,"line_start":122,"line_end":122,"column_start":1,"column_end":59}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43505,"byte_end":43512,"line_start":123,"line_end":123,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43513,"byte_end":43520,"line_start":124,"line_end":124,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":199},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":44277,"byte_end":44290,"line_start":156,"line_end":156,"column_start":8,"column_end":21},"name":"threshold_mut","qualname":"::contrast::threshold_mut","value":"pub fn threshold_mut(&mut GrayImage, u8)","parent":null,"children":[],"decl_id":null,"docs":" Mutates given image to form a binarized version produced by applying\n the given threshold. Pixels with intensity\n equal to the threshold are assigned to the background.","sig":null,"attributes":[{"value":"/ Mutates given image to form a binarized version produced by applying","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43665,"byte_end":43737,"line_start":131,"line_end":131,"column_start":1,"column_end":73}},{"value":"/ the given threshold. Pixels with intensity","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43738,"byte_end":43784,"line_start":132,"line_end":132,"column_start":1,"column_end":47}},{"value":"/ equal to the threshold are assigned to the background.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43785,"byte_end":43843,"line_start":133,"line_end":133,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43844,"byte_end":43847,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43848,"byte_end":43862,"line_start":135,"line_end":135,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43863,"byte_end":43870,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43871,"byte_end":43896,"line_start":137,"line_end":137,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43897,"byte_end":43915,"line_start":138,"line_end":138,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43916,"byte_end":43945,"line_start":139,"line_end":139,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43946,"byte_end":43963,"line_start":140,"line_end":140,"column_start":1,"column_end":18}},{"value":"/ use imageproc::contrast::threshold_mut;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":43964,"byte_end":44007,"line_start":141,"line_end":141,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":44008,"byte_end":44011,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ let mut image = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":44012,"byte_end":44044,"line_start":143,"line_end":143,"column_start":1,"column_end":33}},{"value":"/     10, 80, 20;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":44045,"byte_end":44064,"line_start":144,"line_end":144,"column_start":1,"column_end":20}},{"value":"/     50, 90, 70);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":44065,"byte_end":44085,"line_start":145,"line_end":145,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":44086,"byte_end":44089,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ let thresholded = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":44090,"byte_end":44124,"line_start":147,"line_end":147,"column_start":1,"column_end":35}},{"value":"/     0, 255,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":44125,"byte_end":44145,"line_start":148,"line_end":148,"column_start":1,"column_end":21}},{"value":"/     0, 255, 255);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":44146,"byte_end":44167,"line_start":149,"line_end":149,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":44168,"byte_end":44171,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ threshold_mut(&mut image, 50);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":44172,"byte_end":44206,"line_start":151,"line_end":151,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":44207,"byte_end":44210,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(image, thresholded);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":44211,"byte_end":44253,"line_start":153,"line_end":153,"column_start":1,"column_end":43}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":44254,"byte_end":44261,"line_start":154,"line_end":154,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":44262,"byte_end":44269,"line_start":155,"line_end":155,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":200},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":44595,"byte_end":44617,"line_start":164,"line_end":164,"column_start":8,"column_end":30},"name":"equalize_histogram_mut","qualname":"::contrast::equalize_histogram_mut","value":"pub fn equalize_histogram_mut(&mut GrayImage)","parent":null,"children":[],"decl_id":null,"docs":" Equalises the histogram of an 8bpp grayscale image in place. See also\n [histogram equalization (wikipedia)](https://en.wikipedia.org/wiki/Histogram_equalization).\n","sig":null,"attributes":[{"value":"/ Equalises the histogram of an 8bpp grayscale image in place. See also","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":44418,"byte_end":44491,"line_start":162,"line_end":162,"column_start":1,"column_end":74}},{"value":"/ [histogram equalization (wikipedia)](https://en.wikipedia.org/wiki/Histogram_equalization).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":44492,"byte_end":44587,"line_start":163,"line_end":163,"column_start":1,"column_end":96}}]},{"kind":"Function","id":{"krate":0,"index":202},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":45537,"byte_end":45555,"line_start":187,"line_end":187,"column_start":8,"column_end":26},"name":"equalize_histogram","qualname":"::contrast::equalize_histogram","value":"pub fn equalize_histogram(&GrayImage) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Equalises the histogram of an 8bpp grayscale image. See also\n [histogram equalization (wikipedia)](https://en.wikipedia.org/wiki/Histogram_equalization).\n","sig":null,"attributes":[{"value":"/ Equalises the histogram of an 8bpp grayscale image. See also","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":45369,"byte_end":45433,"line_start":185,"line_end":185,"column_start":1,"column_end":65}},{"value":"/ [histogram equalization (wikipedia)](https://en.wikipedia.org/wiki/Histogram_equalization).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":45434,"byte_end":45529,"line_start":186,"line_end":186,"column_start":1,"column_end":96}}]},{"kind":"Function","id":{"krate":0,"index":203},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":45815,"byte_end":45834,"line_start":195,"line_end":195,"column_start":8,"column_end":27},"name":"match_histogram_mut","qualname":"::contrast::match_histogram_mut","value":"pub fn match_histogram_mut(&mut GrayImage, &GrayImage)","parent":null,"children":[],"decl_id":null,"docs":" Adjusts contrast of an 8bpp grayscale image in place so that its\n histogram is as close as possible to that of the target image.\n","sig":null,"attributes":[{"value":"/ Adjusts contrast of an 8bpp grayscale image in place so that its","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":45672,"byte_end":45740,"line_start":193,"line_end":193,"column_start":1,"column_end":69}},{"value":"/ histogram is as close as possible to that of the target image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":45741,"byte_end":45807,"line_start":194,"line_end":194,"column_start":1,"column_end":67}}]},{"kind":"Function","id":{"krate":0,"index":204},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":46279,"byte_end":46294,"line_start":207,"line_end":207,"column_start":8,"column_end":23},"name":"match_histogram","qualname":"::contrast::match_histogram","value":"pub fn match_histogram(&GrayImage, &GrayImage) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Adjusts contrast of an 8bpp grayscale image so that its\n histogram is as close as possible to that of the target image.\n","sig":null,"attributes":[{"value":"/ Adjusts contrast of an 8bpp grayscale image so that its","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":46145,"byte_end":46204,"line_start":205,"line_end":205,"column_start":1,"column_end":60}},{"value":"/ histogram is as close as possible to that of the target image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":46205,"byte_end":46271,"line_start":206,"line_end":206,"column_start":1,"column_end":67}}]},{"kind":"Function","id":{"krate":0,"index":210},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":48604,"byte_end":48620,"line_start":281,"line_end":281,"column_start":8,"column_end":24},"name":"stretch_contrast","qualname":"::contrast::stretch_contrast","value":"pub fn stretch_contrast(&GrayImage, u8, u8) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Linearly stretches the contrast in an image, sending `lower` to `0u8` and `upper` to `2558u8`.","sig":null,"attributes":[{"value":"/ Linearly stretches the contrast in an image, sending `lower` to `0u8` and `upper` to `2558u8`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":47624,"byte_end":47722,"line_start":249,"line_end":249,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":47723,"byte_end":47726,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ Is it common to choose `upper` and `lower` values using image percentiles - see [`percentile`](../stats/fn.percentile.html).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":47727,"byte_end":47855,"line_start":251,"line_end":251,"column_start":1,"column_end":129}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":47856,"byte_end":47859,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":47860,"byte_end":47874,"line_start":253,"line_end":253,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":47875,"byte_end":47882,"line_start":254,"line_end":254,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":47883,"byte_end":47908,"line_start":255,"line_end":255,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":47909,"byte_end":47927,"line_start":256,"line_end":256,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":47928,"byte_end":47957,"line_start":257,"line_end":257,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":47958,"byte_end":47975,"line_start":258,"line_end":258,"column_start":1,"column_end":18}},{"value":"/ use imageproc::contrast::stretch_contrast;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":47976,"byte_end":48022,"line_start":259,"line_end":259,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":48023,"byte_end":48026,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":48027,"byte_end":48055,"line_start":261,"line_end":261,"column_start":1,"column_end":29}},{"value":"/      0,   20,  50;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":48056,"byte_end":48078,"line_start":262,"line_end":262,"column_start":1,"column_end":23}},{"value":"/     80,  100, 255);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":48079,"byte_end":48102,"line_start":263,"line_end":263,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":48103,"byte_end":48106,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/ let lower = 20;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":48107,"byte_end":48126,"line_start":265,"line_end":265,"column_start":1,"column_end":20}},{"value":"/ let upper = 100;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":48127,"byte_end":48147,"line_start":266,"line_end":266,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":48148,"byte_end":48151,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ // Pixel intensities between 20 and 100 are linearly","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":48152,"byte_end":48208,"line_start":268,"line_end":268,"column_start":1,"column_end":57}},{"value":"/ // scaled so that 20 is mapped to 0 and 100 is mapped to 255.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":48209,"byte_end":48274,"line_start":269,"line_end":269,"column_start":1,"column_end":66}},{"value":"/ // Pixel intensities less than 20 are sent to 0 and pixel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":48275,"byte_end":48336,"line_start":270,"line_end":270,"column_start":1,"column_end":62}},{"value":"/ // intensities greater than 100 are sent to 255.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":48337,"byte_end":48389,"line_start":271,"line_end":271,"column_start":1,"column_end":53}},{"value":"/ let stretched = stretch_contrast(&image, lower, upper);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":48390,"byte_end":48449,"line_start":272,"line_end":272,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":48450,"byte_end":48453,"line_start":273,"line_end":273,"column_start":1,"column_end":4}},{"value":"/ let expected = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":48454,"byte_end":48485,"line_start":274,"line_end":274,"column_start":1,"column_end":32}},{"value":"/       0,   0,  95;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":48486,"byte_end":48508,"line_start":275,"line_end":275,"column_start":1,"column_end":23}},{"value":"/     191, 255, 255);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":48509,"byte_end":48532,"line_start":276,"line_end":276,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":48533,"byte_end":48536,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(stretched, expected);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":48537,"byte_end":48580,"line_start":278,"line_end":278,"column_start":1,"column_end":44}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":48581,"byte_end":48588,"line_start":279,"line_end":279,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":48589,"byte_end":48596,"line_start":280,"line_end":280,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":211},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":48973,"byte_end":48993,"line_start":290,"line_end":290,"column_start":8,"column_end":28},"name":"stretch_contrast_mut","qualname":"::contrast::stretch_contrast_mut","value":"pub fn stretch_contrast_mut(&mut GrayImage, u8, u8)","parent":null,"children":[],"decl_id":null,"docs":" Linearly stretches the contrast in an image in place, sending `lower` to `0u8` and `upper` to `2558u8`.","sig":null,"attributes":[{"value":"/ Linearly stretches the contrast in an image in place, sending `lower` to `0u8` and `upper` to `2558u8`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":48771,"byte_end":48878,"line_start":287,"line_end":287,"column_start":1,"column_end":108}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":48879,"byte_end":48882,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/ See the [`stretch_contrast`](fn.stretch_contrast.html) documentation for more.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contrast.rs","byte_start":48883,"byte_end":48965,"line_start":289,"line_end":289,"column_start":1,"column_end":83}}]},{"kind":"Mod","id":{"krate":0,"index":212},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"corners","qualname":"::corners","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":217},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":224},{"krate":0,"index":2144},{"krate":0,"index":2148},{"krate":0,"index":2149},{"krate":0,"index":2151},{"krate":0,"index":2153},{"krate":0,"index":2154},{"krate":0,"index":227},{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":249},{"krate":0,"index":252}],"decl_id":null,"docs":" Functions for detecting corners, also known as interest points.\n","sig":null,"attributes":[{"value":"/ Functions for detecting corners, also known as interest points.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":57231,"byte_end":57298,"line_start":1,"line_end":1,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":2144},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":57564,"byte_end":57570,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"Corner","qualname":"::corners::Corner","value":"Corner { x, y, score }","parent":null,"children":[{"krate":0,"index":2145},{"krate":0,"index":2146},{"krate":0,"index":2147}],"decl_id":null,"docs":" A location and score for a detected corner.\n The scores need not be comparable between different\n corner detectors.\n","sig":null,"attributes":[{"value":"/ A location and score for a detected corner.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":57386,"byte_end":57433,"line_start":6,"line_end":6,"column_start":1,"column_end":48}},{"value":"/ The scores need not be comparable between different","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":57434,"byte_end":57489,"line_start":7,"line_end":7,"column_start":1,"column_end":56}},{"value":"/ corner detectors.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":57490,"byte_end":57511,"line_start":8,"line_end":8,"column_start":1,"column_end":22}}]},{"kind":"Field","id":{"krate":0,"index":2145},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":57617,"byte_end":57618,"line_start":12,"line_end":12,"column_start":9,"column_end":10},"name":"x","qualname":"::corners::Corner::x","value":"u32","parent":{"krate":0,"index":2144},"children":[],"decl_id":null,"docs":" x-coordinate of the corner.\n","sig":null,"attributes":[{"value":"/ x-coordinate of the corner.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":57577,"byte_end":57608,"line_start":11,"line_end":11,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":2146},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":57669,"byte_end":57670,"line_start":14,"line_end":14,"column_start":9,"column_end":10},"name":"y","qualname":"::corners::Corner::y","value":"u32","parent":{"krate":0,"index":2144},"children":[],"decl_id":null,"docs":" y-coordinate of the corner.\n","sig":null,"attributes":[{"value":"/ y-coordinate of the corner.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":57629,"byte_end":57660,"line_start":13,"line_end":13,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":2147},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":57723,"byte_end":57728,"line_start":16,"line_end":16,"column_start":9,"column_end":14},"name":"score","qualname":"::corners::Corner::score","value":"f32","parent":{"krate":0,"index":2144},"children":[],"decl_id":null,"docs":" Score of the detected corner.\n","sig":null,"attributes":[{"value":"/ Score of the detected corner.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":57681,"byte_end":57714,"line_start":15,"line_end":15,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":57819,"byte_end":57822,"line_start":21,"line_end":21,"column_start":12,"column_end":15},"name":"new","qualname":"<Corner>::new","value":"pub fn new(u32, u32, f32) -> Corner","parent":null,"children":[],"decl_id":null,"docs":" A corner at location (x, y) with score `score`.\n","sig":null,"attributes":[{"value":"/ A corner at location (x, y) with score `score`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":57756,"byte_end":57807,"line_start":20,"line_end":20,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":235},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":58864,"byte_end":58868,"line_start":54,"line_end":54,"column_start":5,"column_end":9},"name":"Nine","qualname":"::corners::Fast::Nine","value":"Fast::Nine","parent":{"krate":0,"index":234},"children":[],"decl_id":null,"docs":" Corners require a section of length as least nine.\n","sig":null,"attributes":[{"value":"/ Corners require a section of length as least nine.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":58805,"byte_end":58859,"line_start":53,"line_end":53,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":237},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":58935,"byte_end":58941,"line_start":56,"line_end":56,"column_start":5,"column_end":11},"name":"Twelve","qualname":"::corners::Fast::Twelve","value":"Fast::Twelve","parent":{"krate":0,"index":234},"children":[],"decl_id":null,"docs":" Corners require a section of length as least twelve.\n","sig":null,"attributes":[{"value":"/ Corners require a section of length as least twelve.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":58874,"byte_end":58930,"line_start":55,"line_end":55,"column_start":5,"column_end":61}}]},{"kind":"Enum","id":{"krate":0,"index":234},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":58794,"byte_end":58798,"line_start":52,"line_end":52,"column_start":10,"column_end":14},"name":"Fast","qualname":"::corners::Fast","value":"pub enum Fast { Nine, Twelve, }","parent":null,"children":[{"krate":0,"index":235},{"krate":0,"index":237}],"decl_id":null,"docs":" Variants of the [FAST](https://en.wikipedia.org/wiki/Features_from_accelerated_segment_test)\n corner detector. These classify a point based on its intensity relative to the 16 pixels\n in the Bresenham circle of radius 3 around it. A point P with intensity I is detected as a\n corner if all pixels in a sufficiently long contiguous section of this circle either\n all have intensity greater than I + t or all have intensity less than\n I - t, for some user-provided threshold t. The score of a corner is\n the greatest threshold for which the given pixel still qualifies as\n a corner.\n","sig":null,"attributes":[{"value":"/ Variants of the [FAST](https://en.wikipedia.org/wiki/Features_from_accelerated_segment_test)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":58179,"byte_end":58275,"line_start":44,"line_end":44,"column_start":1,"column_end":97}},{"value":"/ corner detector. These classify a point based on its intensity relative to the 16 pixels","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":58276,"byte_end":58368,"line_start":45,"line_end":45,"column_start":1,"column_end":93}},{"value":"/ in the Bresenham circle of radius 3 around it. A point P with intensity I is detected as a","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":58369,"byte_end":58463,"line_start":46,"line_end":46,"column_start":1,"column_end":95}},{"value":"/ corner if all pixels in a sufficiently long contiguous section of this circle either","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":58464,"byte_end":58552,"line_start":47,"line_end":47,"column_start":1,"column_end":89}},{"value":"/ all have intensity greater than I + t or all have intensity less than","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":58553,"byte_end":58626,"line_start":48,"line_end":48,"column_start":1,"column_end":74}},{"value":"/ I - t, for some user-provided threshold t. The score of a corner is","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":58627,"byte_end":58698,"line_start":49,"line_end":49,"column_start":1,"column_end":72}},{"value":"/ the greatest threshold for which the given pixel still qualifies as","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":58699,"byte_end":58770,"line_start":50,"line_end":50,"column_start":1,"column_end":72}},{"value":"/ a corner.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":58771,"byte_end":58784,"line_start":51,"line_end":51,"column_start":1,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":239},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":59018,"byte_end":59032,"line_start":60,"line_end":60,"column_start":8,"column_end":22},"name":"corners_fast12","qualname":"::corners::corners_fast12","value":"pub fn corners_fast12(&GrayImage, u8) -> Vec<Corner>","parent":null,"children":[],"decl_id":null,"docs":" Finds corners using FAST-12 features. See comment on `Fast`.\n","sig":null,"attributes":[{"value":"/ Finds corners using FAST-12 features. See comment on `Fast`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":58946,"byte_end":59010,"line_start":59,"line_end":59,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":240},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":59540,"byte_end":59553,"line_start":77,"line_end":77,"column_start":8,"column_end":21},"name":"corners_fast9","qualname":"::corners::corners_fast9","value":"pub fn corners_fast9(&GrayImage, u8) -> Vec<Corner>","parent":null,"children":[],"decl_id":null,"docs":" Finds corners using FAST-9 features. See comment on Fast enum.\n","sig":null,"attributes":[{"value":"/ Finds corners using FAST-9 features. See comment on Fast enum.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":59466,"byte_end":59532,"line_start":76,"line_end":76,"column_start":1,"column_end":67}}]},{"kind":"Function","id":{"krate":0,"index":241},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":60413,"byte_end":60430,"line_start":100,"line_end":100,"column_start":8,"column_end":25},"name":"fast_corner_score","qualname":"::corners::fast_corner_score","value":"pub fn fast_corner_score(&GrayImage, u8, u32, u32, Fast) -> u8","parent":null,"children":[],"decl_id":null,"docs":" The score of a corner detected using the FAST\n detector is the largest threshold for which this\n pixel is still a corner. We input the threshold at which\n the corner was detected as a lower bound on the search.\n Note that the corner check uses a strict inequality, so if\n the smallest intensity difference between the center pixel\n and a corner pixel is n then the corner will have a score of n - 1.\n","sig":null,"attributes":[{"value":"/ The score of a corner detected using the FAST","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":59984,"byte_end":60033,"line_start":93,"line_end":93,"column_start":1,"column_end":50}},{"value":"/ detector is the largest threshold for which this","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":60034,"byte_end":60086,"line_start":94,"line_end":94,"column_start":1,"column_end":53}},{"value":"/ pixel is still a corner. We input the threshold at which","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":60087,"byte_end":60147,"line_start":95,"line_end":95,"column_start":1,"column_end":61}},{"value":"/ the corner was detected as a lower bound on the search.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":60148,"byte_end":60207,"line_start":96,"line_end":96,"column_start":1,"column_end":60}},{"value":"/ Note that the corner check uses a strict inequality, so if","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":60208,"byte_end":60270,"line_start":97,"line_end":97,"column_start":1,"column_end":63}},{"value":"/ the smallest intensity difference between the center pixel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":60271,"byte_end":60333,"line_start":98,"line_end":98,"column_start":1,"column_end":63}},{"value":"/ and a corner pixel is n then the corner will have a score of n - 1.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":60334,"byte_end":60405,"line_start":99,"line_end":99,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":255},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"definitions","qualname":"::definitions","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":263},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":285},{"krate":0,"index":288},{"krate":0,"index":291},{"krate":0,"index":293},{"krate":0,"index":295},{"krate":0,"index":2157},{"krate":0,"index":2159},{"krate":0,"index":2161},{"krate":0,"index":2163},{"krate":0,"index":2165},{"krate":0,"index":2167},{"krate":0,"index":2169},{"krate":0,"index":2171},{"krate":0,"index":2173},{"krate":0,"index":2176},{"krate":0,"index":2179},{"krate":0,"index":2182},{"krate":0,"index":2185},{"krate":0,"index":2187},{"krate":0,"index":2189},{"krate":0,"index":2191},{"krate":0,"index":2193},{"krate":0,"index":2196},{"krate":0,"index":2199},{"krate":0,"index":2202},{"krate":0,"index":2205},{"krate":0,"index":2207},{"krate":0,"index":2209},{"krate":0,"index":2211},{"krate":0,"index":298},{"krate":0,"index":301},{"krate":0,"index":303},{"krate":0,"index":2213},{"krate":0,"index":2215},{"krate":0,"index":2217},{"krate":0,"index":2219},{"krate":0,"index":2221},{"krate":0,"index":2223},{"krate":0,"index":2225},{"krate":0,"index":2227},{"krate":0,"index":2229},{"krate":0,"index":2231},{"krate":0,"index":2233},{"krate":0,"index":2235},{"krate":0,"index":2237},{"krate":0,"index":2239},{"krate":0,"index":2241},{"krate":0,"index":2243},{"krate":0,"index":2245},{"krate":0,"index":2247},{"krate":0,"index":2249},{"krate":0,"index":2251}],"decl_id":null,"docs":" Trait definitions and type aliases.\n","sig":null,"attributes":[{"value":"/ Trait definitions and type aliases.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":74549,"byte_end":74588,"line_start":1,"line_end":1,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":75226,"byte_end":75231,"line_start":13,"line_end":13,"column_start":10,"column_end":15},"name":"Image","qualname":"::definitions::Image","value":"ImageBuffer<P, Vec<<P as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" An `ImageBuffer` containing Pixels of type P with storage `Vec<P::Subpixel>`.\n Most operations in this library only support inputs of type `Image`, rather\n than arbitrary `image::GenericImage`s. This is obviously less flexible, but\n has the advantage of allowing many functions to be more performant. We may want\n to add more flexibility later, but this should not be at the expense of performance.\n When specialisation lands we should be able to do this by defining traits for images\n with contiguous storage.\n","sig":null,"attributes":[{"value":"/ An `ImageBuffer` containing Pixels of type P with storage `Vec<P::Subpixel>`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":74684,"byte_end":74765,"line_start":6,"line_end":6,"column_start":1,"column_end":82}},{"value":"/ Most operations in this library only support inputs of type `Image`, rather","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":74766,"byte_end":74845,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ than arbitrary `image::GenericImage`s. This is obviously less flexible, but","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":74846,"byte_end":74925,"line_start":8,"line_end":8,"column_start":1,"column_end":80}},{"value":"/ has the advantage of allowing many functions to be more performant. We may want","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":74926,"byte_end":75009,"line_start":9,"line_end":9,"column_start":1,"column_end":84}},{"value":"/ to add more flexibility later, but this should not be at the expense of performance.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":75010,"byte_end":75098,"line_start":10,"line_end":10,"column_start":1,"column_end":89}},{"value":"/ When specialisation lands we should be able to do this by defining traits for images","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":75099,"byte_end":75187,"line_start":11,"line_end":11,"column_start":1,"column_end":89}},{"value":"/ with contiguous storage.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":75188,"byte_end":75216,"line_start":12,"line_end":12,"column_start":1,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":293},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":75336,"byte_end":75344,"line_start":16,"line_end":16,"column_start":11,"column_end":19},"name":"HasBlack","qualname":"::definitions::HasBlack","value":"HasBlack","parent":null,"children":[{"krate":0,"index":294}],"decl_id":null,"docs":" Pixels which have a named Black value.\n","sig":null,"attributes":[{"value":"/ Pixels which have a named Black value.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":75283,"byte_end":75325,"line_start":15,"line_end":15,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":75398,"byte_end":75403,"line_start":18,"line_end":18,"column_start":8,"column_end":13},"name":"black","qualname":"::definitions::HasBlack::black","value":"pub fn black() -> Self","parent":{"krate":0,"index":293},"children":[],"decl_id":null,"docs":" Returns a black pixel of this type.\n","sig":null,"attributes":[{"value":"/ Returns a black pixel of this type.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":75351,"byte_end":75390,"line_start":17,"line_end":17,"column_start":5,"column_end":44}}]},{"kind":"Trait","id":{"krate":0,"index":295},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":75471,"byte_end":75479,"line_start":22,"line_end":22,"column_start":11,"column_end":19},"name":"HasWhite","qualname":"::definitions::HasWhite","value":"HasWhite","parent":null,"children":[{"krate":0,"index":296}],"decl_id":null,"docs":" Pixels which have a named White value.\n","sig":null,"attributes":[{"value":"/ Pixels which have a named White value.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":75418,"byte_end":75460,"line_start":21,"line_end":21,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":75533,"byte_end":75538,"line_start":24,"line_end":24,"column_start":8,"column_end":13},"name":"white","qualname":"::definitions::HasWhite::white","value":"pub fn white() -> Self","parent":{"krate":0,"index":295},"children":[],"decl_id":null,"docs":" Returns a white pixel of this type.\n","sig":null,"attributes":[{"value":"/ Returns a white pixel of this type.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":75486,"byte_end":75525,"line_start":23,"line_end":23,"column_start":5,"column_end":44}}]},{"kind":"Trait","id":{"krate":0,"index":298},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":77049,"byte_end":77057,"line_start":81,"line_end":81,"column_start":11,"column_end":19},"name":"Position","qualname":"::definitions::Position","value":"Position","parent":null,"children":[{"krate":0,"index":299},{"krate":0,"index":300}],"decl_id":null,"docs":" Something with a 2d position.\n","sig":null,"attributes":[{"value":"/ Something with a 2d position.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":77005,"byte_end":77038,"line_start":80,"line_end":80,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":77089,"byte_end":77090,"line_start":83,"line_end":83,"column_start":8,"column_end":9},"name":"x","qualname":"::definitions::Position::x","value":"pub fn x(&Self) -> u32","parent":{"krate":0,"index":298},"children":[],"decl_id":null,"docs":" x-coordinate.\n","sig":null,"attributes":[{"value":"/ x-coordinate.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":77064,"byte_end":77081,"line_start":82,"line_end":82,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":77135,"byte_end":77136,"line_start":85,"line_end":85,"column_start":8,"column_end":9},"name":"y","qualname":"::definitions::Position::y","value":"pub fn y(&Self) -> u32","parent":{"krate":0,"index":298},"children":[],"decl_id":null,"docs":" y-coordinate.\n","sig":null,"attributes":[{"value":"/ y-coordinate.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":77110,"byte_end":77127,"line_start":84,"line_end":84,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":301},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":77193,"byte_end":77198,"line_start":89,"line_end":89,"column_start":11,"column_end":16},"name":"Score","qualname":"::definitions::Score","value":"Score","parent":null,"children":[{"krate":0,"index":302}],"decl_id":null,"docs":" Something with a score.\n","sig":null,"attributes":[{"value":"/ Something with a score.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":77155,"byte_end":77182,"line_start":88,"line_end":88,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":77236,"byte_end":77241,"line_start":91,"line_end":91,"column_start":8,"column_end":13},"name":"score","qualname":"::definitions::Score::score","value":"pub fn score(&Self) -> f32","parent":{"krate":0,"index":301},"children":[],"decl_id":null,"docs":" Score of this item.\n","sig":null,"attributes":[{"value":"/ Score of this item.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":77205,"byte_end":77228,"line_start":90,"line_end":90,"column_start":5,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":303},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":77388,"byte_end":77393,"line_start":96,"line_end":96,"column_start":11,"column_end":16},"name":"Clamp","qualname":"::definitions::Clamp","value":"Clamp<T>","parent":null,"children":[{"krate":0,"index":305}],"decl_id":null,"docs":" A type to which we can clamp a value of type T.\n Implementations are not required to handle `NaN`s gracefully.\n","sig":null,"attributes":[{"value":"/ A type to which we can clamp a value of type T.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":77260,"byte_end":77311,"line_start":94,"line_end":94,"column_start":1,"column_end":52}},{"value":"/ Implementations are not required to handle `NaN`s gracefully.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":77312,"byte_end":77377,"line_start":95,"line_end":95,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":77456,"byte_end":77461,"line_start":98,"line_end":98,"column_start":8,"column_end":13},"name":"clamp","qualname":"::definitions::Clamp::clamp","value":"pub fn clamp(T) -> Self","parent":{"krate":0,"index":303},"children":[],"decl_id":null,"docs":" Clamp `x` to a valid value for this type.\n","sig":null,"attributes":[{"value":"/ Clamp `x` to a valid value for this type.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\definitions.rs","byte_start":77403,"byte_end":77448,"line_start":97,"line_end":97,"column_start":5,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":308},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"distance_transform","qualname":"::distance_transform","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","parent":null,"children":[{"krate":0,"index":309},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":316},{"krate":0,"index":319},{"krate":0,"index":322},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":328},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":335},{"krate":0,"index":2253},{"krate":0,"index":2258},{"krate":0,"index":2259},{"krate":0,"index":2261},{"krate":0,"index":2263},{"krate":0,"index":2264},{"krate":0,"index":2266},{"krate":0,"index":2267},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":2269},{"krate":0,"index":2274},{"krate":0,"index":2275},{"krate":0,"index":2277},{"krate":0,"index":2278},{"krate":0,"index":2280},{"krate":0,"index":2281},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":346},{"krate":0,"index":348},{"krate":0,"index":351},{"krate":0,"index":354},{"krate":0,"index":358},{"krate":0,"index":362},{"krate":0,"index":366},{"krate":0,"index":370},{"krate":0,"index":373},{"krate":0,"index":376},{"krate":0,"index":380},{"krate":0,"index":384},{"krate":0,"index":387}],"decl_id":null,"docs":" Functions for computing distance transforms - the distance of each pixel in an\n image from the nearest pixel of interest.\n","sig":null,"attributes":[{"value":"/ Functions for computing distance transforms - the distance of each pixel in an","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":79977,"byte_end":80059,"line_start":1,"line_end":1,"column_start":1,"column_end":83}},{"value":"/ image from the nearest pixel of interest.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":80060,"byte_end":80105,"line_start":2,"line_end":2,"column_start":1,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2254},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81194,"byte_end":81196,"line_start":25,"line_end":25,"column_start":5,"column_end":7},"name":"L1","qualname":"::distance_transform::Norm::L1","value":"Norm::L1","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" Defines d((x1, y1), (x2, y2)) to be abs(x1 - x2) + abs(y1 - y2).\n Also known as the Manhattan or city block norm.\n","sig":null,"attributes":[{"value":"/ Defines d((x1, y1), (x2, y2)) to be abs(x1 - x2) + abs(y1 - y2).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81065,"byte_end":81133,"line_start":23,"line_end":23,"column_start":5,"column_end":73}},{"value":"/ Also known as the Manhattan or city block norm.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81138,"byte_end":81189,"line_start":24,"line_end":24,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2256},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81322,"byte_end":81326,"line_start":28,"line_end":28,"column_start":5,"column_end":9},"name":"LInf","qualname":"::distance_transform::Norm::LInf","value":"Norm::LInf","parent":{"krate":0,"index":2253},"children":[],"decl_id":null,"docs":" Defines d((x1, y1), (x2, y2)) to be max(abs(x1 - x2), abs(y1 - y2)).\n Also known as the chessboard norm.\n","sig":null,"attributes":[{"value":"/ Defines d((x1, y1), (x2, y2)) to be max(abs(x1 - x2), abs(y1 - y2)).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81202,"byte_end":81274,"line_start":26,"line_end":26,"column_start":5,"column_end":77}},{"value":"/ Also known as the chessboard norm.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81279,"byte_end":81317,"line_start":27,"line_end":27,"column_start":5,"column_end":43}}]},{"kind":"Enum","id":{"krate":0,"index":2253},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81054,"byte_end":81058,"line_start":22,"line_end":22,"column_start":10,"column_end":14},"name":"Norm","qualname":"::distance_transform::Norm","value":"pub enum Norm { L1, LInf, }","parent":null,"children":[{"krate":0,"index":2254},{"krate":0,"index":2256}],"decl_id":null,"docs":" How to measure distance between coordinates.\n See the [`distance_transform`](fn.distance_transform.html) documentation for examples.","sig":null,"attributes":[{"value":"/ How to measure distance between coordinates.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":80253,"byte_end":80301,"line_start":9,"line_end":9,"column_start":1,"column_end":49}},{"value":"/ See the [`distance_transform`](fn.distance_transform.html) documentation for examples.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":80302,"byte_end":80392,"line_start":10,"line_end":10,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":80393,"byte_end":80396,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Note that this enum doesn't currently include the `L2` norm. As `Norm`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":80397,"byte_end":80471,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ is used by the [`morphology`](../morphology/index.html) functions, this means that we","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":80472,"byte_end":80561,"line_start":13,"line_end":13,"column_start":1,"column_end":90}},{"value":"/ don't support using the `L2` norm for any of those functions.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":80562,"byte_end":80627,"line_start":14,"line_end":14,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":80628,"byte_end":80631,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This module does support calculating the `L2` distance function, via the","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":80632,"byte_end":80708,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/ [`euclidean_squared_distance_transform`](fn.euclidean_squared_distance_transform.html)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":80709,"byte_end":80799,"line_start":17,"line_end":17,"column_start":1,"column_end":91}},{"value":"/ function, but the signature of this function is not currently compatible with those for","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":80800,"byte_end":80891,"line_start":18,"line_end":18,"column_start":1,"column_end":92}},{"value":"/ computing `L1` and `LInf` distance transforms. It would be nice to unify these functions","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":80892,"byte_end":80984,"line_start":19,"line_end":19,"column_start":1,"column_end":93}},{"value":"/ in future.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":80985,"byte_end":80999,"line_start":20,"line_end":20,"column_start":1,"column_end":15}}]},{"kind":"Function","id":{"krate":0,"index":338},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":82600,"byte_end":82618,"line_start":76,"line_end":76,"column_start":8,"column_end":26},"name":"distance_transform","qualname":"::distance_transform::distance_transform","value":"pub fn distance_transform(&GrayImage, Norm) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Returns an image showing the distance of each pixel from a foreground pixel in the original image.","sig":null,"attributes":[{"value":"/ Returns an image showing the distance of each pixel from a foreground pixel in the original image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81331,"byte_end":81433,"line_start":31,"line_end":31,"column_start":1,"column_end":103}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81434,"byte_end":81437,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ A pixel belongs to the foreground if it has non-zero intensity. As the image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81438,"byte_end":81518,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ has a bit-depth of 8, distances saturate at 255.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81519,"byte_end":81571,"line_start":34,"line_end":34,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81572,"byte_end":81575,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81576,"byte_end":81590,"line_start":36,"line_end":36,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81591,"byte_end":81598,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81599,"byte_end":81624,"line_start":38,"line_end":38,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81625,"byte_end":81643,"line_start":39,"line_end":39,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81644,"byte_end":81673,"line_start":40,"line_end":40,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81674,"byte_end":81691,"line_start":41,"line_end":41,"column_start":1,"column_end":18}},{"value":"/ use image::GrayImage;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81692,"byte_end":81717,"line_start":42,"line_end":42,"column_start":1,"column_end":26}},{"value":"/ use imageproc::distance_transform::{distance_transform, Norm};","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81718,"byte_end":81784,"line_start":43,"line_end":43,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81785,"byte_end":81788,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81789,"byte_end":81817,"line_start":45,"line_end":45,"column_start":1,"column_end":29}},{"value":"/     0,   0,   0,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81818,"byte_end":81848,"line_start":46,"line_end":46,"column_start":1,"column_end":31}},{"value":"/     0,   0,   0,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81849,"byte_end":81879,"line_start":47,"line_end":47,"column_start":1,"column_end":31}},{"value":"/     0,   0,   1,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81880,"byte_end":81910,"line_start":48,"line_end":48,"column_start":1,"column_end":31}},{"value":"/     0,   0,   0,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81911,"byte_end":81941,"line_start":49,"line_end":49,"column_start":1,"column_end":31}},{"value":"/     0,   0,   0,   0,   0","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81942,"byte_end":81971,"line_start":50,"line_end":50,"column_start":1,"column_end":30}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81972,"byte_end":81978,"line_start":51,"line_end":51,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81979,"byte_end":81982,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ // L1 norm","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81983,"byte_end":81997,"line_start":53,"line_end":53,"column_start":1,"column_end":15}},{"value":"/ let l1_distances = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":81998,"byte_end":82033,"line_start":54,"line_end":54,"column_start":1,"column_end":36}},{"value":"/     4,   3,   2,   3,   4;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":82034,"byte_end":82064,"line_start":55,"line_end":55,"column_start":1,"column_end":31}},{"value":"/     3,   2,   1,   2,   3;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":82065,"byte_end":82095,"line_start":56,"line_end":56,"column_start":1,"column_end":31}},{"value":"/     2,   1,   0,   1,   2;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":82096,"byte_end":82126,"line_start":57,"line_end":57,"column_start":1,"column_end":31}},{"value":"/     3,   2,   1,   2,   3;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":82127,"byte_end":82157,"line_start":58,"line_end":58,"column_start":1,"column_end":31}},{"value":"/     4,   3,   2,   3,   4","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":82158,"byte_end":82187,"line_start":59,"line_end":59,"column_start":1,"column_end":30}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":82188,"byte_end":82194,"line_start":60,"line_end":60,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":82195,"byte_end":82198,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(distance_transform(&image, Norm::L1), l1_distances);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":82199,"byte_end":82273,"line_start":62,"line_end":62,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":82274,"byte_end":82277,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ // LInf norm","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":82278,"byte_end":82294,"line_start":64,"line_end":64,"column_start":1,"column_end":17}},{"value":"/ let linf_distances = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":82295,"byte_end":82332,"line_start":65,"line_end":65,"column_start":1,"column_end":38}},{"value":"/     2,   2,   2,   2,   2;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":82333,"byte_end":82363,"line_start":66,"line_end":66,"column_start":1,"column_end":31}},{"value":"/     2,   1,   1,   1,   2;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":82364,"byte_end":82394,"line_start":67,"line_end":67,"column_start":1,"column_end":31}},{"value":"/     2,   1,   0,   1,   2;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":82395,"byte_end":82425,"line_start":68,"line_end":68,"column_start":1,"column_end":31}},{"value":"/     2,   1,   1,   1,   2;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":82426,"byte_end":82456,"line_start":69,"line_end":69,"column_start":1,"column_end":31}},{"value":"/     2,   2,   2,   2,   2","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":82457,"byte_end":82486,"line_start":70,"line_end":70,"column_start":1,"column_end":30}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":82487,"byte_end":82493,"line_start":71,"line_end":71,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":82494,"byte_end":82497,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(distance_transform(&image, Norm::LInf), linf_distances);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":82498,"byte_end":82576,"line_start":73,"line_end":73,"column_start":1,"column_end":79}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":82577,"byte_end":82584,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":82585,"byte_end":82592,"line_start":75,"line_end":75,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":339},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":83111,"byte_end":83133,"line_start":88,"line_end":88,"column_start":8,"column_end":30},"name":"distance_transform_mut","qualname":"::distance_transform::distance_transform_mut","value":"pub fn distance_transform_mut(&mut GrayImage, Norm)","parent":null,"children":[],"decl_id":null,"docs":" Updates an image in place so that each pixel contains its distance from a foreground pixel in the original image.","sig":null,"attributes":[{"value":"/ Updates an image in place so that each pixel contains its distance from a foreground pixel in the original image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":82753,"byte_end":82870,"line_start":82,"line_end":82,"column_start":1,"column_end":118}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":82871,"byte_end":82874,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ A pixel belongs to the foreground if it has non-zero intensity. As the image has a bit-depth of 8,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":82875,"byte_end":82977,"line_start":84,"line_end":84,"column_start":1,"column_end":103}},{"value":"/ distances saturate at 255.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":82978,"byte_end":83008,"line_start":85,"line_end":85,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":83009,"byte_end":83012,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ See the [`distance_transform`](fn.distance_transform.html) documentation for examples.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":83013,"byte_end":83103,"line_start":87,"line_end":87,"column_start":1,"column_end":91}}]},{"kind":"Function","id":{"krate":0,"index":342},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":86534,"byte_end":86570,"line_start":184,"line_end":184,"column_start":8,"column_end":44},"name":"euclidean_squared_distance_transform","qualname":"::distance_transform::euclidean_squared_distance_transform","value":"pub fn euclidean_squared_distance_transform(&Image<Luma<u8>>)\n-> Image<Luma<f64>>","parent":null,"children":[],"decl_id":null,"docs":" Computes the square of the `L2` (Euclidean) distance transform of `image`. Distances are to the\n nearest foreground pixel, where a pixel is counted as foreground if it has non-zero value.","sig":null,"attributes":[{"value":"/ Computes the square of the `L2` (Euclidean) distance transform of `image`. Distances are to the","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":86105,"byte_end":86204,"line_start":177,"line_end":177,"column_start":1,"column_end":100}},{"value":"/ nearest foreground pixel, where a pixel is counted as foreground if it has non-zero value.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":86205,"byte_end":86299,"line_start":178,"line_end":178,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":86300,"byte_end":86303,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ Uses the algorithm from [Distance Transforms of Sampled Functions] to achieve time linear","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":86304,"byte_end":86397,"line_start":180,"line_end":180,"column_start":1,"column_end":94}},{"value":"/ in the size of the image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":86398,"byte_end":86427,"line_start":181,"line_end":181,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":86428,"byte_end":86431,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ [Distance Transforms of Sampled Functions]: http://www.cs.cornell.edu/~dph/papers%5Cdt.pdf","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":86432,"byte_end":86526,"line_start":183,"line_end":183,"column_start":1,"column_end":95}}]},{"kind":"Mod","id":{"krate":0,"index":389},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"drawing","qualname":"::drawing","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","parent":null,"children":[{"krate":0,"index":390},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":423},{"krate":0,"index":426},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":467},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":517},{"krate":0,"index":520},{"krate":0,"index":523},{"krate":0,"index":526},{"krate":0,"index":529},{"krate":0,"index":532},{"krate":0,"index":535},{"krate":0,"index":538},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":561},{"krate":0,"index":564},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":678},{"krate":0,"index":681},{"krate":0,"index":684},{"krate":0,"index":687},{"krate":0,"index":690},{"krate":0,"index":693},{"krate":0,"index":696},{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":738},{"krate":0,"index":741},{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":776},{"krate":0,"index":779},{"krate":0,"index":782},{"krate":0,"index":785},{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":842},{"krate":0,"index":845}],"decl_id":null,"docs":" Helpers for drawing basic shapes on images.\n","sig":null,"attributes":[{"value":"/ Helpers for drawing basic shapes on images.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\mod.rs","byte_start":99286,"byte_end":99333,"line_start":1,"line_end":1,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":413},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\bezier.rs","byte_start":100860,"byte_end":100883,"line_start":9,"line_end":9,"column_start":8,"column_end":31},"name":"draw_cubic_bezier_curve","qualname":"::drawing::bezier::draw_cubic_bezier_curve","value":"pub fn draw_cubic_bezier_curve<I>(&I, (f32, f32), (f32, f32), (f32, f32),\n                                  (f32, f32), I::Pixel) -> Image<I::Pixel>\nwhere I: GenericImage, I::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draws as much of a cubic bezier curve as lies within image bounds.\n","sig":null,"attributes":[{"value":"/ Draws as much of a cubic bezier curve as lies within image bounds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\bezier.rs","byte_start":100782,"byte_end":100852,"line_start":8,"line_end":8,"column_start":1,"column_end":71}}]},{"kind":"Function","id":{"krate":0,"index":415},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\bezier.rs","byte_start":101376,"byte_end":101403,"line_start":28,"line_end":28,"column_start":8,"column_end":35},"name":"draw_cubic_bezier_curve_mut","qualname":"::drawing::bezier::draw_cubic_bezier_curve_mut","value":"pub fn draw_cubic_bezier_curve_mut<C>(&mut C, (f32, f32), (f32, f32),\n                                      (f32, f32), (f32, f32), C::Pixel) where\nC: Canvas, C::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draws as much of a cubic bezier curve as lies within image bounds.\n","sig":null,"attributes":[{"value":"/ Draws as much of a cubic bezier curve as lies within image bounds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\bezier.rs","byte_start":101298,"byte_end":101368,"line_start":27,"line_end":27,"column_start":1,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":437},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":106013,"byte_end":106019,"line_start":50,"line_end":50,"column_start":11,"column_end":17},"name":"Canvas","qualname":"::drawing::canvas::Canvas","value":"Canvas","parent":null,"children":[{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443}],"decl_id":null,"docs":" A surface for drawing on - many drawing functions in this\n library are generic over a `Canvas` to allow the user to\n configure e.g. whether to use blending.","sig":null,"attributes":[{"value":"/ A surface for drawing on - many drawing functions in this","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":104280,"byte_end":104341,"line_start":3,"line_end":3,"column_start":1,"column_end":62}},{"value":"/ library are generic over a `Canvas` to allow the user to","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":104342,"byte_end":104402,"line_start":4,"line_end":4,"column_start":1,"column_end":61}},{"value":"/ configure e.g. whether to use blending.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":104403,"byte_end":104446,"line_start":5,"line_end":5,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":104447,"byte_end":104450,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ All instances of `GenericImage` implement `Canvas`, with","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":104451,"byte_end":104511,"line_start":7,"line_end":7,"column_start":1,"column_end":61}},{"value":"/ the behaviour of `draw_pixel` being equivalent to calling","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":104512,"byte_end":104573,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"/ `set_pixel` with the same arguments.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":104574,"byte_end":104614,"line_start":9,"line_end":9,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":104615,"byte_end":104618,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ See [`Blend`](struct.Blend.html) for another example implementation","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":104619,"byte_end":104690,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/ of this trait - its implementation of `draw_pixel` alpha-blends","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":104691,"byte_end":104758,"line_start":12,"line_end":12,"column_start":1,"column_end":68}},{"value":"/ the input value with the pixel's current value.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":104759,"byte_end":104810,"line_start":13,"line_end":13,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":104811,"byte_end":104814,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":104815,"byte_end":104829,"line_start":15,"line_end":15,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":104830,"byte_end":104837,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":104838,"byte_end":104863,"line_start":17,"line_end":17,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":104864,"byte_end":104882,"line_start":18,"line_end":18,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":104883,"byte_end":104912,"line_start":19,"line_end":19,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":104913,"byte_end":104930,"line_start":20,"line_end":20,"column_start":1,"column_end":18}},{"value":"/ use image::{Pixel, Rgba, RgbaImage};","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":104931,"byte_end":104971,"line_start":21,"line_end":21,"column_start":1,"column_end":41}},{"value":"/ use imageproc::drawing::{Canvas, Blend};","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":104972,"byte_end":105016,"line_start":22,"line_end":22,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":105017,"byte_end":105020,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ // A trivial function which draws on a Canvas","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":105021,"byte_end":105070,"line_start":24,"line_end":24,"column_start":1,"column_end":50}},{"value":"/ fn write_a_pixel<C: Canvas>(canvas: &mut C, c: C::Pixel) {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":105071,"byte_end":105133,"line_start":25,"line_end":25,"column_start":1,"column_end":63}},{"value":"/     canvas.draw_pixel(0, 0, c);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":105134,"byte_end":105169,"line_start":26,"line_end":26,"column_start":1,"column_end":36}},{"value":"/ }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":105170,"byte_end":105175,"line_start":27,"line_end":27,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":105176,"byte_end":105179,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ // Background color","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":105180,"byte_end":105203,"line_start":29,"line_end":29,"column_start":1,"column_end":24}},{"value":"/ let solid_blue = Rgba([0u8, 0u8, 255u8, 255u8]);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":105204,"byte_end":105256,"line_start":30,"line_end":30,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":105257,"byte_end":105260,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ // Drawing color","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":105261,"byte_end":105281,"line_start":32,"line_end":32,"column_start":1,"column_end":21}},{"value":"/ let translucent_red = Rgba([255u8, 0u8, 0u8, 127u8]);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":105282,"byte_end":105339,"line_start":33,"line_end":33,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":105340,"byte_end":105343,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ // Blended combination of background and drawing colors","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":105344,"byte_end":105403,"line_start":35,"line_end":35,"column_start":1,"column_end":60}},{"value":"/ let mut alpha_blended = solid_blue;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":105404,"byte_end":105443,"line_start":36,"line_end":36,"column_start":1,"column_end":40}},{"value":"/ alpha_blended.blend(&translucent_red);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":105444,"byte_end":105486,"line_start":37,"line_end":37,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":105487,"byte_end":105490,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ // The implementation of Canvas for GenericImage overwrites existing pixels","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":105491,"byte_end":105570,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/ let mut image = RgbaImage::from_pixel(1, 1, solid_blue);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":105571,"byte_end":105631,"line_start":40,"line_end":40,"column_start":1,"column_end":61}},{"value":"/ write_a_pixel(&mut image, translucent_red);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":105632,"byte_end":105679,"line_start":41,"line_end":41,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(*image.get_pixel(0, 0), translucent_red);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":105680,"byte_end":105736,"line_start":42,"line_end":42,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":105737,"byte_end":105740,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ // This behaviour can be customised by using a different Canvas type","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":105741,"byte_end":105813,"line_start":44,"line_end":44,"column_start":1,"column_end":73}},{"value":"/ let mut image = Blend(RgbaImage::from_pixel(1, 1, solid_blue));","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":105814,"byte_end":105881,"line_start":45,"line_end":45,"column_start":1,"column_end":68}},{"value":"/ write_a_pixel(&mut image, translucent_red);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":105882,"byte_end":105929,"line_start":46,"line_end":46,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(*image.0.get_pixel(0, 0), alpha_blended);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":105930,"byte_end":105986,"line_start":47,"line_end":47,"column_start":1,"column_end":57}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":105987,"byte_end":105994,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":105995,"byte_end":106002,"line_start":49,"line_end":49,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":438},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":106093,"byte_end":106098,"line_start":52,"line_end":52,"column_start":10,"column_end":15},"name":"Pixel","qualname":"::drawing::canvas::Canvas::Pixel","value":"type Pixel: Pixel;","parent":{"krate":0,"index":437},"children":[],"decl_id":null,"docs":" The type of `Pixel` that can be drawn on this canvas.\n","sig":null,"attributes":[{"value":"/ The type of `Pixel` that can be drawn on this canvas.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":106026,"byte_end":106083,"line_start":51,"line_end":51,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":106160,"byte_end":106170,"line_start":55,"line_end":55,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::drawing::canvas::Canvas::dimensions","value":"pub fn dimensions(&Self) -> (u32, u32)","parent":{"krate":0,"index":437},"children":[],"decl_id":null,"docs":" The width and height of this canvas.\n","sig":null,"attributes":[{"value":"/ The width and height of this canvas.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":106112,"byte_end":106152,"line_start":54,"line_end":54,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":106235,"byte_end":106240,"line_start":58,"line_end":58,"column_start":8,"column_end":13},"name":"width","qualname":"::drawing::canvas::Canvas::width","value":"pub fn width(&Self) -> u32","parent":{"krate":0,"index":437},"children":[],"decl_id":null,"docs":" The width of this canvas.\n","sig":null,"attributes":[{"value":"/ The width of this canvas.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":106198,"byte_end":106227,"line_start":57,"line_end":57,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":106334,"byte_end":106340,"line_start":63,"line_end":63,"column_start":8,"column_end":14},"name":"height","qualname":"::drawing::canvas::Canvas::height","value":"pub fn height(&Self) -> u32","parent":{"krate":0,"index":437},"children":[],"decl_id":null,"docs":" The height of this canvas.\n","sig":null,"attributes":[{"value":"/ The height of this canvas.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":106296,"byte_end":106326,"line_start":62,"line_end":62,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":106444,"byte_end":106453,"line_start":68,"line_end":68,"column_start":8,"column_end":17},"name":"get_pixel","qualname":"::drawing::canvas::Canvas::get_pixel","value":"pub fn get_pixel(&Self, u32, u32) -> Self::Pixel","parent":{"krate":0,"index":437},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y).\n","sig":null,"attributes":[{"value":"/ Returns the pixel located at (x, y).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":106396,"byte_end":106436,"line_start":67,"line_end":67,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":106667,"byte_end":106677,"line_start":73,"line_end":73,"column_start":8,"column_end":18},"name":"draw_pixel","qualname":"::drawing::canvas::Canvas::draw_pixel","value":"pub fn draw_pixel(&mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":437},"children":[],"decl_id":null,"docs":" Draw a pixel at the given coordinates. `x` and `y`\n should be within `dimensions` - if not then panicking\n is a valid implementation behaviour.\n","sig":null,"attributes":[{"value":"/ Draw a pixel at the given coordinates. `x` and `y`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":106498,"byte_end":106552,"line_start":70,"line_end":70,"column_start":5,"column_end":59}},{"value":"/ should be within `dimensions` - if not then panicking","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":106557,"byte_end":106614,"line_start":71,"line_end":71,"column_start":5,"column_end":62}},{"value":"/ is a valid implementation behaviour.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":106619,"byte_end":106659,"line_start":72,"line_end":72,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":450},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":107267,"byte_end":107272,"line_start":99,"line_end":99,"column_start":12,"column_end":17},"name":"Blend","qualname":"::drawing::canvas::Blend","value":"","parent":null,"children":[],"decl_id":null,"docs":" A canvas that blends pixels when drawing.","sig":null,"attributes":[{"value":"/ A canvas that blends pixels when drawing.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":107110,"byte_end":107155,"line_start":95,"line_end":95,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":107156,"byte_end":107159,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ See the documentation for [`Canvas`](trait.Canvas.html)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":107160,"byte_end":107219,"line_start":97,"line_end":97,"column_start":1,"column_end":60}},{"value":"/ for an example using this type.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":107220,"byte_end":107255,"line_start":98,"line_end":98,"column_start":1,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":453},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":107276,"byte_end":107281,"line_start":99,"line_end":99,"column_start":21,"column_end":26},"name":"0","qualname":"::drawing::canvas::Blend::0","value":"I","parent":{"krate":0,"index":450},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":493},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":108221,"byte_end":108240,"line_start":15,"line_end":15,"column_start":8,"column_end":27},"name":"draw_hollow_ellipse","qualname":"::drawing::conics::draw_hollow_ellipse","value":"pub fn draw_hollow_ellipse<I>(&I, (i32, i32), i32, i32, I::Pixel)\n-> Image<I::Pixel> where I: GenericImage, I::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draw as much of an ellipse as lies inside the image bounds.\n Uses Midpoint Ellipse Drawing Algorithm. (Modified from Bresenham's algorithm) (http://tutsheap.com/c/mid-point-ellipse-drawing-algorithm/)","sig":null,"attributes":[{"value":"/ Draw as much of an ellipse as lies inside the image bounds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":107869,"byte_end":107932,"line_start":9,"line_end":9,"column_start":1,"column_end":64}},{"value":"/ Uses Midpoint Ellipse Drawing Algorithm. (Modified from Bresenham's algorithm) (http://tutsheap.com/c/mid-point-ellipse-drawing-algorithm/)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":107933,"byte_end":108076,"line_start":10,"line_end":10,"column_start":1,"column_end":144}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":108077,"byte_end":108080,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ The ellipse is axis-aligned and satisfies the following equation:","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":108081,"byte_end":108150,"line_start":12,"line_end":12,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":108151,"byte_end":108154,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ (`x^2 / width_radius^2) + (y^2 / height_radius^2) = 1`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":108155,"byte_end":108213,"line_start":14,"line_end":14,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":495},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":108979,"byte_end":109002,"line_start":38,"line_end":38,"column_start":8,"column_end":31},"name":"draw_hollow_ellipse_mut","qualname":"::drawing::conics::draw_hollow_ellipse_mut","value":"pub fn draw_hollow_ellipse_mut<C>(&mut C, (i32, i32), i32, i32, C::Pixel)\nwhere C: Canvas, C::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draw as much of an ellipse as lies inside the image bounds.\n Uses Midpoint Ellipse Drawing Algorithm. (Modified from Bresenham's algorithm) (http://tutsheap.com/c/mid-point-ellipse-drawing-algorithm/)","sig":null,"attributes":[{"value":"/ Draw as much of an ellipse as lies inside the image bounds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":108627,"byte_end":108690,"line_start":32,"line_end":32,"column_start":1,"column_end":64}},{"value":"/ Uses Midpoint Ellipse Drawing Algorithm. (Modified from Bresenham's algorithm) (http://tutsheap.com/c/mid-point-ellipse-drawing-algorithm/)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":108691,"byte_end":108834,"line_start":33,"line_end":33,"column_start":1,"column_end":144}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":108835,"byte_end":108838,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ The ellipse is axis-aligned and satisfies the following equation:","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":108839,"byte_end":108908,"line_start":35,"line_end":35,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":108909,"byte_end":108912,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ `(x^2 / width_radius^2) + (y^2 / height_radius^2) = 1`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":108913,"byte_end":108971,"line_start":37,"line_end":37,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":498},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":110152,"byte_end":110171,"line_start":70,"line_end":70,"column_start":8,"column_end":27},"name":"draw_filled_ellipse","qualname":"::drawing::conics::draw_filled_ellipse","value":"pub fn draw_filled_ellipse<I>(&I, (i32, i32), i32, i32, I::Pixel)\n-> Image<I::Pixel> where I: GenericImage, I::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draw as much of an ellipse, including its contents, as lies inside the image bounds.\n Uses Midpoint Ellipse Drawing Algorithm. (Modified from Bresenham's algorithm) (http://tutsheap.com/c/mid-point-ellipse-drawing-algorithm/)","sig":null,"attributes":[{"value":"/ Draw as much of an ellipse, including its contents, as lies inside the image bounds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":109774,"byte_end":109862,"line_start":64,"line_end":64,"column_start":1,"column_end":89}},{"value":"/ Uses Midpoint Ellipse Drawing Algorithm. (Modified from Bresenham's algorithm) (http://tutsheap.com/c/mid-point-ellipse-drawing-algorithm/)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":109863,"byte_end":110006,"line_start":65,"line_end":65,"column_start":1,"column_end":144}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":110007,"byte_end":110010,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ The ellipse is axis-aligned and satisfies the following equation:","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":110011,"byte_end":110080,"line_start":67,"line_end":67,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":110081,"byte_end":110084,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ `(x^2 / width_radius^2) + (y^2 / height_radius^2) <= 1`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":110085,"byte_end":110144,"line_start":69,"line_end":69,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":500},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":110936,"byte_end":110959,"line_start":93,"line_end":93,"column_start":8,"column_end":31},"name":"draw_filled_ellipse_mut","qualname":"::drawing::conics::draw_filled_ellipse_mut","value":"pub fn draw_filled_ellipse_mut<C>(&mut C, (i32, i32), i32, i32, C::Pixel)\nwhere C: Canvas, C::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draw as much of an ellipse, including its contents, as lies inside the image bounds.\n Uses Midpoint Ellipse Drawing Algorithm. (Modified from Bresenham's algorithm) (http://tutsheap.com/c/mid-point-ellipse-drawing-algorithm/)","sig":null,"attributes":[{"value":"/ Draw as much of an ellipse, including its contents, as lies inside the image bounds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":110558,"byte_end":110646,"line_start":87,"line_end":87,"column_start":1,"column_end":89}},{"value":"/ Uses Midpoint Ellipse Drawing Algorithm. (Modified from Bresenham's algorithm) (http://tutsheap.com/c/mid-point-ellipse-drawing-algorithm/)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":110647,"byte_end":110790,"line_start":88,"line_end":88,"column_start":1,"column_end":144}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":110791,"byte_end":110794,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ The ellipse is axis-aligned and satisfies the following equation:","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":110795,"byte_end":110864,"line_start":90,"line_end":90,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":110865,"byte_end":110868,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ `(x^2 / width_radius^2) + (y^2 / height_radius^2) <= 1`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":110869,"byte_end":110928,"line_start":92,"line_end":92,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":505},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":113310,"byte_end":113328,"line_start":177,"line_end":177,"column_start":8,"column_end":26},"name":"draw_hollow_circle","qualname":"::drawing::conics::draw_hollow_circle","value":"pub fn draw_hollow_circle<I>(&I, (i32, i32), i32, I::Pixel) -> Image<I::Pixel>\nwhere I: GenericImage, I::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draw as much of a circle as lies inside the image bounds.\n","sig":null,"attributes":[{"value":"/ Draw as much of a circle as lies inside the image bounds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":113241,"byte_end":113302,"line_start":176,"line_end":176,"column_start":1,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":507},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":113732,"byte_end":113754,"line_start":194,"line_end":194,"column_start":8,"column_end":30},"name":"draw_hollow_circle_mut","qualname":"::drawing::conics::draw_hollow_circle_mut","value":"pub fn draw_hollow_circle_mut<C>(&mut C, (i32, i32), i32, C::Pixel) where\nC: Canvas, C::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draw as much of a circle as lies inside the image bounds.\n","sig":null,"attributes":[{"value":"/ Draw as much of a circle as lies inside the image bounds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":113663,"byte_end":113724,"line_start":193,"line_end":193,"column_start":1,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":509},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":114722,"byte_end":114744,"line_start":226,"line_end":226,"column_start":8,"column_end":30},"name":"draw_filled_circle_mut","qualname":"::drawing::conics::draw_filled_circle_mut","value":"pub fn draw_filled_circle_mut<C>(&mut C, (i32, i32), i32, C::Pixel) where\nC: Canvas, C::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draw as much of a circle, including its contents, as lies inside the image bounds.\n","sig":null,"attributes":[{"value":"/ Draw as much of a circle, including its contents, as lies inside the image bounds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":114628,"byte_end":114714,"line_start":225,"line_end":225,"column_start":1,"column_end":87}}]},{"kind":"Function","id":{"krate":0,"index":511},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":115948,"byte_end":115966,"line_start":274,"line_end":274,"column_start":8,"column_end":26},"name":"draw_filled_circle","qualname":"::drawing::conics::draw_filled_circle","value":"pub fn draw_filled_circle<I>(&I, (i32, i32), i32, I::Pixel) -> Image<I::Pixel>\nwhere I: GenericImage, I::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draw as much of a circle and its contents as lies inside the image bounds.\n","sig":null,"attributes":[{"value":"/ Draw as much of a circle and its contents as lies inside the image bounds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\conics.rs","byte_start":115862,"byte_end":115940,"line_start":273,"line_end":273,"column_start":1,"column_end":79}}]},{"kind":"Function","id":{"krate":0,"index":2283},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\cross.rs","byte_start":118529,"byte_end":118543,"line_start":8,"line_end":8,"column_start":8,"column_end":22},"name":"draw_cross_mut","qualname":"::drawing::cross::draw_cross_mut","value":"pub fn draw_cross_mut<C>(&mut C, C::Pixel, i32, i32) where C: Canvas","parent":null,"children":[],"decl_id":null,"docs":" Draws a colored cross on an image in place. Handles coordinates outside image bounds.\n","sig":null,"attributes":[{"value":"/ Draws a colored cross on an image in place. Handles coordinates outside image bounds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\cross.rs","byte_start":118415,"byte_end":118504,"line_start":6,"line_end":6,"column_start":1,"column_end":90}},{"value":"rustfmt::skip","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\cross.rs","byte_start":118505,"byte_end":118521,"line_start":7,"line_end":7,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":555},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\cross.rs","byte_start":119317,"byte_end":119327,"line_start":38,"line_end":38,"column_start":8,"column_end":18},"name":"draw_cross","qualname":"::drawing::cross::draw_cross","value":"pub fn draw_cross<I>(&I, I::Pixel, i32, i32) -> Image<I::Pixel> where\nI: GenericImage, I::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draws a colored cross on an image. Handles coordinates outside image bounds.\n","sig":null,"attributes":[{"value":"/ Draws a colored cross on an image. Handles coordinates outside image bounds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\cross.rs","byte_start":119229,"byte_end":119309,"line_start":37,"line_end":37,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":594},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":122667,"byte_end":122684,"line_start":10,"line_end":10,"column_start":12,"column_end":29},"name":"BresenhamLineIter","qualname":"::drawing::line::BresenhamLineIter","value":"BresenhamLineIter {  }","parent":null,"children":[{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602}],"decl_id":null,"docs":" Iterates over the coordinates in a line segment using\n [Bresenham's line drawing algorithm](https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm).\n","sig":null,"attributes":[{"value":"/ Iterates over the coordinates in a line segment using","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":122496,"byte_end":122553,"line_start":8,"line_end":8,"column_start":1,"column_end":58}},{"value":"/ [Bresenham's line drawing algorithm](https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":122554,"byte_end":122655,"line_start":9,"line_end":9,"column_start":1,"column_end":102}}]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":122999,"byte_end":123002,"line_start":24,"line_end":24,"column_start":12,"column_end":15},"name":"new","qualname":"<BresenhamLineIter>::new","value":"pub fn new((f32, f32), (f32, f32)) -> BresenhamLineIter","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`BresenhamLineIter`](struct.BresenhamLineIter.html) which will iterate over the integer coordinates\n between `start` and `end`.\n","sig":null,"attributes":[{"value":"/ Creates a [`BresenhamLineIter`](struct.BresenhamLineIter.html) which will iterate over the integer coordinates","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":122838,"byte_end":122952,"line_start":22,"line_end":22,"column_start":5,"column_end":119}},{"value":"/ between `start` and `end`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":122957,"byte_end":122987,"line_start":23,"line_end":23,"column_start":5,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":611},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":124776,"byte_end":124798,"line_start":95,"line_end":95,"column_start":12,"column_end":34},"name":"BresenhamLinePixelIter","qualname":"::drawing::line::BresenhamLinePixelIter","value":"BresenhamLinePixelIter {  }","parent":null,"children":[{"krate":0,"index":614},{"krate":0,"index":615}],"decl_id":null,"docs":" Iterates over the image pixels in a line segment using\n [Bresenham's line drawing algorithm](https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm).\n","sig":null,"attributes":[{"value":"/ Iterates over the image pixels in a line segment using","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":124604,"byte_end":124662,"line_start":93,"line_end":93,"column_start":1,"column_end":59}},{"value":"/ [Bresenham's line drawing algorithm](https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":124663,"byte_end":124764,"line_start":94,"line_end":94,"column_start":1,"column_end":102}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":125128,"byte_end":125131,"line_start":103,"line_end":103,"column_start":12,"column_end":15},"name":"new","qualname":"<BresenhamLinePixelIter>::new","value":"pub fn new(&Image<P>, (f32, f32), (f32, f32)) -> BresenhamLinePixelIter<, P>","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`BresenhamLinePixelIter`](struct.BresenhamLinePixelIter.html) which will iterate over\n the image pixels with coordinates between `start` and `end`.\n","sig":null,"attributes":[{"value":"/ Creates a [`BresenhamLinePixelIter`](struct.BresenhamLinePixelIter.html) which will iterate over","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":124947,"byte_end":125047,"line_start":101,"line_end":101,"column_start":5,"column_end":105}},{"value":"/ the image pixels with coordinates between `start` and `end`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":125052,"byte_end":125116,"line_start":102,"line_end":102,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":626},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":125984,"byte_end":126009,"line_start":129,"line_end":129,"column_start":12,"column_end":37},"name":"BresenhamLinePixelIterMut","qualname":"::drawing::line::BresenhamLinePixelIterMut","value":"BresenhamLinePixelIterMut {  }","parent":null,"children":[{"krate":0,"index":629},{"krate":0,"index":630}],"decl_id":null,"docs":" Iterates over the image pixels in a line segment using\n [Bresenham's line drawing algorithm](https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm).\n","sig":null,"attributes":[{"value":"/ Iterates over the image pixels in a line segment using","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":125812,"byte_end":125870,"line_start":127,"line_end":127,"column_start":1,"column_end":59}},{"value":"/ [Bresenham's line drawing algorithm](https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":125871,"byte_end":125972,"line_start":128,"line_end":128,"column_start":1,"column_end":102}}]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":126352,"byte_end":126355,"line_start":137,"line_end":137,"column_start":12,"column_end":15},"name":"new","qualname":"<BresenhamLinePixelIterMut>::new","value":"pub fn new(&mut Image<P>, (f32, f32), (f32, f32))\n-> BresenhamLinePixelIterMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`BresenhamLinePixelIterMut`](struct.BresenhamLinePixelIterMut.html) which will iterate over\n the image pixels with coordinates between `start` and `end`.\n","sig":null,"attributes":[{"value":"/ Creates a [`BresenhamLinePixelIterMut`](struct.BresenhamLinePixelIterMut.html) which will iterate over","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":126165,"byte_end":126271,"line_start":135,"line_end":135,"column_start":5,"column_end":111}},{"value":"/ the image pixels with coordinates between `start` and `end`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":126276,"byte_end":126340,"line_start":136,"line_end":136,"column_start":5,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":642},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":127614,"byte_end":127631,"line_start":170,"line_end":170,"column_start":8,"column_end":25},"name":"draw_line_segment","qualname":"::drawing::line::draw_line_segment","value":"pub fn draw_line_segment<I>(&I, (f32, f32), (f32, f32), I::Pixel)\n-> Image<I::Pixel> where I: GenericImage, I::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draws as much of the line segment between start and end as lies inside the image bounds.\n Uses [Bresenham's line drawing algorithm](https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm).\n","sig":null,"attributes":[{"value":"/ Draws as much of the line segment between start and end as lies inside the image bounds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":127407,"byte_end":127499,"line_start":168,"line_end":168,"column_start":1,"column_end":93}},{"value":"/ Uses [Bresenham's line drawing algorithm](https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":127500,"byte_end":127606,"line_start":169,"line_end":169,"column_start":1,"column_end":107}}]},{"kind":"Function","id":{"krate":0,"index":644},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":128171,"byte_end":128192,"line_start":188,"line_end":188,"column_start":8,"column_end":29},"name":"draw_line_segment_mut","qualname":"::drawing::line::draw_line_segment_mut","value":"pub fn draw_line_segment_mut<C>(&mut C, (f32, f32), (f32, f32), C::Pixel)\nwhere C: Canvas, C::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draws as much of the line segment between start and end as lies inside the image bounds.\n Uses [Bresenham's line drawing algorithm](https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm).\n","sig":null,"attributes":[{"value":"/ Draws as much of the line segment between start and end as lies inside the image bounds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":127964,"byte_end":128056,"line_start":186,"line_end":186,"column_start":1,"column_end":93}},{"value":"/ Uses [Bresenham's line drawing algorithm](https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":128057,"byte_end":128163,"line_start":187,"line_end":187,"column_start":1,"column_end":107}}]},{"kind":"Function","id":{"krate":0,"index":647},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":129039,"byte_end":129068,"line_start":212,"line_end":212,"column_start":8,"column_end":37},"name":"draw_antialiased_line_segment","qualname":"::drawing::line::draw_antialiased_line_segment","value":"pub fn draw_antialiased_line_segment<I,\n                                     B>(&I, (i32, i32), (i32, i32), I::Pixel,\n                                        B) -> Image<I::Pixel> where\nI: GenericImage, I::Pixel: 'static, B: Fn(I::Pixel, I::Pixel, f32) -> I::Pixel","parent":null,"children":[],"decl_id":null,"docs":" Draws as much of the line segment between start and end as lies inside the image bounds.\n The parameters of blend are (line color, original color, line weight).\n Consider using [`interpolate`](fn.interpolate.html) for blend.\n Uses [Xu's line drawing algorithm](https://en.wikipedia.org/wiki/Xiaolin_Wu%27s_line_algorithm).\n","sig":null,"attributes":[{"value":"/ Draws as much of the line segment between start and end as lies inside the image bounds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":128696,"byte_end":128788,"line_start":208,"line_end":208,"column_start":1,"column_end":93}},{"value":"/ The parameters of blend are (line color, original color, line weight).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":128789,"byte_end":128863,"line_start":209,"line_end":209,"column_start":1,"column_end":75}},{"value":"/ Consider using [`interpolate`](fn.interpolate.html) for blend.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":128864,"byte_end":128930,"line_start":210,"line_end":210,"column_start":1,"column_end":67}},{"value":"/ Uses [Xu's line drawing algorithm](https://en.wikipedia.org/wiki/Xiaolin_Wu%27s_line_algorithm).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":128931,"byte_end":129031,"line_start":211,"line_end":211,"column_start":1,"column_end":101}}]},{"kind":"Function","id":{"krate":0,"index":650},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":129828,"byte_end":129861,"line_start":234,"line_end":234,"column_start":8,"column_end":41},"name":"draw_antialiased_line_segment_mut","qualname":"::drawing::line::draw_antialiased_line_segment_mut","value":"pub fn draw_antialiased_line_segment_mut<I,\n                                         B>(&mut I, (i32, i32), (i32, i32),\n                                            I::Pixel, B) where\nI: GenericImage, I::Pixel: 'static, B: Fn(I::Pixel, I::Pixel, f32) -> I::Pixel","parent":null,"children":[],"decl_id":null,"docs":" Draws as much of the line segment between start and end as lies inside the image bounds.\n The parameters of blend are (line color, original color, line weight).\n Consider using [`interpolate`](fn.interpolate.html) for blend.\n Uses [Xu's line drawing algorithm](https://en.wikipedia.org/wiki/Xiaolin_Wu%27s_line_algorithm).\n","sig":null,"attributes":[{"value":"/ Draws as much of the line segment between start and end as lies inside the image bounds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":129485,"byte_end":129577,"line_start":230,"line_end":230,"column_start":1,"column_end":93}},{"value":"/ The parameters of blend are (line color, original color, line weight).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":129578,"byte_end":129652,"line_start":231,"line_end":231,"column_start":1,"column_end":75}},{"value":"/ Consider using [`interpolate`](fn.interpolate.html) for blend.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":129653,"byte_end":129719,"line_start":232,"line_end":232,"column_start":1,"column_end":67}},{"value":"/ Uses [Xu's line drawing algorithm](https://en.wikipedia.org/wiki/Xiaolin_Wu%27s_line_algorithm).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":129720,"byte_end":129820,"line_start":233,"line_end":233,"column_start":1,"column_end":101}}]},{"kind":"Function","id":{"krate":0,"index":729},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\polygon.rs","byte_start":142244,"byte_end":142256,"line_start":13,"line_end":13,"column_start":8,"column_end":20},"name":"draw_polygon","qualname":"::drawing::polygon::draw_polygon","value":"pub fn draw_polygon<I>(&I, &[Point<i32>], I::Pixel) -> Image<I::Pixel> where\nI: GenericImage, I::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draws as much of a filled polygon as lies within image bounds. The provided\n list of points should be an open path, i.e. the first and last points must not be equal.\n An implicit edge is added from the last to the first point in the slice.\n","sig":null,"attributes":[{"value":"/ Draws as much of a filled polygon as lies within image bounds. The provided","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\polygon.rs","byte_start":141987,"byte_end":142066,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"/ list of points should be an open path, i.e. the first and last points must not be equal.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\polygon.rs","byte_start":142067,"byte_end":142159,"line_start":11,"line_end":11,"column_start":1,"column_end":93}},{"value":"/ An implicit edge is added from the last to the first point in the slice.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\polygon.rs","byte_start":142160,"byte_end":142236,"line_start":12,"line_end":12,"column_start":1,"column_end":77}}]},{"kind":"Function","id":{"krate":0,"index":731},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\polygon.rs","byte_start":142801,"byte_end":142817,"line_start":27,"line_end":27,"column_start":8,"column_end":24},"name":"draw_polygon_mut","qualname":"::drawing::polygon::draw_polygon_mut","value":"pub fn draw_polygon_mut<C>(&mut C, &[Point<i32>], C::Pixel) where C: Canvas,\nC::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draws as much of a filled polygon as lies within image bounds. The provided\n list of points should be an open path, i.e. the first and last points must not be equal.\n An implicit edge is added from the last to the first point in the slice.\n","sig":null,"attributes":[{"value":"/ Draws as much of a filled polygon as lies within image bounds. The provided","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\polygon.rs","byte_start":142544,"byte_end":142623,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ list of points should be an open path, i.e. the first and last points must not be equal.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\polygon.rs","byte_start":142624,"byte_end":142716,"line_start":25,"line_end":25,"column_start":1,"column_end":93}},{"value":"/ An implicit edge is added from the last to the first point in the slice.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\polygon.rs","byte_start":142717,"byte_end":142793,"line_start":26,"line_end":26,"column_start":1,"column_end":77}}]},{"kind":"Function","id":{"krate":0,"index":764},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\rect.rs","byte_start":145694,"byte_end":145710,"line_start":9,"line_end":9,"column_start":8,"column_end":24},"name":"draw_hollow_rect","qualname":"::drawing::rect::draw_hollow_rect","value":"pub fn draw_hollow_rect<I>(&I, Rect, I::Pixel) -> Image<I::Pixel> where\nI: GenericImage, I::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draws as much of the boundary of a rectangle as lies inside the image bounds.\n","sig":null,"attributes":[{"value":"/ Draws as much of the boundary of a rectangle as lies inside the image bounds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\rect.rs","byte_start":145605,"byte_end":145686,"line_start":8,"line_end":8,"column_start":1,"column_end":82}}]},{"kind":"Function","id":{"krate":0,"index":766},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\rect.rs","byte_start":146082,"byte_end":146102,"line_start":21,"line_end":21,"column_start":8,"column_end":28},"name":"draw_hollow_rect_mut","qualname":"::drawing::rect::draw_hollow_rect_mut","value":"pub fn draw_hollow_rect_mut<C>(&mut C, Rect, C::Pixel) where C: Canvas,\nC::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draws as much of the boundary of a rectangle as lies inside the image bounds.\n","sig":null,"attributes":[{"value":"/ Draws as much of the boundary of a rectangle as lies inside the image bounds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\rect.rs","byte_start":145993,"byte_end":146074,"line_start":20,"line_end":20,"column_start":1,"column_end":82}}]},{"kind":"Function","id":{"krate":0,"index":768},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\rect.rs","byte_start":146730,"byte_end":146746,"line_start":38,"line_end":38,"column_start":8,"column_end":24},"name":"draw_filled_rect","qualname":"::drawing::rect::draw_filled_rect","value":"pub fn draw_filled_rect<I>(&I, Rect, I::Pixel) -> Image<I::Pixel> where\nI: GenericImage, I::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draw as much of a rectangle, including its boundary, as lies inside the image bounds.\n","sig":null,"attributes":[{"value":"/ Draw as much of a rectangle, including its boundary, as lies inside the image bounds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\rect.rs","byte_start":146633,"byte_end":146722,"line_start":37,"line_end":37,"column_start":1,"column_end":90}}]},{"kind":"Function","id":{"krate":0,"index":770},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\rect.rs","byte_start":147126,"byte_end":147146,"line_start":50,"line_end":50,"column_start":8,"column_end":28},"name":"draw_filled_rect_mut","qualname":"::drawing::rect::draw_filled_rect_mut","value":"pub fn draw_filled_rect_mut<C>(&mut C, Rect, C::Pixel) where C: Canvas,\nC::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draw as much of a rectangle, including its boundary, as lies inside the image bounds.\n","sig":null,"attributes":[{"value":"/ Draw as much of a rectangle, including its boundary, as lies inside the image bounds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\rect.rs","byte_start":147029,"byte_end":147118,"line_start":49,"line_end":49,"column_start":1,"column_end":90}}]},{"kind":"Function","id":{"krate":0,"index":831},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\text.rs","byte_start":150960,"byte_end":150973,"line_start":12,"line_end":12,"column_start":8,"column_end":21},"name":"draw_text_mut","qualname":"::drawing::text::draw_text_mut","value":"pub fn draw_text_mut<'a,\n                     C>(&'a mut C, C::Pixel, u32, u32, Scale, &'a Font,\n                        &'a str) where C: Canvas,\n<C::Pixel as Pixel>::Subpixel: ValueInto<f32> + Clamp<f32>","parent":null,"children":[],"decl_id":null,"docs":" Draws colored text on an image in place. `scale` is augmented font scaling on both the x and y axis (in pixels). Note that this function *does not* support newlines, you must do this manually\n","sig":null,"attributes":[{"value":"/ Draws colored text on an image in place. `scale` is augmented font scaling on both the x and y axis (in pixels). Note that this function *does not* support newlines, you must do this manually","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\text.rs","byte_start":150757,"byte_end":150952,"line_start":11,"line_end":11,"column_start":1,"column_end":196}}]},{"kind":"Function","id":{"krate":0,"index":835},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\text.rs","byte_start":152397,"byte_end":152406,"line_start":52,"line_end":52,"column_start":8,"column_end":17},"name":"draw_text","qualname":"::drawing::text::draw_text","value":"pub fn draw_text<'a,\n                 I>(&'a mut I, I::Pixel, u32, u32, Scale, &'a Font, &'a str)\n-> Image<I::Pixel> where I: GenericImage,\n<I::Pixel as Pixel>::Subpixel: ValueInto<f32> + Clamp<f32>, I::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draws colored text on an image in place. `scale` is augmented font scaling on both the x and y axis (in pixels). Note that this function *does not* support newlines, you must do this manually\n","sig":null,"attributes":[{"value":"/ Draws colored text on an image in place. `scale` is augmented font scaling on both the x and y axis (in pixels). Note that this function *does not* support newlines, you must do this manually","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\text.rs","byte_start":152194,"byte_end":152389,"line_start":51,"line_end":51,"column_start":1,"column_end":196}}]},{"kind":"Mod","id":{"krate":0,"index":847},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\edges.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"edges","qualname":"::edges","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\edges.rs","parent":null,"children":[{"krate":0,"index":848},{"krate":0,"index":849},{"krate":0,"index":852},{"krate":0,"index":855},{"krate":0,"index":858},{"krate":0,"index":859},{"krate":0,"index":862},{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":869},{"krate":0,"index":872},{"krate":0,"index":875},{"krate":0,"index":876},{"krate":0,"index":878},{"krate":0,"index":881},{"krate":0,"index":884},{"krate":0,"index":886}],"decl_id":null,"docs":" Functions for detecting edges in images.\n","sig":null,"attributes":[{"value":"/ Functions for detecting edges in images.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\edges.rs","byte_start":152860,"byte_end":152904,"line_start":1,"line_end":1,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":881},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\edges.rs","byte_start":154084,"byte_end":154089,"line_start":30,"line_end":30,"column_start":8,"column_end":13},"name":"canny","qualname":"::edges::canny","value":"pub fn canny(&GrayImage, f32, f32) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Runs the canny edge detection algorithm.","sig":null,"attributes":[{"value":"/ Runs the canny edge detection algorithm.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\edges.rs","byte_start":153124,"byte_end":153168,"line_start":9,"line_end":9,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\edges.rs","byte_start":153169,"byte_end":153172,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Returns a binary image where edge pixels have a value of 255","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\edges.rs","byte_start":153173,"byte_end":153237,"line_start":11,"line_end":11,"column_start":1,"column_end":65}},{"value":"/  and non-edge pixels a value of 0.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\edges.rs","byte_start":153238,"byte_end":153276,"line_start":12,"line_end":12,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\edges.rs","byte_start":153277,"byte_end":153280,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Params","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\edges.rs","byte_start":153281,"byte_end":153293,"line_start":14,"line_end":14,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\edges.rs","byte_start":153294,"byte_end":153297,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ - `low_threshold`: Low threshold for the hysteresis procedure.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\edges.rs","byte_start":153298,"byte_end":153364,"line_start":16,"line_end":16,"column_start":1,"column_end":67}},{"value":"/ Edges with a strength higher than the low threshold will appear","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\edges.rs","byte_start":153365,"byte_end":153432,"line_start":17,"line_end":17,"column_start":1,"column_end":68}},{"value":"/ in the output image, if there are strong edges nearby.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\edges.rs","byte_start":153433,"byte_end":153491,"line_start":18,"line_end":18,"column_start":1,"column_end":59}},{"value":"/ - `high_threshold`: High threshold for the hysteresis procedure.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\edges.rs","byte_start":153492,"byte_end":153560,"line_start":19,"line_end":19,"column_start":1,"column_end":69}},{"value":"/ Edges with a strength higher than the high threshold will always","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\edges.rs","byte_start":153561,"byte_end":153629,"line_start":20,"line_end":20,"column_start":1,"column_end":69}},{"value":"/ appear as edges in the output image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\edges.rs","byte_start":153630,"byte_end":153670,"line_start":21,"line_end":21,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\edges.rs","byte_start":153671,"byte_end":153674,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ The greatest possible edge strength (and so largest sensible threshold)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\edges.rs","byte_start":153675,"byte_end":153750,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/ is`sqrt(5) * 2 * 255`, or approximately 1140.39.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\edges.rs","byte_start":153751,"byte_end":153803,"line_start":24,"line_end":24,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\edges.rs","byte_start":153804,"byte_end":153807,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ This odd looking value is the result of using a standard","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\edges.rs","byte_start":153808,"byte_end":153868,"line_start":26,"line_end":26,"column_start":1,"column_end":61}},{"value":"/ definition of edge strength: the strength of an edge at a point `p` is","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\edges.rs","byte_start":153869,"byte_end":153943,"line_start":27,"line_end":27,"column_start":1,"column_end":75}},{"value":"/ defined to be `sqrt(dx^2 + dy^2)`, where `dx` and `dy` are the values","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\edges.rs","byte_start":153944,"byte_end":154017,"line_start":28,"line_end":28,"column_start":1,"column_end":74}},{"value":"/ of the horizontal and vertical Sobel gradients at `p`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\edges.rs","byte_start":154018,"byte_end":154076,"line_start":29,"line_end":29,"column_start":1,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":887},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"filter","qualname":"::filter","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","parent":null,"children":[{"krate":0,"index":888},{"krate":0,"index":930},{"krate":0,"index":933},{"krate":0,"index":967},{"krate":0,"index":968},{"krate":0,"index":969},{"krate":0,"index":972},{"krate":0,"index":975},{"krate":0,"index":978},{"krate":0,"index":981},{"krate":0,"index":982},{"krate":0,"index":984},{"krate":0,"index":987},{"krate":0,"index":990},{"krate":0,"index":991},{"krate":0,"index":994},{"krate":0,"index":997},{"krate":0,"index":998},{"krate":0,"index":1001},{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":1008},{"krate":0,"index":1011},{"krate":0,"index":1014},{"krate":0,"index":1017},{"krate":0,"index":1020},{"krate":0,"index":1021},{"krate":0,"index":1024},{"krate":0,"index":1027},{"krate":0,"index":1030},{"krate":0,"index":1031},{"krate":0,"index":1037},{"krate":0,"index":1045},{"krate":0,"index":1046},{"krate":0,"index":1047},{"krate":0,"index":1049},{"krate":0,"index":1052},{"krate":0,"index":1055},{"krate":0,"index":1060},{"krate":0,"index":1063},{"krate":0,"index":1066}],"decl_id":null,"docs":" Functions for filtering images.\n","sig":null,"attributes":[{"value":"/ Functions for filtering images.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":160066,"byte_end":160101,"line_start":1,"line_end":1,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":906},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":191596,"byte_end":191609,"line_start":108,"line_end":108,"column_start":8,"column_end":21},"name":"median_filter","qualname":"::filter::median::median_filter","value":"pub fn median_filter<P>(&Image<P>, u32, u32) -> Image<P> where\nP: Pixel<Subpixel = u8> + 'static","parent":null,"children":[],"decl_id":null,"docs":" Applies a median filter of given dimensions to an image. Each output pixel is the median\n of the pixels in a `(2 * x_radius + 1) * (2 * y_radius + 1)` kernel of pixels in the input image.","sig":null,"attributes":[{"value":"/ Applies a median filter of given dimensions to an image. Each output pixel is the median","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":188768,"byte_end":188860,"line_start":5,"line_end":5,"column_start":1,"column_end":93}},{"value":"/ of the pixels in a `(2 * x_radius + 1) * (2 * y_radius + 1)` kernel of pixels in the input image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":188861,"byte_end":188962,"line_start":6,"line_end":6,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":188963,"byte_end":188966,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Pads by continuity. Performs O(max(x_radius, y_radius)) operations per pixel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":188967,"byte_end":189048,"line_start":8,"line_end":8,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189049,"byte_end":189052,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189053,"byte_end":189067,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189068,"byte_end":189075,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189076,"byte_end":189101,"line_start":12,"line_end":12,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189102,"byte_end":189120,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189121,"byte_end":189150,"line_start":14,"line_end":14,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189151,"byte_end":189168,"line_start":15,"line_end":15,"column_start":1,"column_end":18}},{"value":"/ use imageproc::filter::median_filter;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189169,"byte_end":189210,"line_start":16,"line_end":16,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189211,"byte_end":189214,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189215,"byte_end":189243,"line_start":18,"line_end":18,"column_start":1,"column_end":29}},{"value":"/     1,   2,   3;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189244,"byte_end":189264,"line_start":19,"line_end":19,"column_start":1,"column_end":21}},{"value":"/   200,   6,   7;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189265,"byte_end":189285,"line_start":20,"line_end":20,"column_start":1,"column_end":21}},{"value":"/     9, 100,  11","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189286,"byte_end":189305,"line_start":21,"line_end":21,"column_start":1,"column_end":20}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189306,"byte_end":189312,"line_start":22,"line_end":22,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189313,"byte_end":189316,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ // Padding by continuity means that the values we use","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189317,"byte_end":189374,"line_start":24,"line_end":24,"column_start":1,"column_end":58}},{"value":"/ // for computing medians of boundary pixels are:","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189375,"byte_end":189427,"line_start":25,"line_end":25,"column_start":1,"column_end":53}},{"value":"/ //","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189428,"byte_end":189434,"line_start":26,"line_end":26,"column_start":1,"column_end":7}},{"value":"/ //   1     1     2     3     3","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189435,"byte_end":189469,"line_start":27,"line_end":27,"column_start":1,"column_end":35}},{"value":"/ //      -----------------","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189470,"byte_end":189499,"line_start":28,"line_end":28,"column_start":1,"column_end":30}},{"value":"/ //   1 |   1     2     3 |   3","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189500,"byte_end":189534,"line_start":29,"line_end":29,"column_start":1,"column_end":35}},{"value":"/ //","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189535,"byte_end":189541,"line_start":30,"line_end":30,"column_start":1,"column_end":7}},{"value":"/ // 200 | 200     6     7 |   7","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189542,"byte_end":189576,"line_start":31,"line_end":31,"column_start":1,"column_end":35}},{"value":"/ //","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189577,"byte_end":189583,"line_start":32,"line_end":32,"column_start":1,"column_end":7}},{"value":"/ //   9 |   9   100    11 |  11","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189584,"byte_end":189618,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"/ //      -----------------","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189619,"byte_end":189648,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"/ //   9     9   100    11    11","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189649,"byte_end":189683,"line_start":35,"line_end":35,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189684,"byte_end":189687,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ let filtered = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189688,"byte_end":189719,"line_start":37,"line_end":37,"column_start":1,"column_end":32}},{"value":"/     2,  3,  3;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189720,"byte_end":189738,"line_start":38,"line_end":38,"column_start":1,"column_end":19}},{"value":"/     9,  7,  7;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189739,"byte_end":189757,"line_start":39,"line_end":39,"column_start":1,"column_end":19}},{"value":"/     9, 11, 11","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189758,"byte_end":189775,"line_start":40,"line_end":40,"column_start":1,"column_end":18}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189776,"byte_end":189782,"line_start":41,"line_end":41,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189783,"byte_end":189786,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(median_filter(&image, 1, 1), filtered);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189787,"byte_end":189848,"line_start":43,"line_end":43,"column_start":1,"column_end":62}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189849,"byte_end":189856,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189857,"byte_end":189864,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189865,"byte_end":189868,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189869,"byte_end":189876,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189877,"byte_end":189902,"line_start":48,"line_end":48,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189903,"byte_end":189921,"line_start":49,"line_end":49,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189922,"byte_end":189951,"line_start":50,"line_end":50,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189952,"byte_end":189969,"line_start":51,"line_end":51,"column_start":1,"column_end":18}},{"value":"/ use imageproc::filter::median_filter;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":189970,"byte_end":190011,"line_start":52,"line_end":52,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190012,"byte_end":190015,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ // Image channels are handled independently.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190016,"byte_end":190064,"line_start":54,"line_end":54,"column_start":1,"column_end":49}},{"value":"/ // This example sets the red channel to have the same","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190065,"byte_end":190122,"line_start":55,"line_end":55,"column_start":1,"column_end":58}},{"value":"/ // contents as the image from the grayscale example,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190123,"byte_end":190179,"line_start":56,"line_end":56,"column_start":1,"column_end":57}},{"value":"/ // the green channel to a vertically inverted copy of that","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190180,"byte_end":190242,"line_start":57,"line_end":57,"column_start":1,"column_end":63}},{"value":"/ // image and the blue channel to be constant.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190243,"byte_end":190292,"line_start":58,"line_end":58,"column_start":1,"column_end":50}},{"value":"/ //","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190293,"byte_end":190299,"line_start":59,"line_end":59,"column_start":1,"column_end":7}},{"value":"/ // See the grayscale image example for an explanation of how","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190300,"byte_end":190364,"line_start":60,"line_end":60,"column_start":1,"column_end":65}},{"value":"/ // boundary conditions are handled.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190365,"byte_end":190404,"line_start":61,"line_end":61,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190405,"byte_end":190408,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ let image = rgb_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190409,"byte_end":190436,"line_start":63,"line_end":63,"column_start":1,"column_end":28}},{"value":"/     [  1,   9, 10], [  2, 100,  10], [  3,  11,  10];","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190437,"byte_end":190494,"line_start":64,"line_end":64,"column_start":1,"column_end":58}},{"value":"/     [200, 200, 10], [  6,   6,  10], [  7,   7,  10];","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190495,"byte_end":190552,"line_start":65,"line_end":65,"column_start":1,"column_end":58}},{"value":"/     [  9,   1, 10], [100,   2,  10], [ 11,   3,  10]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190553,"byte_end":190609,"line_start":66,"line_end":66,"column_start":1,"column_end":57}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190610,"byte_end":190616,"line_start":67,"line_end":67,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190617,"byte_end":190620,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ let filtered = rgb_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190621,"byte_end":190651,"line_start":69,"line_end":69,"column_start":1,"column_end":31}},{"value":"/     [ 2,  9, 10], [ 3, 11, 10], [ 3, 11, 10];","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190652,"byte_end":190701,"line_start":70,"line_end":70,"column_start":1,"column_end":50}},{"value":"/     [ 9,  9, 10], [ 7,  7, 10], [ 7,  7, 10];","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190702,"byte_end":190751,"line_start":71,"line_end":71,"column_start":1,"column_end":50}},{"value":"/     [ 9,  2, 10], [11,  3, 10], [11,  3, 10]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190752,"byte_end":190800,"line_start":72,"line_end":72,"column_start":1,"column_end":49}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190801,"byte_end":190807,"line_start":73,"line_end":73,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190808,"byte_end":190811,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(median_filter(&image, 1, 1), filtered);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190812,"byte_end":190873,"line_start":75,"line_end":75,"column_start":1,"column_end":62}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190874,"byte_end":190881,"line_start":76,"line_end":76,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190882,"byte_end":190889,"line_start":77,"line_end":77,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190890,"byte_end":190893,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190894,"byte_end":190901,"line_start":79,"line_end":79,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190902,"byte_end":190927,"line_start":80,"line_end":80,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190928,"byte_end":190946,"line_start":81,"line_end":81,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190947,"byte_end":190976,"line_start":82,"line_end":82,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190977,"byte_end":190994,"line_start":83,"line_end":83,"column_start":1,"column_end":18}},{"value":"/ use imageproc::filter::median_filter;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":190995,"byte_end":191036,"line_start":84,"line_end":84,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":191037,"byte_end":191040,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ // This example uses a kernel with x_radius sets to 2","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":191041,"byte_end":191098,"line_start":86,"line_end":86,"column_start":1,"column_end":58}},{"value":"/ // and y_radius sets to 1, which leads to 5 * 3 kernel size.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":191099,"byte_end":191163,"line_start":87,"line_end":87,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":191164,"byte_end":191167,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":191168,"byte_end":191196,"line_start":89,"line_end":89,"column_start":1,"column_end":29}},{"value":"/     1, 2, 3, 4, 5;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":191197,"byte_end":191219,"line_start":90,"line_end":90,"column_start":1,"column_end":23}},{"value":"/     255, 200, 4, 11, 7;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":191220,"byte_end":191247,"line_start":91,"line_end":91,"column_start":1,"column_end":28}},{"value":"/     42, 17, 3, 2, 1;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":191248,"byte_end":191272,"line_start":92,"line_end":92,"column_start":1,"column_end":25}},{"value":"/     9, 100, 11, 13, 14;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":191273,"byte_end":191300,"line_start":93,"line_end":93,"column_start":1,"column_end":28}},{"value":"/     15, 87, 99, 21, 45","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":191301,"byte_end":191327,"line_start":94,"line_end":94,"column_start":1,"column_end":27}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":191328,"byte_end":191334,"line_start":95,"line_end":95,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":191335,"byte_end":191338,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ let filtered = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":191339,"byte_end":191370,"line_start":97,"line_end":97,"column_start":1,"column_end":32}},{"value":"/     2, 3, 4, 5, 5;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":191371,"byte_end":191393,"line_start":98,"line_end":98,"column_start":1,"column_end":23}},{"value":"/     17, 4, 4, 4, 4;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":191394,"byte_end":191417,"line_start":99,"line_end":99,"column_start":1,"column_end":24}},{"value":"/     42, 13, 11, 11, 7;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":191418,"byte_end":191444,"line_start":100,"line_end":100,"column_start":1,"column_end":27}},{"value":"/     15, 15, 15, 14, 14;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":191445,"byte_end":191472,"line_start":101,"line_end":101,"column_start":1,"column_end":28}},{"value":"/     15, 15, 21, 45, 45","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":191473,"byte_end":191499,"line_start":102,"line_end":102,"column_start":1,"column_end":27}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":191500,"byte_end":191506,"line_start":103,"line_end":103,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":191507,"byte_end":191510,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(median_filter(&image, 2, 1), filtered);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":191511,"byte_end":191572,"line_start":105,"line_end":105,"column_start":1,"column_end":62}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":191573,"byte_end":191580,"line_start":106,"line_end":106,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":191581,"byte_end":191588,"line_start":107,"line_end":107,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":963},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\sharpen.rs","byte_start":201277,"byte_end":201287,"line_start":9,"line_end":9,"column_start":8,"column_end":18},"name":"sharpen3x3","qualname":"::filter::sharpen::sharpen3x3","value":"pub fn sharpen3x3(&GrayImage) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Sharpens a grayscale image by applying a 3x3 approximation to the Laplacian.\n","sig":null,"attributes":[{"value":"/ Sharpens a grayscale image by applying a 3x3 approximation to the Laplacian.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\sharpen.rs","byte_start":201189,"byte_end":201269,"line_start":8,"line_end":8,"column_start":1,"column_end":81}}]},{"kind":"Function","id":{"krate":0,"index":964},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\sharpen.rs","byte_start":201738,"byte_end":201754,"line_start":19,"line_end":19,"column_start":8,"column_end":24},"name":"sharpen_gaussian","qualname":"::filter::sharpen::sharpen_gaussian","value":"pub fn sharpen_gaussian(&GrayImage, f32, f32) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Sharpens a grayscale image using a Gaussian as a low-pass filter.","sig":null,"attributes":[{"value":"/ Sharpens a grayscale image using a Gaussian as a low-pass filter.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\sharpen.rs","byte_start":201441,"byte_end":201510,"line_start":14,"line_end":14,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\sharpen.rs","byte_start":201511,"byte_end":201514,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ * `sigma` is the standard deviation of the Gaussian filter used.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\sharpen.rs","byte_start":201515,"byte_end":201583,"line_start":16,"line_end":16,"column_start":1,"column_end":69}},{"value":"/ * `amount` controls the level of sharpening. `output = input + amount * edges`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\sharpen.rs","byte_start":201584,"byte_end":201667,"line_start":17,"line_end":17,"column_start":1,"column_end":84}}]},{"kind":"Function","id":{"krate":0,"index":1030},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":161129,"byte_end":161139,"line_start":31,"line_end":31,"column_start":8,"column_end":18},"name":"box_filter","qualname":"::filter::box_filter","value":"pub fn box_filter(&GrayImage, u32, u32) -> Image<Luma<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Convolves an 8bpp grayscale image with a kernel of width (2 * `x_radius` + 1)\n and height (2 * `y_radius` + 1) whose entries are equal and\n sum to one. i.e. each output pixel is the unweighted mean of\n a rectangular region surrounding its corresponding input pixel.\n We handle locations where the kernel would extend past the image's\n boundary by treating the image as if its boundary pixels were\n repeated indefinitely.\n","sig":null,"attributes":[{"value":"/ Convolves an 8bpp grayscale image with a kernel of width (2 * `x_radius` + 1)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":160536,"byte_end":160617,"line_start":21,"line_end":21,"column_start":1,"column_end":82}},{"value":"/ and height (2 * `y_radius` + 1) whose entries are equal and","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":160618,"byte_end":160681,"line_start":22,"line_end":22,"column_start":1,"column_end":64}},{"value":"/ sum to one. i.e. each output pixel is the unweighted mean of","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":160682,"byte_end":160746,"line_start":23,"line_end":23,"column_start":1,"column_end":65}},{"value":"/ a rectangular region surrounding its corresponding input pixel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":160747,"byte_end":160814,"line_start":24,"line_end":24,"column_start":1,"column_end":68}},{"value":"/ We handle locations where the kernel would extend past the image's","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":160815,"byte_end":160885,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"/ boundary by treating the image as if its boundary pixels were","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":160886,"byte_end":160951,"line_start":26,"line_end":26,"column_start":1,"column_end":66}},{"value":"/ repeated indefinitely.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":160952,"byte_end":160978,"line_start":27,"line_end":27,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":1031},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":162891,"byte_end":162897,"line_start":81,"line_end":81,"column_start":12,"column_end":18},"name":"Kernel","qualname":"::filter::Kernel","value":"Kernel {  }","parent":null,"children":[{"krate":0,"index":1034},{"krate":0,"index":1035},{"krate":0,"index":1036}],"decl_id":null,"docs":" A 2D kernel, used to filter images via convolution.\n","sig":null,"attributes":[{"value":"/ A 2D kernel, used to filter images via convolution.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":162824,"byte_end":162879,"line_start":80,"line_end":80,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1040},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":163124,"byte_end":163127,"line_start":90,"line_end":90,"column_start":12,"column_end":15},"name":"new","qualname":"<Kernel>::new","value":"pub fn new(&'a [K], u32, u32) -> Kernel","parent":null,"children":[],"decl_id":null,"docs":" Construct a kernel from a slice and its dimensions. The input slice is\n in row-major form.\n","sig":null,"attributes":[{"value":"/ Construct a kernel from a slice and its dimensions. The input slice is","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":163011,"byte_end":163085,"line_start":88,"line_end":88,"column_start":5,"column_end":79}},{"value":"/ in row-major form.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":163090,"byte_end":163112,"line_start":89,"line_end":89,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1041},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":163768,"byte_end":163774,"line_start":109,"line_end":109,"column_start":12,"column_end":18},"name":"filter","qualname":"<Kernel>::filter","value":"pub fn filter<P, F, Q>(&Self, &Image<P>, F) -> Image<Q> where P: Pixel +\n'static, <P as Pixel>::Subpixel: ValueInto<K>, Q: Pixel + 'static,\nF: FnMut(&mut Q::Subpixel, K) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Returns 2d correlation of an image. Intermediate calculations are performed\n at type K, and the results converted to pixel Q via f. Pads by continuity.\n","sig":null,"attributes":[{"value":"/ Returns 2d correlation of an image. Intermediate calculations are performed","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":163594,"byte_end":163673,"line_start":107,"line_end":107,"column_start":5,"column_end":84}},{"value":"/ at type K, and the results converted to pixel Q via f. Pads by continuity.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":163678,"byte_end":163756,"line_start":108,"line_end":108,"column_start":5,"column_end":83}}]},{"kind":"Function","id":{"krate":0,"index":1047},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":166201,"byte_end":166218,"line_start":175,"line_end":175,"column_start":8,"column_end":25},"name":"gaussian_blur_f32","qualname":"::filter::gaussian_blur_f32","value":"pub fn gaussian_blur_f32<P>(&Image<P>, f32) -> Image<P> where P: Pixel +\n'static, <P as Pixel>::Subpixel: ValueInto<f32> + Clamp<f32>","parent":null,"children":[],"decl_id":null,"docs":" Blurs an image using a Gaussian of standard deviation sigma.\n The kernel used has type f32 and all intermediate calculations are performed\n at this type.","sig":null,"attributes":[{"value":"/ Blurs an image using a Gaussian of standard deviation sigma.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":165909,"byte_end":165973,"line_start":167,"line_end":167,"column_start":1,"column_end":65}},{"value":"/ The kernel used has type f32 and all intermediate calculations are performed","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":165974,"byte_end":166054,"line_start":168,"line_end":168,"column_start":1,"column_end":81}},{"value":"/ at this type.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":166055,"byte_end":166072,"line_start":169,"line_end":169,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":166073,"byte_end":166076,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":166077,"byte_end":166089,"line_start":171,"line_end":171,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":166090,"byte_end":166093,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ Panics if `sigma <= 0.0`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":166094,"byte_end":166123,"line_start":173,"line_end":173,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":1049},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":166607,"byte_end":166623,"line_start":187,"line_end":187,"column_start":8,"column_end":24},"name":"separable_filter","qualname":"::filter::separable_filter","value":"pub fn separable_filter<P, K>(&Image<P>, &[K], &[K]) -> Image<P> where\nP: Pixel + 'static, <P as Pixel>::Subpixel: ValueInto<K> + Clamp<K>, K: Num +\nCopy","parent":null,"children":[],"decl_id":null,"docs":" Returns 2d correlation of view with the outer product of the 1d\n kernels `h_kernel` and `v_kernel`.\n","sig":null,"attributes":[{"value":"/ Returns 2d correlation of view with the outer product of the 1d","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":166493,"byte_end":166560,"line_start":185,"line_end":185,"column_start":1,"column_end":68}},{"value":"/ kernels `h_kernel` and `v_kernel`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":166561,"byte_end":166599,"line_start":186,"line_end":186,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":1052},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":166991,"byte_end":167013,"line_start":199,"line_end":199,"column_start":8,"column_end":30},"name":"separable_filter_equal","qualname":"::filter::separable_filter_equal","value":"pub fn separable_filter_equal<P, K>(&Image<P>, &[K]) -> Image<P> where\nP: Pixel + 'static, <P as Pixel>::Subpixel: ValueInto<K> + Clamp<K>, K: Num +\nCopy","parent":null,"children":[],"decl_id":null,"docs":" Returns 2d correlation of an image with the outer product of the 1d\n kernel filter with itself.\n","sig":null,"attributes":[{"value":"/ Returns 2d correlation of an image with the outer product of the 1d","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":166881,"byte_end":166952,"line_start":197,"line_end":197,"column_start":1,"column_end":72}},{"value":"/ kernel filter with itself.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":166953,"byte_end":166983,"line_start":198,"line_end":198,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":1055},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":167409,"byte_end":167418,"line_start":210,"line_end":210,"column_start":8,"column_end":17},"name":"filter3x3","qualname":"::filter::filter3x3","value":"pub fn filter3x3<P, K, S>(&Image<P>, &[K]) -> Image<ChannelMap<P, S>> where\nP::Subpixel: ValueInto<K>, S: Clamp<K> + Primitive + 'static,\nP: WithChannel<S> + 'static, K: Num + Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns 2d correlation of an image with a 3x3 row-major kernel. Intermediate calculations are\n performed at type K, and the results clamped to subpixel type S. Pads by continuity.\n","sig":null,"attributes":[{"value":"/ Returns 2d correlation of an image with a 3x3 row-major kernel. Intermediate calculations are","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":167215,"byte_end":167312,"line_start":208,"line_end":208,"column_start":1,"column_end":98}},{"value":"/ performed at type K, and the results clamped to subpixel type S. Pads by continuity.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":167313,"byte_end":167401,"line_start":209,"line_end":209,"column_start":1,"column_end":89}}]},{"kind":"Function","id":{"krate":0,"index":1060},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":167886,"byte_end":167903,"line_start":224,"line_end":224,"column_start":8,"column_end":25},"name":"horizontal_filter","qualname":"::filter::horizontal_filter","value":"pub fn horizontal_filter<P, K>(&Image<P>, &[K]) -> Image<P> where P: Pixel +\n'static, <P as Pixel>::Subpixel: ValueInto<K> + Clamp<K>, K: Num + Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns horizontal correlations between an image and a 1d kernel.\n Pads by continuity. Intermediate calculations are performed at\n type K.\n","sig":null,"attributes":[{"value":"/ Returns horizontal correlations between an image and a 1d kernel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":167730,"byte_end":167799,"line_start":221,"line_end":221,"column_start":1,"column_end":70}},{"value":"/ Pads by continuity. Intermediate calculations are performed at","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":167800,"byte_end":167866,"line_start":222,"line_end":222,"column_start":1,"column_end":67}},{"value":"/ type K.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":167867,"byte_end":167878,"line_start":223,"line_end":223,"column_start":1,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":1063},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":171558,"byte_end":171573,"line_start":319,"line_end":319,"column_start":8,"column_end":23},"name":"vertical_filter","qualname":"::filter::vertical_filter","value":"pub fn vertical_filter<P, K>(&Image<P>, &[K]) -> Image<P> where P: Pixel +\n'static, <P as Pixel>::Subpixel: ValueInto<K> + Clamp<K>, K: Num + Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns horizontal correlations between an image and a 1d kernel.\n Pads by continuity.\n","sig":null,"attributes":[{"value":"/ Returns horizontal correlations between an image and a 1d kernel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":171457,"byte_end":171526,"line_start":317,"line_end":317,"column_start":1,"column_end":70}},{"value":"/ Pads by continuity.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":171527,"byte_end":171550,"line_start":318,"line_end":318,"column_start":1,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":1069},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"geometric_transformations","qualname":"::geometric_transformations","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","parent":null,"children":[{"krate":0,"index":1070},{"krate":0,"index":1071},{"krate":0,"index":1074},{"krate":0,"index":1077},{"krate":0,"index":1080},{"krate":0,"index":1083},{"krate":0,"index":1084},{"krate":0,"index":1087},{"krate":0,"index":1090},{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1095},{"krate":0,"index":1098},{"krate":0,"index":2286},{"krate":0,"index":2293},{"krate":0,"index":2294},{"krate":0,"index":2296},{"krate":0,"index":2298},{"krate":0,"index":2304},{"krate":0,"index":2305},{"krate":0,"index":2309},{"krate":0,"index":1101},{"krate":0,"index":1114},{"krate":0,"index":1120},{"krate":0,"index":1125},{"krate":0,"index":1128},{"krate":0,"index":1133},{"krate":0,"index":1135},{"krate":0,"index":1137},{"krate":0,"index":1139},{"krate":0,"index":1141},{"krate":0,"index":1155},{"krate":0,"index":1158},{"krate":0,"index":1167},{"krate":0,"index":1172},{"krate":0,"index":1174},{"krate":0,"index":1177},{"krate":0,"index":1180},{"krate":0,"index":1184},{"krate":0,"index":1186},{"krate":0,"index":1189},{"krate":0,"index":1194},{"krate":0,"index":1196},{"krate":0,"index":2314},{"krate":0,"index":2321},{"krate":0,"index":2323},{"krate":0,"index":2324},{"krate":0,"index":2326},{"krate":0,"index":2327},{"krate":0,"index":2329},{"krate":0,"index":2330}],"decl_id":null,"docs":" Geometric transformations of images. This includes rotations, translation, and general\n projective transformations.\n","sig":null,"attributes":[{"value":"/ Geometric transformations of images. This includes rotations, translation, and general","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":202087,"byte_end":202177,"line_start":1,"line_end":1,"column_start":1,"column_end":91}},{"value":"/ projective transformations.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":202178,"byte_end":202209,"line_start":2,"line_end":2,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":2298},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":203185,"byte_end":203195,"line_start":38,"line_end":38,"column_start":12,"column_end":22},"name":"Projection","qualname":"::geometric_transformations::Projection","value":"Projection {  }","parent":null,"children":[{"krate":0,"index":2299},{"krate":0,"index":2301},{"krate":0,"index":2303}],"decl_id":null,"docs":" A 2d projective transformation, stored as a row major 3x3 matrix.","sig":null,"attributes":[{"value":"/ A 2d projective transformation, stored as a row major 3x3 matrix.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":202527,"byte_end":202596,"line_start":19,"line_end":19,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":202597,"byte_end":202600,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Transformations combine by pre-multiplication, i.e. applying `P * Q` is equivalent to","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":202601,"byte_end":202690,"line_start":21,"line_end":21,"column_start":1,"column_end":90}},{"value":"/ applying `Q` and then applying `P`. For example, the following defines a rotation","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":202691,"byte_end":202776,"line_start":22,"line_end":22,"column_start":1,"column_end":86}},{"value":"/ about the point (320.0, 240.0).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":202777,"byte_end":202812,"line_start":23,"line_end":23,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":202813,"byte_end":202816,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":202817,"byte_end":202824,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/ use imageproc::geometric_transformations::*;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":202825,"byte_end":202873,"line_start":26,"line_end":26,"column_start":1,"column_end":49}},{"value":"/ use std::f32::consts::PI;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":202874,"byte_end":202903,"line_start":27,"line_end":27,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":202904,"byte_end":202907,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ let (cx, cy) = (320.0, 240.0);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":202908,"byte_end":202942,"line_start":29,"line_end":29,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":202943,"byte_end":202946,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let c_rotation = Projection::translate(cx, cy)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":202947,"byte_end":202997,"line_start":31,"line_end":31,"column_start":1,"column_end":51}},{"value":"/     * Projection::rotate(PI / 6.0)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":202998,"byte_end":203036,"line_start":32,"line_end":32,"column_start":1,"column_end":39}},{"value":"/     * Projection::translate(-cx, -cy);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":203037,"byte_end":203079,"line_start":33,"line_end":33,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":203080,"byte_end":203087,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":203088,"byte_end":203091,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ See ./examples/projection.rs for more examples.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":203092,"byte_end":203143,"line_start":36,"line_end":36,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1102},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":203472,"byte_end":203483,"line_start":48,"line_end":48,"column_start":12,"column_end":23},"name":"from_matrix","qualname":"<Projection>::from_matrix","value":"pub fn from_matrix([f32; ]) -> Option<Projection>","parent":null,"children":[],"decl_id":null,"docs":" Creates a 2d projective transform from a row-major 3x3 matrix in homogeneous coordinates.","sig":null,"attributes":[{"value":"/ Creates a 2d projective transform from a row-major 3x3 matrix in homogeneous coordinates.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":203303,"byte_end":203396,"line_start":45,"line_end":45,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":203401,"byte_end":203404,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the matrix is not invertible.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":203409,"byte_end":203460,"line_start":47,"line_end":47,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2311},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":203832,"byte_end":203841,"line_start":60,"line_end":60,"column_start":12,"column_end":21},"name":"translate","qualname":"<Projection>::translate","value":"pub fn translate(f32, f32) -> Projection","parent":null,"children":[],"decl_id":null,"docs":" A translation by (tx, ty).\n","sig":null,"attributes":[{"value":"/ A translation by (tx, ty).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":203769,"byte_end":203799,"line_start":58,"line_end":58,"column_start":5,"column_end":35}},{"value":"rustfmt::skip","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":203804,"byte_end":203820,"line_start":59,"line_end":59,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":2312},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":204346,"byte_end":204352,"line_start":78,"line_end":78,"column_start":12,"column_end":18},"name":"rotate","qualname":"<Projection>::rotate","value":"pub fn rotate(f32) -> Projection","parent":null,"children":[],"decl_id":null,"docs":" A clockwise rotation around the top-left corner of the image by theta radians.\n","sig":null,"attributes":[{"value":"/ A clockwise rotation around the top-left corner of the image by theta radians.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":204231,"byte_end":204313,"line_start":76,"line_end":76,"column_start":5,"column_end":87}},{"value":"rustfmt::skip","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":204318,"byte_end":204334,"line_start":77,"line_end":77,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":2313},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":205023,"byte_end":205028,"line_start":100,"line_end":100,"column_start":12,"column_end":17},"name":"scale","qualname":"<Projection>::scale","value":"pub fn scale(f32, f32) -> Projection","parent":null,"children":[],"decl_id":null,"docs":" An anisotropic scaling (sx, sy).","sig":null,"attributes":[{"value":"/ An anisotropic scaling (sx, sy).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":204771,"byte_end":204807,"line_start":95,"line_end":95,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":204812,"byte_end":204815,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ Note that the `warp` function does not change the size of the input image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":204820,"byte_end":204898,"line_start":97,"line_end":97,"column_start":5,"column_end":83}},{"value":"/ If you want to resize an image then use the `imageops` module in the `image` crate.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":204903,"byte_end":204990,"line_start":98,"line_end":98,"column_start":5,"column_end":92}},{"value":"rustfmt::skip","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":204995,"byte_end":205011,"line_start":99,"line_end":99,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1105},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":205488,"byte_end":205494,"line_start":117,"line_end":117,"column_start":12,"column_end":18},"name":"invert","qualname":"<Projection>::invert","value":"pub fn invert(Self) -> Projection","parent":null,"children":[],"decl_id":null,"docs":" Inverts the transformation.\n","sig":null,"attributes":[{"value":"/ Inverts the transformation.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":205445,"byte_end":205476,"line_start":116,"line_end":116,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1106},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":205743,"byte_end":205762,"line_start":126,"line_end":126,"column_start":12,"column_end":31},"name":"from_control_points","qualname":"<Projection>::from_control_points","value":"pub fn from_control_points([(f32, f32); ], [(f32, f32); ])\n-> Option<Projection>","parent":null,"children":[],"decl_id":null,"docs":" Calculates a projection from a set of four control point pairs.\n","sig":null,"attributes":[{"value":"/ Calculates a projection from a set of four control point pairs.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":205664,"byte_end":205731,"line_start":125,"line_end":125,"column_start":5,"column_end":72}}]},{"kind":"Function","id":{"krate":0,"index":1133},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":210682,"byte_end":210701,"line_start":282,"line_end":282,"column_start":8,"column_end":27},"name":"rotate_about_center","qualname":"::geometric_transformations::rotate_about_center","value":"pub fn rotate_about_center<P>(&Image<P>, f32, Interpolation, P) -> Image<P>\nwhere P: Pixel + Send + Sync + 'static, <P as Pixel>::Subpixel: Send + Sync,\n<P as Pixel>::Subpixel: ValueInto<f32> + Clamp<f32>","parent":null,"children":[],"decl_id":null,"docs":" Rotates an image clockwise about its center.\n The output image has the same dimensions as the input. Output pixels\n whose pre-image lies outside the input image are set to `default`.\n","sig":null,"attributes":[{"value":"/ Rotates an image clockwise about its center.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":210482,"byte_end":210530,"line_start":279,"line_end":279,"column_start":1,"column_end":49}},{"value":"/ The output image has the same dimensions as the input. Output pixels","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":210531,"byte_end":210603,"line_start":280,"line_end":280,"column_start":1,"column_end":73}},{"value":"/ whose pre-image lies outside the input image are set to `default`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":210604,"byte_end":210674,"line_start":281,"line_end":281,"column_start":1,"column_end":71}}]},{"kind":"Function","id":{"krate":0,"index":1135},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":211348,"byte_end":211354,"line_start":306,"line_end":306,"column_start":8,"column_end":14},"name":"rotate","qualname":"::geometric_transformations::rotate","value":"pub fn rotate<P>(&Image<P>, (f32, f32), f32, Interpolation, P) -> Image<P>\nwhere P: Pixel + Send + Sync + 'static, <P as Pixel>::Subpixel: Send + Sync,\n<P as Pixel>::Subpixel: ValueInto<f32> + Clamp<f32>","parent":null,"children":[],"decl_id":null,"docs":" Rotates an image clockwise about the provided center by theta radians.\n The output image has the same dimensions as the input. Output pixels\n whose pre-image lies outside the input image are set to `default`.\n","sig":null,"attributes":[{"value":"/ Rotates an image clockwise about the provided center by theta radians.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":211122,"byte_end":211196,"line_start":303,"line_end":303,"column_start":1,"column_end":75}},{"value":"/ The output image has the same dimensions as the input. Output pixels","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":211197,"byte_end":211269,"line_start":304,"line_end":304,"column_start":1,"column_end":73}},{"value":"/ whose pre-image lies outside the input image are set to `default`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":211270,"byte_end":211340,"line_start":305,"line_end":305,"column_start":1,"column_end":71}}]},{"kind":"Function","id":{"krate":0,"index":1137},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":212217,"byte_end":212226,"line_start":329,"line_end":329,"column_start":8,"column_end":17},"name":"translate","qualname":"::geometric_transformations::translate","value":"pub fn translate<P>(&Image<P>, (i32, i32)) -> Image<P> where P: Pixel +\n'static","parent":null,"children":[],"decl_id":null,"docs":" Translates the input image by t. Note that image coordinates increase from\n top left to bottom right. Output pixels whose pre-image are not in the input\n image are set to the boundary pixel in the input image nearest to their pre-image.\n","sig":null,"attributes":[{"value":"/ Translates the input image by t. Note that image coordinates increase from","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":211834,"byte_end":211912,"line_start":324,"line_end":324,"column_start":1,"column_end":79}},{"value":"/ top left to bottom right. Output pixels whose pre-image are not in the input","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":211913,"byte_end":211993,"line_start":325,"line_end":325,"column_start":1,"column_end":81}},{"value":"/ image are set to the boundary pixel in the input image nearest to their pre-image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":211994,"byte_end":212080,"line_start":326,"line_end":326,"column_start":1,"column_end":87}}]},{"kind":"Function","id":{"krate":0,"index":1139},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":214091,"byte_end":214095,"line_start":379,"line_end":379,"column_start":8,"column_end":12},"name":"warp","qualname":"::geometric_transformations::warp","value":"pub fn warp<P>(&Image<P>, &Projection, Interpolation, P) -> Image<P> where\nP: Pixel + Send + Sync + 'static, <P as Pixel>::Subpixel: Send + Sync,\n<P as Pixel>::Subpixel: ValueInto<f32> + Clamp<f32>","parent":null,"children":[],"decl_id":null,"docs":" Applies a projective transformation to an image.","sig":null,"attributes":[{"value":"/ Applies a projective transformation to an image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":213742,"byte_end":213794,"line_start":372,"line_end":372,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":213795,"byte_end":213798,"line_start":373,"line_end":373,"column_start":1,"column_end":4}},{"value":"/ The returned image has the same dimensions as `image`. Output pixels","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":213799,"byte_end":213871,"line_start":374,"line_end":374,"column_start":1,"column_end":73}},{"value":"/ whose pre-image lies outside the input image are set to `default`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":213872,"byte_end":213942,"line_start":375,"line_end":375,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":213943,"byte_end":213946,"line_start":376,"line_end":376,"column_start":1,"column_end":4}},{"value":"/ The provided projection defines a mapping from locations in the input image to their","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":213947,"byte_end":214035,"line_start":377,"line_end":377,"column_start":1,"column_end":89}},{"value":"/ corresponding location in the output image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":214036,"byte_end":214083,"line_start":378,"line_end":378,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":1141},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":214700,"byte_end":214709,"line_start":399,"line_end":399,"column_start":8,"column_end":17},"name":"warp_into","qualname":"::geometric_transformations::warp_into","value":"pub fn warp_into<P>(&Image<P>, &Projection, Interpolation, P, &mut Image<P>)\nwhere P: Pixel + Send + Sync + 'static, <P as Pixel>::Subpixel: Send + Sync,\n<P as Pixel>::Subpixel: ValueInto<f32> + Clamp<f32> + Sync","parent":null,"children":[],"decl_id":null,"docs":" Applies a projective transformation to an image, writing to a provided output.","sig":null,"attributes":[{"value":"/ Applies a projective transformation to an image, writing to a provided output.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":214535,"byte_end":214617,"line_start":396,"line_end":396,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":214618,"byte_end":214621,"line_start":397,"line_end":397,"column_start":1,"column_end":4}},{"value":"/ See the [`warp`](fn.warp.html) documentation for more information.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":214622,"byte_end":214692,"line_start":398,"line_end":398,"column_start":1,"column_end":71}}]},{"kind":"Function","id":{"krate":0,"index":1155},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":216564,"byte_end":216573,"line_start":450,"line_end":450,"column_start":8,"column_end":17},"name":"warp_with","qualname":"::geometric_transformations::warp_with","value":"pub fn warp_with<P, F>(&Image<P>, F, Interpolation, P) -> Image<P> where\nF: Fn(f32, f32) -> (f32, f32) + Sync + Send, P: Pixel + Send + Sync + 'static,\n<P as Pixel>::Subpixel: Send + Sync, <P as Pixel>::Subpixel: ValueInto<f32> +\nClamp<f32>","parent":null,"children":[],"decl_id":null,"docs":" Warps an image using the provided function to define the pre-image of each output pixel.","sig":null,"attributes":[{"value":"/ Warps an image using the provided function to define the pre-image of each output pixel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":216078,"byte_end":216170,"line_start":433,"line_end":433,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":216171,"byte_end":216174,"line_start":434,"line_end":434,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":216175,"byte_end":216189,"line_start":435,"line_end":435,"column_start":1,"column_end":15}},{"value":"/ Applying a wave pattern.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":216190,"byte_end":216218,"line_start":436,"line_end":436,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":216219,"byte_end":216226,"line_start":437,"line_end":437,"column_start":1,"column_end":8}},{"value":"/ use image::{ImageBuffer, Luma};","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":216227,"byte_end":216262,"line_start":438,"line_end":438,"column_start":1,"column_end":36}},{"value":"/ use imageproc::utils::gray_bench_image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":216263,"byte_end":216306,"line_start":439,"line_end":439,"column_start":1,"column_end":44}},{"value":"/ use imageproc::geometric_transformations::*;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":216307,"byte_end":216355,"line_start":440,"line_end":440,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":216356,"byte_end":216359,"line_start":441,"line_end":441,"column_start":1,"column_end":4}},{"value":"/ let image = gray_bench_image(300, 300);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":216360,"byte_end":216403,"line_start":442,"line_end":442,"column_start":1,"column_end":44}},{"value":"/ let warped = warp_with(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":216404,"byte_end":216431,"line_start":443,"line_end":443,"column_start":1,"column_end":28}},{"value":"/     &image,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":216432,"byte_end":216447,"line_start":444,"line_end":444,"column_start":1,"column_end":16}},{"value":"/     |x, y| (x, y + (x / 30.0).sin()),","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":216448,"byte_end":216489,"line_start":445,"line_end":445,"column_start":1,"column_end":42}},{"value":"/     Interpolation::Nearest,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":216490,"byte_end":216521,"line_start":446,"line_end":446,"column_start":1,"column_end":32}},{"value":"/     Luma([0u8])","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":216522,"byte_end":216541,"line_start":447,"line_end":447,"column_start":1,"column_end":20}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":216542,"byte_end":216548,"line_start":448,"line_end":448,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":216549,"byte_end":216556,"line_start":449,"line_end":449,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1158},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":217279,"byte_end":217293,"line_start":472,"line_end":472,"column_start":8,"column_end":22},"name":"warp_into_with","qualname":"::geometric_transformations::warp_into_with","value":"pub fn warp_into_with<P, F>(&Image<P>, F, Interpolation, P, &mut Image<P>)\nwhere F: Fn(f32, f32) -> (f32, f32) + Send + Sync, P: Pixel + Send + Sync +\n'static, <P as Pixel>::Subpixel: Send + Sync,\n<P as Pixel>::Subpixel: ValueInto<f32> + Clamp<f32>","parent":null,"children":[],"decl_id":null,"docs":" Warps an image using the provided function to define the pre-image of each output pixel,\n writing into a preallocated output.","sig":null,"attributes":[{"value":"/ Warps an image using the provided function to define the pre-image of each output pixel,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":217054,"byte_end":217146,"line_start":468,"line_end":468,"column_start":1,"column_end":93}},{"value":"/ writing into a preallocated output.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":217147,"byte_end":217186,"line_start":469,"line_end":469,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":217187,"byte_end":217190,"line_start":470,"line_end":470,"column_start":1,"column_end":4}},{"value":"/ See the [`warp_with`](fn.warp_with.html) documentation for more information.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":217191,"byte_end":217271,"line_start":471,"line_end":471,"column_start":1,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2315},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":225198,"byte_end":225205,"line_start":731,"line_end":731,"column_start":5,"column_end":12},"name":"Nearest","qualname":"::geometric_transformations::Interpolation::Nearest","value":"Interpolation::Nearest","parent":{"krate":0,"index":2314},"children":[],"decl_id":null,"docs":" Choose the nearest pixel to the pre-image of the\n output pixel.\n","sig":null,"attributes":[{"value":"/ Choose the nearest pixel to the pre-image of the","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":225119,"byte_end":225171,"line_start":729,"line_end":729,"column_start":5,"column_end":57}},{"value":"/ output pixel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":225176,"byte_end":225193,"line_start":730,"line_end":730,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2317},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":225320,"byte_end":225328,"line_start":734,"line_end":734,"column_start":5,"column_end":13},"name":"Bilinear","qualname":"::geometric_transformations::Interpolation::Bilinear","value":"Interpolation::Bilinear","parent":{"krate":0,"index":2314},"children":[],"decl_id":null,"docs":" Bilinearly interpolate between the four pixels\n closest to the pre-image of the output pixel.\n","sig":null,"attributes":[{"value":"/ Bilinearly interpolate between the four pixels","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":225211,"byte_end":225261,"line_start":732,"line_end":732,"column_start":5,"column_end":55}},{"value":"/ closest to the pre-image of the output pixel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":225266,"byte_end":225315,"line_start":733,"line_end":733,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2319},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":225442,"byte_end":225449,"line_start":737,"line_end":737,"column_start":5,"column_end":12},"name":"Bicubic","qualname":"::geometric_transformations::Interpolation::Bicubic","value":"Interpolation::Bicubic","parent":{"krate":0,"index":2314},"children":[],"decl_id":null,"docs":" Bicubicly interpolate between the four pixels\n closest to the pre-image of the output pixel.\n","sig":null,"attributes":[{"value":"/ Bicubicly interpolate between the four pixels","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":225334,"byte_end":225383,"line_start":735,"line_end":735,"column_start":5,"column_end":54}},{"value":"/ closest to the pre-image of the output pixel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":225388,"byte_end":225437,"line_start":736,"line_end":736,"column_start":5,"column_end":54}}]},{"kind":"Enum","id":{"krate":0,"index":2314},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":225099,"byte_end":225112,"line_start":728,"line_end":728,"column_start":10,"column_end":23},"name":"Interpolation","qualname":"::geometric_transformations::Interpolation","value":"pub enum Interpolation { Nearest, Bilinear, Bicubic, }","parent":null,"children":[{"krate":0,"index":2315},{"krate":0,"index":2317},{"krate":0,"index":2319}],"decl_id":null,"docs":" How to handle pixels whose pre-image lies between input pixels.\n","sig":null,"attributes":[{"value":"/ How to handle pixels whose pre-image lies between input pixels.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":224977,"byte_end":225044,"line_start":726,"line_end":726,"column_start":1,"column_end":68}}]},{"kind":"Mod","id":{"krate":0,"index":1198},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometry.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"geometry","qualname":"::geometry","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometry.rs","parent":null,"children":[{"krate":0,"index":1199},{"krate":0,"index":1200},{"krate":0,"index":1203},{"krate":0,"index":1206},{"krate":0,"index":1209},{"krate":0,"index":1212},{"krate":0,"index":1213},{"krate":0,"index":1214},{"krate":0,"index":1216},{"krate":0,"index":1219},{"krate":0,"index":1220},{"krate":0,"index":1221},{"krate":0,"index":1223},{"krate":0,"index":1226},{"krate":0,"index":1227},{"krate":0,"index":1230},{"krate":0,"index":1233},{"krate":0,"index":1236},{"krate":0,"index":1238},{"krate":0,"index":1242},{"krate":0,"index":1249},{"krate":0,"index":2332},{"krate":0,"index":2339},{"krate":0,"index":2341},{"krate":0,"index":2342},{"krate":0,"index":2344},{"krate":0,"index":2345},{"krate":0,"index":2347},{"krate":0,"index":2348},{"krate":0,"index":1252}],"decl_id":null,"docs":" Computational geometry functions, for example finding convex hulls.\n","sig":null,"attributes":[{"value":"/ Computational geometry functions, for example finding convex hulls.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometry.rs","byte_start":237707,"byte_end":237778,"line_start":1,"line_end":1,"column_start":1,"column_end":72}}]},{"kind":"Function","id":{"krate":0,"index":1233},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometry.rs","byte_start":238088,"byte_end":238098,"line_start":10,"line_end":10,"column_start":8,"column_end":18},"name":"arc_length","qualname":"::geometry::arc_length","value":"pub fn arc_length<T>(&[Point<T>], bool) -> f64 where T: NumCast + Copy","parent":null,"children":[],"decl_id":null,"docs":" Computes the length of an arc. If `closed` is set to `true` then the distance\n between the last and the first point is included in the total length.\n","sig":null,"attributes":[{"value":"/ Computes the length of an arc. If `closed` is set to `true` then the distance","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometry.rs","byte_start":237925,"byte_end":238006,"line_start":8,"line_end":8,"column_start":1,"column_end":82}},{"value":"/ between the last and the first point is included in the total length.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometry.rs","byte_start":238007,"byte_end":238080,"line_start":9,"line_end":9,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":1236},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometry.rs","byte_start":238538,"byte_end":238560,"line_start":26,"line_end":26,"column_start":8,"column_end":30},"name":"approximate_polygon_dp","qualname":"::geometry::approximate_polygon_dp","value":"pub fn approximate_polygon_dp<T>(&[Point<T>], f64, bool) -> Vec<Point<T>>\nwhere T: NumCast + Copy","parent":null,"children":[],"decl_id":null,"docs":" Approximates a polygon using the [Douglas–Peucker algorithm].","sig":null,"attributes":[{"value":"/ Approximates a polygon using the [Douglas–Peucker algorithm].","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometry.rs","byte_start":238362,"byte_end":238429,"line_start":23,"line_end":23,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometry.rs","byte_start":238430,"byte_end":238433,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [Douglas–Peucker algorithm]: https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometry.rs","byte_start":238434,"byte_end":238530,"line_start":25,"line_end":25,"column_start":1,"column_end":95}}]},{"kind":"Function","id":{"krate":0,"index":1238},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometry.rs","byte_start":239954,"byte_end":239967,"line_start":74,"line_end":74,"column_start":8,"column_end":21},"name":"min_area_rect","qualname":"::geometry::min_area_rect","value":"pub fn min_area_rect<T>(&[Point<T>]) -> [Point<T>; ] where T: NumCast + Copy +\nOrd","parent":null,"children":[],"decl_id":null,"docs":" Finds the rectangle of least area that includes all input points. This rectangle need not be axis-aligned.","sig":null,"attributes":[{"value":"/ Finds the rectangle of least area that includes all input points. This rectangle need not be axis-aligned.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometry.rs","byte_start":239725,"byte_end":239835,"line_start":71,"line_end":71,"column_start":1,"column_end":111}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometry.rs","byte_start":239836,"byte_end":239839,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ The returned points are the [top left, top right, bottom right, bottom left] points of this rectangle.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometry.rs","byte_start":239840,"byte_end":239946,"line_start":73,"line_end":73,"column_start":1,"column_end":107}}]},{"kind":"Function","id":{"krate":0,"index":1249},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometry.rs","byte_start":242853,"byte_end":242864,"line_start":164,"line_end":164,"column_start":8,"column_end":19},"name":"convex_hull","qualname":"::geometry::convex_hull","value":"pub fn convex_hull<T>(&[Point<T>]) -> Vec<Point<T>> where T: NumCast + Copy +\nOrd","parent":null,"children":[],"decl_id":null,"docs":" Finds the convex hull of a set of points, using the [Graham scan algorithm].","sig":null,"attributes":[{"value":"/ Finds the convex hull of a set of points, using the [Graham scan algorithm].","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometry.rs","byte_start":242690,"byte_end":242770,"line_start":161,"line_end":161,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometry.rs","byte_start":242771,"byte_end":242774,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ [Graham scan algorithm]: https://en.wikipedia.org/wiki/Graham_scan","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometry.rs","byte_start":242775,"byte_end":242845,"line_start":163,"line_end":163,"column_start":1,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":1253},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"gradients","qualname":"::gradients","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","parent":null,"children":[{"krate":0,"index":1254},{"krate":0,"index":1255},{"krate":0,"index":1258},{"krate":0,"index":1261},{"krate":0,"index":1264},{"krate":0,"index":1265},{"krate":0,"index":1268},{"krate":0,"index":1271},{"krate":0,"index":1272},{"krate":0,"index":1275},{"krate":0,"index":1278},{"krate":0,"index":1281},{"krate":0,"index":1282},{"krate":0,"index":1284},{"krate":0,"index":1287},{"krate":0,"index":2350},{"krate":0,"index":2352},{"krate":0,"index":2354},{"krate":0,"index":2356},{"krate":0,"index":2358},{"krate":0,"index":2360},{"krate":0,"index":1290},{"krate":0,"index":1291},{"krate":0,"index":1292},{"krate":0,"index":1293},{"krate":0,"index":1294},{"krate":0,"index":1295},{"krate":0,"index":1296},{"krate":0,"index":1298},{"krate":0,"index":1302},{"krate":0,"index":1304},{"krate":0,"index":1310}],"decl_id":null,"docs":" Functions for computing gradients of image intensities.\n","sig":null,"attributes":[{"value":"/ Functions for computing gradients of image intensities.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":248442,"byte_end":248501,"line_start":1,"line_end":1,"column_start":1,"column_end":60}}]},{"kind":"Static","id":{"krate":0,"index":2350},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":248866,"byte_end":248880,"line_start":13,"line_end":13,"column_start":12,"column_end":26},"name":"VERTICAL_SOBEL","qualname":"::gradients::VERTICAL_SOBEL","value":"[i32; ]","parent":null,"children":[],"decl_id":null,"docs":" Sobel filter for detecting vertical gradients.","sig":null,"attributes":[{"value":"/ Sobel filter for detecting vertical gradients.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":248714,"byte_end":248764,"line_start":9,"line_end":9,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":248765,"byte_end":248768,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Used by the [`vertical_sobel`](fn.vertical_sobel.html) function.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":248769,"byte_end":248837,"line_start":11,"line_end":11,"column_start":1,"column_end":69}},{"value":"rustfmt::skip","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":248838,"byte_end":248854,"line_start":12,"line_end":12,"column_start":1,"column_end":17}}]},{"kind":"Static","id":{"krate":0,"index":2352},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":249103,"byte_end":249119,"line_start":22,"line_end":22,"column_start":12,"column_end":28},"name":"HORIZONTAL_SOBEL","qualname":"::gradients::HORIZONTAL_SOBEL","value":"[i32; ]","parent":null,"children":[],"decl_id":null,"docs":" Sobel filter for detecting horizontal gradients.","sig":null,"attributes":[{"value":"/ Sobel filter for detecting horizontal gradients.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":248945,"byte_end":248997,"line_start":18,"line_end":18,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":248998,"byte_end":249001,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Used by the [`horizontal_sobel`](fn.horizontal_sobel.html) function.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":249002,"byte_end":249074,"line_start":20,"line_end":20,"column_start":1,"column_end":73}},{"value":"rustfmt::skip","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":249075,"byte_end":249091,"line_start":21,"line_end":21,"column_start":1,"column_end":17}}]},{"kind":"Static","id":{"krate":0,"index":2354},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":249333,"byte_end":249348,"line_start":31,"line_end":31,"column_start":12,"column_end":27},"name":"VERTICAL_SCHARR","qualname":"::gradients::VERTICAL_SCHARR","value":"[i32; ]","parent":null,"children":[],"decl_id":null,"docs":" Scharr filter for detecting vertical gradients.","sig":null,"attributes":[{"value":"/ Scharr filter for detecting vertical gradients.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":249178,"byte_end":249229,"line_start":27,"line_end":27,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":249230,"byte_end":249233,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Used by the [`vertical_scharr`](fn.vertical_scharr.html) function.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":249234,"byte_end":249304,"line_start":29,"line_end":29,"column_start":1,"column_end":71}},{"value":"rustfmt::skip","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":249305,"byte_end":249321,"line_start":30,"line_end":30,"column_start":1,"column_end":17}}]},{"kind":"Static","id":{"krate":0,"index":2356},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":249580,"byte_end":249597,"line_start":40,"line_end":40,"column_start":12,"column_end":29},"name":"HORIZONTAL_SCHARR","qualname":"::gradients::HORIZONTAL_SCHARR","value":"[i32; ]","parent":null,"children":[],"decl_id":null,"docs":" Scharr filter for detecting horizontal gradients.","sig":null,"attributes":[{"value":"/ Scharr filter for detecting horizontal gradients.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":249419,"byte_end":249472,"line_start":36,"line_end":36,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":249473,"byte_end":249476,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Used by the [`horizontal_scharr`](fn.horizontal_scharr.html) function.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":249477,"byte_end":249551,"line_start":38,"line_end":38,"column_start":1,"column_end":75}},{"value":"rustfmt::skip","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":249552,"byte_end":249568,"line_start":39,"line_end":39,"column_start":1,"column_end":17}}]},{"kind":"Static","id":{"krate":0,"index":2358},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":249826,"byte_end":249842,"line_start":49,"line_end":49,"column_start":12,"column_end":28},"name":"VERTICAL_PREWITT","qualname":"::gradients::VERTICAL_PREWITT","value":"[i32; ]","parent":null,"children":[],"decl_id":null,"docs":" Prewitt filter for detecting vertical gradients.","sig":null,"attributes":[{"value":"/ Prewitt filter for detecting vertical gradients.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":249668,"byte_end":249720,"line_start":45,"line_end":45,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":249721,"byte_end":249724,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Used by the [`vertical_prewitt`](fn.vertical_prewitt.html) function.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":249725,"byte_end":249797,"line_start":47,"line_end":47,"column_start":1,"column_end":73}},{"value":"rustfmt::skip","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":249798,"byte_end":249814,"line_start":48,"line_end":48,"column_start":1,"column_end":17}}]},{"kind":"Static","id":{"krate":0,"index":2360},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":250071,"byte_end":250089,"line_start":58,"line_end":58,"column_start":12,"column_end":30},"name":"HORIZONTAL_PREWITT","qualname":"::gradients::HORIZONTAL_PREWITT","value":"[i32; ]","parent":null,"children":[],"decl_id":null,"docs":" Prewitt filter for detecting horizontal gradients.","sig":null,"attributes":[{"value":"/ Prewitt filter for detecting horizontal gradients.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":249907,"byte_end":249961,"line_start":54,"line_end":54,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":249962,"byte_end":249965,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ Used by the [`horizontal_prewitt`](fn.horizontal_prewitt.html) function.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":249966,"byte_end":250042,"line_start":56,"line_end":56,"column_start":1,"column_end":77}},{"value":"rustfmt::skip","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":250043,"byte_end":250059,"line_start":57,"line_end":57,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":1290},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":250281,"byte_end":250297,"line_start":65,"line_end":65,"column_start":8,"column_end":24},"name":"horizontal_sobel","qualname":"::gradients::horizontal_sobel","value":"pub fn horizontal_sobel(&GrayImage) -> Image<Luma<i16>>","parent":null,"children":[],"decl_id":null,"docs":" Convolves an image with the [`HORIZONTAL_SOBEL`](static.HORIZONTAL_SOBEL.html)\n kernel to detect horizontal gradients.\n","sig":null,"attributes":[{"value":"/ Convolves an image with the [`HORIZONTAL_SOBEL`](static.HORIZONTAL_SOBEL.html)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":250148,"byte_end":250230,"line_start":63,"line_end":63,"column_start":1,"column_end":83}},{"value":"/ kernel to detect horizontal gradients.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":250231,"byte_end":250273,"line_start":64,"line_end":64,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":1291},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":250509,"byte_end":250523,"line_start":71,"line_end":71,"column_start":8,"column_end":22},"name":"vertical_sobel","qualname":"::gradients::vertical_sobel","value":"pub fn vertical_sobel(&GrayImage) -> Image<Luma<i16>>","parent":null,"children":[],"decl_id":null,"docs":" Convolves an image with the [`VERTICAL_SOBEL`](static.VERTICAL_SOBEL.html)\n kernel to detect vertical gradients.\n","sig":null,"attributes":[{"value":"/ Convolves an image with the [`VERTICAL_SOBEL`](static.VERTICAL_SOBEL.html)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":250382,"byte_end":250460,"line_start":69,"line_end":69,"column_start":1,"column_end":79}},{"value":"/ kernel to detect vertical gradients.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":250461,"byte_end":250501,"line_start":70,"line_end":70,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":1292},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":250741,"byte_end":250758,"line_start":77,"line_end":77,"column_start":8,"column_end":25},"name":"horizontal_scharr","qualname":"::gradients::horizontal_scharr","value":"pub fn horizontal_scharr(&GrayImage) -> Image<Luma<i16>>","parent":null,"children":[],"decl_id":null,"docs":" Convolves an image with the [`HORIZONTAL_SCHARR`](static.HORIZONTAL_SCHARR.html)\n kernel to detect horizontal gradients.\n","sig":null,"attributes":[{"value":"/ Convolves an image with the [`HORIZONTAL_SCHARR`](static.HORIZONTAL_SCHARR.html)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":250606,"byte_end":250690,"line_start":75,"line_end":75,"column_start":1,"column_end":85}},{"value":"/ kernel to detect horizontal gradients.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":250691,"byte_end":250733,"line_start":76,"line_end":76,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":1293},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":250973,"byte_end":250988,"line_start":83,"line_end":83,"column_start":8,"column_end":23},"name":"vertical_scharr","qualname":"::gradients::vertical_scharr","value":"pub fn vertical_scharr(&GrayImage) -> Image<Luma<i16>>","parent":null,"children":[],"decl_id":null,"docs":" Convolves an image with the [`VERTICAL_SCHARR`](static.VERTICAL_SCHARR.html)\n kernel to detect vertical gradients.\n","sig":null,"attributes":[{"value":"/ Convolves an image with the [`VERTICAL_SCHARR`](static.VERTICAL_SCHARR.html)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":250844,"byte_end":250924,"line_start":81,"line_end":81,"column_start":1,"column_end":81}},{"value":"/ kernel to detect vertical gradients.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":250925,"byte_end":250965,"line_start":82,"line_end":82,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":1294},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":251209,"byte_end":251227,"line_start":89,"line_end":89,"column_start":8,"column_end":26},"name":"horizontal_prewitt","qualname":"::gradients::horizontal_prewitt","value":"pub fn horizontal_prewitt(&GrayImage) -> Image<Luma<i16>>","parent":null,"children":[],"decl_id":null,"docs":" Convolves an image with the [`HORIZONTAL_PREWITT`](static.HORIZONTAL_PREWITT.html)\n kernel to detect horizontal gradients.\n","sig":null,"attributes":[{"value":"/ Convolves an image with the [`HORIZONTAL_PREWITT`](static.HORIZONTAL_PREWITT.html)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":251072,"byte_end":251158,"line_start":87,"line_end":87,"column_start":1,"column_end":87}},{"value":"/ kernel to detect horizontal gradients.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":251159,"byte_end":251201,"line_start":88,"line_end":88,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":1295},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":251445,"byte_end":251461,"line_start":95,"line_end":95,"column_start":8,"column_end":24},"name":"vertical_prewitt","qualname":"::gradients::vertical_prewitt","value":"pub fn vertical_prewitt(&GrayImage) -> Image<Luma<i16>>","parent":null,"children":[],"decl_id":null,"docs":" Convolves an image with the [`VERTICAL_PREWITT`](static.VERTICAL_PREWITT.html)\n kernel to detect vertical gradients.\n","sig":null,"attributes":[{"value":"/ Convolves an image with the [`VERTICAL_PREWITT`](static.VERTICAL_PREWITT.html)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":251314,"byte_end":251396,"line_start":93,"line_end":93,"column_start":1,"column_end":83}},{"value":"/ kernel to detect vertical gradients.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":251397,"byte_end":251437,"line_start":94,"line_end":94,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":1296},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":251626,"byte_end":251641,"line_start":100,"line_end":100,"column_start":8,"column_end":23},"name":"sobel_gradients","qualname":"::gradients::sobel_gradients","value":"pub fn sobel_gradients(&GrayImage) -> Image<Luma<u16>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the magnitudes of gradients in an image using Sobel filters.\n","sig":null,"attributes":[{"value":"/ Returns the magnitudes of gradients in an image using Sobel filters.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":251546,"byte_end":251618,"line_start":99,"line_end":99,"column_start":1,"column_end":73}}]},{"kind":"Function","id":{"krate":0,"index":1298},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":253560,"byte_end":253578,"line_start":170,"line_end":170,"column_start":8,"column_end":26},"name":"sobel_gradient_map","qualname":"::gradients::sobel_gradient_map","value":"pub fn sobel_gradient_map<P, F, Q>(&Image<P>, F) -> Image<Q> where\nP: Pixel<Subpixel = u8> + WithChannel<u16> + WithChannel<i16> + 'static,\nQ: Pixel + 'static, ChannelMap<P, u16>: HasBlack, F: Fn(ChannelMap<P, u16>) ->\nQ","parent":null,"children":[],"decl_id":null,"docs":" Computes per-channel gradients using Sobel filters and calls `f`\n to compute each output pixel.","sig":null,"attributes":[{"value":"/ Computes per-channel gradients using Sobel filters and calls `f`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":251750,"byte_end":251818,"line_start":104,"line_end":104,"column_start":1,"column_end":69}},{"value":"/ to compute each output pixel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":251819,"byte_end":251852,"line_start":105,"line_end":105,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":251853,"byte_end":251856,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":251857,"byte_end":251871,"line_start":107,"line_end":107,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":251872,"byte_end":251879,"line_start":108,"line_end":108,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":251880,"byte_end":251905,"line_start":109,"line_end":109,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":251906,"byte_end":251924,"line_start":110,"line_end":110,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":251925,"byte_end":251954,"line_start":111,"line_end":111,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":251955,"byte_end":251972,"line_start":112,"line_end":112,"column_start":1,"column_end":18}},{"value":"/ use imageproc::gradients::{sobel_gradient_map};","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":251973,"byte_end":252024,"line_start":113,"line_end":113,"column_start":1,"column_end":52}},{"value":"/ use image::Luma;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252025,"byte_end":252045,"line_start":114,"line_end":114,"column_start":1,"column_end":21}},{"value":"/ use std::cmp;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252046,"byte_end":252063,"line_start":115,"line_end":115,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252064,"byte_end":252067,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ // A shallow horizontal gradient in the red","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252068,"byte_end":252115,"line_start":117,"line_end":117,"column_start":1,"column_end":48}},{"value":"/ // channel, a steeper vertical gradient in the","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252116,"byte_end":252166,"line_start":118,"line_end":118,"column_start":1,"column_end":51}},{"value":"/ // blue channel, constant in the green channel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252167,"byte_end":252218,"line_start":119,"line_end":119,"column_start":1,"column_end":52}},{"value":"/ let input = rgb_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252219,"byte_end":252246,"line_start":120,"line_end":120,"column_start":1,"column_end":28}},{"value":"/     [0, 5, 0], [1, 5, 0], [2, 5, 0];","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252247,"byte_end":252287,"line_start":121,"line_end":121,"column_start":1,"column_end":41}},{"value":"/     [0, 5, 2], [1, 5, 2], [2, 5, 2];","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252288,"byte_end":252328,"line_start":122,"line_end":122,"column_start":1,"column_end":41}},{"value":"/     [0, 5, 4], [1, 5, 4], [2, 5, 4]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252329,"byte_end":252368,"line_start":123,"line_end":123,"column_start":1,"column_end":40}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252369,"byte_end":252375,"line_start":124,"line_end":124,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252376,"byte_end":252379,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ // Computing independent per-channel gradients.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252380,"byte_end":252431,"line_start":126,"line_end":126,"column_start":1,"column_end":52}},{"value":"/ let channel_gradient = rgb_image!(type: u16,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252432,"byte_end":252480,"line_start":127,"line_end":127,"column_start":1,"column_end":49}},{"value":"/     [ 4,  0,  8], [ 8,  0,  8], [ 4,  0,  8];","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252481,"byte_end":252530,"line_start":128,"line_end":128,"column_start":1,"column_end":50}},{"value":"/     [ 4,  0, 16], [ 8,  0, 16], [ 4,  0, 16];","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252531,"byte_end":252580,"line_start":129,"line_end":129,"column_start":1,"column_end":50}},{"value":"/     [ 4,  0,  8], [ 8,  0,  8], [ 4,  0,  8]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252581,"byte_end":252629,"line_start":130,"line_end":130,"column_start":1,"column_end":49}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252630,"byte_end":252636,"line_start":131,"line_end":131,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252637,"byte_end":252640,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252641,"byte_end":252663,"line_start":133,"line_end":133,"column_start":1,"column_end":23}},{"value":"/     sobel_gradient_map(&input, |p| p),","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252664,"byte_end":252706,"line_start":134,"line_end":134,"column_start":1,"column_end":43}},{"value":"/     channel_gradient","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252707,"byte_end":252731,"line_start":135,"line_end":135,"column_start":1,"column_end":25}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252732,"byte_end":252738,"line_start":136,"line_end":136,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252739,"byte_end":252742,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ // Defining the gradient of an RGB image to be the","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252743,"byte_end":252797,"line_start":138,"line_end":138,"column_start":1,"column_end":55}},{"value":"/ // mean of its per-channel gradients.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252798,"byte_end":252839,"line_start":139,"line_end":139,"column_start":1,"column_end":42}},{"value":"/ let mean_gradient = gray_image!(type: u16,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252840,"byte_end":252886,"line_start":140,"line_end":140,"column_start":1,"column_end":47}},{"value":"/     4, 5, 4;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252887,"byte_end":252903,"line_start":141,"line_end":141,"column_start":1,"column_end":17}},{"value":"/     6, 8, 6;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252904,"byte_end":252920,"line_start":142,"line_end":142,"column_start":1,"column_end":17}},{"value":"/     4, 5, 4","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252921,"byte_end":252936,"line_start":143,"line_end":143,"column_start":1,"column_end":16}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252937,"byte_end":252943,"line_start":144,"line_end":144,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252944,"byte_end":252947,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252948,"byte_end":252970,"line_start":146,"line_end":146,"column_start":1,"column_end":23}},{"value":"/     sobel_gradient_map(&input, |p| {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":252971,"byte_end":253011,"line_start":147,"line_end":147,"column_start":1,"column_end":41}},{"value":"/         let mean = (p[0] + p[1] + p[2]) / 3;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":253012,"byte_end":253060,"line_start":148,"line_end":148,"column_start":1,"column_end":49}},{"value":"/         Luma([mean])","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":253061,"byte_end":253085,"line_start":149,"line_end":149,"column_start":1,"column_end":25}},{"value":"/     }),","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":253086,"byte_end":253097,"line_start":150,"line_end":150,"column_start":1,"column_end":12}},{"value":"/     mean_gradient","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":253098,"byte_end":253119,"line_start":151,"line_end":151,"column_start":1,"column_end":22}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":253120,"byte_end":253126,"line_start":152,"line_end":152,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":253127,"byte_end":253130,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ // Defining the gradient of an RGB image to be the pixelwise","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":253131,"byte_end":253195,"line_start":154,"line_end":154,"column_start":1,"column_end":65}},{"value":"/ // maximum of its per-channel gradients.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":253196,"byte_end":253240,"line_start":155,"line_end":155,"column_start":1,"column_end":45}},{"value":"/ let max_gradient = gray_image!(type: u16,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":253241,"byte_end":253286,"line_start":156,"line_end":156,"column_start":1,"column_end":46}},{"value":"/      8,  8,  8;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":253287,"byte_end":253306,"line_start":157,"line_end":157,"column_start":1,"column_end":20}},{"value":"/     16, 16, 16;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":253307,"byte_end":253326,"line_start":158,"line_end":158,"column_start":1,"column_end":20}},{"value":"/      8,  8,  8","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":253327,"byte_end":253345,"line_start":159,"line_end":159,"column_start":1,"column_end":19}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":253346,"byte_end":253352,"line_start":160,"line_end":160,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":253353,"byte_end":253356,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":253357,"byte_end":253379,"line_start":162,"line_end":162,"column_start":1,"column_end":23}},{"value":"/     sobel_gradient_map(&input, |p| {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":253380,"byte_end":253420,"line_start":163,"line_end":163,"column_start":1,"column_end":41}},{"value":"/         let max = cmp::max(cmp::max(p[0], p[1]), p[2]);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":253421,"byte_end":253480,"line_start":164,"line_end":164,"column_start":1,"column_end":60}},{"value":"/         Luma([max])","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":253481,"byte_end":253504,"line_start":165,"line_end":165,"column_start":1,"column_end":24}},{"value":"/     }),","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":253505,"byte_end":253516,"line_start":166,"line_end":166,"column_start":1,"column_end":12}},{"value":"/     max_gradient","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":253517,"byte_end":253537,"line_start":167,"line_end":167,"column_start":1,"column_end":21}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":253538,"byte_end":253544,"line_start":168,"line_end":168,"column_start":1,"column_end":7}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":253545,"byte_end":253552,"line_start":169,"line_end":169,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1302},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":253948,"byte_end":253965,"line_start":181,"line_end":181,"column_start":8,"column_end":25},"name":"prewitt_gradients","qualname":"::gradients::prewitt_gradients","value":"pub fn prewitt_gradients(&GrayImage) -> Image<Luma<u16>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the magnitudes of gradients in an image using Prewitt filters.\n","sig":null,"attributes":[{"value":"/ Returns the magnitudes of gradients in an image using Prewitt filters.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\gradients.rs","byte_start":253866,"byte_end":253940,"line_start":180,"line_end":180,"column_start":1,"column_end":75}}]},{"kind":"Mod","id":{"krate":0,"index":1311},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"haar","qualname":"::haar","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","parent":null,"children":[{"krate":0,"index":1312},{"krate":0,"index":1313},{"krate":0,"index":1316},{"krate":0,"index":1319},{"krate":0,"index":1322},{"krate":0,"index":1323},{"krate":0,"index":1326},{"krate":0,"index":1329},{"krate":0,"index":1332},{"krate":0,"index":1333},{"krate":0,"index":1335},{"krate":0,"index":1338},{"krate":0,"index":1339},{"krate":0,"index":1341},{"krate":0,"index":2362},{"krate":0,"index":2368},{"krate":0,"index":2369},{"krate":0,"index":2371},{"krate":0,"index":2372},{"krate":0,"index":2375},{"krate":0,"index":2376},{"krate":0,"index":2378},{"krate":0,"index":2380},{"krate":0,"index":2385},{"krate":0,"index":2386},{"krate":0,"index":2388},{"krate":0,"index":2389},{"krate":0,"index":2391},{"krate":0,"index":2392},{"krate":0,"index":2394},{"krate":0,"index":2396},{"krate":0,"index":2407},{"krate":0,"index":2408},{"krate":0,"index":2410},{"krate":0,"index":2413},{"krate":0,"index":2414},{"krate":0,"index":2416},{"krate":0,"index":2417},{"krate":0,"index":2419},{"krate":0,"index":1344},{"krate":0,"index":1346},{"krate":0,"index":1353},{"krate":0,"index":1354},{"krate":0,"index":1355},{"krate":0,"index":1357},{"krate":0,"index":2421},{"krate":0,"index":2424},{"krate":0,"index":2425},{"krate":0,"index":2427},{"krate":0,"index":2430},{"krate":0,"index":2431},{"krate":0,"index":2434},{"krate":0,"index":2435},{"krate":0,"index":2437},{"krate":0,"index":2439},{"krate":0,"index":2441},{"krate":0,"index":2443},{"krate":0,"index":2446},{"krate":0,"index":2447},{"krate":0,"index":2449},{"krate":0,"index":2452},{"krate":0,"index":2453},{"krate":0,"index":2456},{"krate":0,"index":2457},{"krate":0,"index":2459},{"krate":0,"index":2461},{"krate":0,"index":2463},{"krate":0,"index":2465},{"krate":0,"index":2470},{"krate":0,"index":2472},{"krate":0,"index":2475},{"krate":0,"index":2479},{"krate":0,"index":2481},{"krate":0,"index":2485},{"krate":0,"index":2487},{"krate":0,"index":2490},{"krate":0,"index":1358},{"krate":0,"index":1361},{"krate":0,"index":1363},{"krate":0,"index":1364},{"krate":0,"index":1365},{"krate":0,"index":1366},{"krate":0,"index":1367},{"krate":0,"index":1369}],"decl_id":null,"docs":" Functions for creating and evaluating [Haar-like features].","sig":null,"attributes":[{"value":"/ Functions for creating and evaluating [Haar-like features].","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":259936,"byte_end":259999,"line_start":1,"line_end":1,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":260000,"byte_end":260003,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ [Haar-like features]: https://en.wikipedia.org/wiki/Haar-like_features","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":260004,"byte_end":260078,"line_start":3,"line_end":3,"column_start":1,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":2362},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":260436,"byte_end":260447,"line_start":15,"line_end":15,"column_start":12,"column_end":23},"name":"HaarFeature","qualname":"::haar::HaarFeature","value":"HaarFeature {  }","parent":null,"children":[{"krate":0,"index":2363},{"krate":0,"index":2364},{"krate":0,"index":2365},{"krate":0,"index":2366},{"krate":0,"index":2367}],"decl_id":null,"docs":" A [Haar-like feature].","sig":null,"attributes":[{"value":"/ A [Haar-like feature].","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":260275,"byte_end":260301,"line_start":11,"line_end":11,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":260302,"byte_end":260305,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ [Haar-like feature]: https://en.wikipedia.org/wiki/Haar-like_features","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":260306,"byte_end":260379,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2397},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261386,"byte_end":261405,"line_start":44,"line_end":44,"column_start":5,"column_end":24},"name":"TwoRegionHorizontal","qualname":"::haar::HaarFeatureType::TwoRegionHorizontal","value":"HaarFeatureType::TwoRegionHorizontal","parent":{"krate":0,"index":2396},"children":[],"decl_id":null,"docs":" Two horizontally-adjacent regions of equal width.\n <pre>\n      -----------\n     |  *  |  &  |\n      -----------\n </pre>\n","sig":null,"attributes":[{"value":"/ Two horizontally-adjacent regions of equal width.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261223,"byte_end":261276,"line_start":38,"line_end":38,"column_start":5,"column_end":58}},{"value":"/ <pre>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261281,"byte_end":261290,"line_start":39,"line_end":39,"column_start":5,"column_end":14}},{"value":"/      -----------","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261295,"byte_end":261315,"line_start":40,"line_end":40,"column_start":5,"column_end":25}},{"value":"/     |  *  |  &  |","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261320,"byte_end":261341,"line_start":41,"line_end":41,"column_start":5,"column_end":26}},{"value":"/      -----------","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261346,"byte_end":261366,"line_start":42,"line_end":42,"column_start":5,"column_end":25}},{"value":"/ </pre>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261371,"byte_end":261381,"line_start":43,"line_end":43,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2399},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261594,"byte_end":261615,"line_start":51,"line_end":51,"column_start":5,"column_end":26},"name":"ThreeRegionHorizontal","qualname":"::haar::HaarFeatureType::ThreeRegionHorizontal","value":"HaarFeatureType::ThreeRegionHorizontal","parent":{"krate":0,"index":2396},"children":[],"decl_id":null,"docs":" Three horizontally-adjacent regions of equal width.\n <pre>\n      -----------------\n     |  *  |  &  |  *  |\n      -----------------\n </pre>\n","sig":null,"attributes":[{"value":"/ Three horizontally-adjacent regions of equal width.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261411,"byte_end":261466,"line_start":45,"line_end":45,"column_start":5,"column_end":60}},{"value":"/ <pre>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261471,"byte_end":261480,"line_start":46,"line_end":46,"column_start":5,"column_end":14}},{"value":"/      -----------------","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261485,"byte_end":261511,"line_start":47,"line_end":47,"column_start":5,"column_end":31}},{"value":"/     |  *  |  &  |  *  |","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261516,"byte_end":261543,"line_start":48,"line_end":48,"column_start":5,"column_end":32}},{"value":"/      -----------------","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261548,"byte_end":261574,"line_start":49,"line_end":49,"column_start":5,"column_end":31}},{"value":"/ </pre>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261579,"byte_end":261589,"line_start":50,"line_end":50,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2401},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261804,"byte_end":261821,"line_start":60,"line_end":60,"column_start":5,"column_end":22},"name":"TwoRegionVertical","qualname":"::haar::HaarFeatureType::TwoRegionVertical","value":"HaarFeatureType::TwoRegionVertical","parent":{"krate":0,"index":2396},"children":[],"decl_id":null,"docs":" Two vertically-adjacent regions of equal height.\n <pre>\n      -----\n     |  *  |\n      -----\n     |  &  |\n      -----\n </pre>\n","sig":null,"attributes":[{"value":"/ Two vertically-adjacent regions of equal height.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261621,"byte_end":261673,"line_start":52,"line_end":52,"column_start":5,"column_end":57}},{"value":"/ <pre>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261678,"byte_end":261687,"line_start":53,"line_end":53,"column_start":5,"column_end":14}},{"value":"/      -----","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261692,"byte_end":261706,"line_start":54,"line_end":54,"column_start":5,"column_end":19}},{"value":"/     |  *  |","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261711,"byte_end":261726,"line_start":55,"line_end":55,"column_start":5,"column_end":20}},{"value":"/      -----","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261731,"byte_end":261745,"line_start":56,"line_end":56,"column_start":5,"column_end":19}},{"value":"/     |  &  |","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261750,"byte_end":261765,"line_start":57,"line_end":57,"column_start":5,"column_end":20}},{"value":"/      -----","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261770,"byte_end":261784,"line_start":58,"line_end":58,"column_start":5,"column_end":19}},{"value":"/ </pre>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261789,"byte_end":261799,"line_start":59,"line_end":59,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2403},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":262051,"byte_end":262070,"line_start":71,"line_end":71,"column_start":5,"column_end":24},"name":"ThreeRegionVertical","qualname":"::haar::HaarFeatureType::ThreeRegionVertical","value":"HaarFeatureType::ThreeRegionVertical","parent":{"krate":0,"index":2396},"children":[],"decl_id":null,"docs":" Three vertically-adjacent regions of equal height.\n <pre>\n      -----\n     |  *  |\n      -----\n     |  &  |\n      -----\n     |  *  |\n      -----\n </pre>\n","sig":null,"attributes":[{"value":"/ Three vertically-adjacent regions of equal height.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261827,"byte_end":261881,"line_start":61,"line_end":61,"column_start":5,"column_end":59}},{"value":"/ <pre>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261886,"byte_end":261895,"line_start":62,"line_end":62,"column_start":5,"column_end":14}},{"value":"/      -----","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261900,"byte_end":261914,"line_start":63,"line_end":63,"column_start":5,"column_end":19}},{"value":"/     |  *  |","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261919,"byte_end":261934,"line_start":64,"line_end":64,"column_start":5,"column_end":20}},{"value":"/      -----","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261939,"byte_end":261953,"line_start":65,"line_end":65,"column_start":5,"column_end":19}},{"value":"/     |  &  |","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261958,"byte_end":261973,"line_start":66,"line_end":66,"column_start":5,"column_end":20}},{"value":"/      -----","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261978,"byte_end":261992,"line_start":67,"line_end":67,"column_start":5,"column_end":19}},{"value":"/     |  *  |","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261997,"byte_end":262012,"line_start":68,"line_end":68,"column_start":5,"column_end":20}},{"value":"/      -----","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":262017,"byte_end":262031,"line_start":69,"line_end":69,"column_start":5,"column_end":19}},{"value":"/ </pre>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":262036,"byte_end":262046,"line_start":70,"line_end":70,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2405},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":262361,"byte_end":262371,"line_start":81,"line_end":81,"column_start":5,"column_end":15},"name":"FourRegion","qualname":"::haar::HaarFeatureType::FourRegion","value":"HaarFeatureType::FourRegion","parent":{"krate":0,"index":2396},"children":[],"decl_id":null,"docs":" Four regions arranged in a two-by-two grid. The two columns\n have equal width and the two rows have equal height.\n <pre>\n      -----------\n     |  *  |  &  |\n      -----------\n     |  &  |  *  |\n      -----------\n </pre>\n","sig":null,"attributes":[{"value":"/ Four regions arranged in a two-by-two grid. The two columns","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":262076,"byte_end":262139,"line_start":72,"line_end":72,"column_start":5,"column_end":68}},{"value":"/ have equal width and the two rows have equal height.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":262144,"byte_end":262200,"line_start":73,"line_end":73,"column_start":5,"column_end":61}},{"value":"/ <pre>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":262205,"byte_end":262214,"line_start":74,"line_end":74,"column_start":5,"column_end":14}},{"value":"/      -----------","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":262219,"byte_end":262239,"line_start":75,"line_end":75,"column_start":5,"column_end":25}},{"value":"/     |  *  |  &  |","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":262244,"byte_end":262265,"line_start":76,"line_end":76,"column_start":5,"column_end":26}},{"value":"/      -----------","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":262270,"byte_end":262290,"line_start":77,"line_end":77,"column_start":5,"column_end":25}},{"value":"/     |  &  |  *  |","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":262295,"byte_end":262316,"line_start":78,"line_end":78,"column_start":5,"column_end":26}},{"value":"/      -----------","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":262321,"byte_end":262341,"line_start":79,"line_end":79,"column_start":5,"column_end":25}},{"value":"/ </pre>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":262346,"byte_end":262356,"line_start":80,"line_end":80,"column_start":5,"column_end":15}}]},{"kind":"Enum","id":{"krate":0,"index":2396},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261201,"byte_end":261216,"line_start":37,"line_end":37,"column_start":10,"column_end":25},"name":"HaarFeatureType","qualname":"::haar::HaarFeatureType","value":"pub enum HaarFeatureType {\n    TwoRegionHorizontal,\n    ThreeRegionHorizontal,\n    TwoRegionVertical,\n    ThreeRegionVertical,\n    FourRegion,\n}","parent":null,"children":[{"krate":0,"index":2397},{"krate":0,"index":2399},{"krate":0,"index":2401},{"krate":0,"index":2403},{"krate":0,"index":2405}],"decl_id":null,"docs":" The type of a Haar-like feature determines the number of regions it contains and their orientation.\n The diagrams in the comments for each variant use the symbols (*, &) to represent either\n (+, -) or (-, +), depending on which `Sign` the feature type is used with.\n","sig":null,"attributes":[{"value":"/ The type of a Haar-like feature determines the number of regions it contains and their orientation.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":260865,"byte_end":260968,"line_start":33,"line_end":33,"column_start":1,"column_end":104}},{"value":"/ The diagrams in the comments for each variant use the symbols (*, &) to represent either","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":260969,"byte_end":261061,"line_start":34,"line_end":34,"column_start":1,"column_end":93}},{"value":"/ (+, -) or (-, +), depending on which `Sign` the feature type is used with.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":261062,"byte_end":261140,"line_start":35,"line_end":35,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1347},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":262967,"byte_end":262975,"line_start":99,"line_end":99,"column_start":12,"column_end":20},"name":"evaluate","qualname":"<HaarFeature>::evaluate","value":"pub fn evaluate(&Self, &Image<Luma<u32>>) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Evaluates the Haar-like feature on an integral image.\n","sig":null,"attributes":[{"value":"/ Evaluates the Haar-like feature on an integral image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":262898,"byte_end":262955,"line_start":98,"line_end":98,"column_start":5,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":1355},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":268649,"byte_end":268672,"line_start":262,"line_end":262,"column_start":8,"column_end":31},"name":"enumerate_haar_features","qualname":"::haar::enumerate_haar_features","value":"pub fn enumerate_haar_features(u8, u8) -> Vec<HaarFeature>","parent":null,"children":[],"decl_id":null,"docs":" Returns a vector of all valid Haar-like features for an image with given width and height.\n","sig":null,"attributes":[{"value":"/ Returns a vector of all valid Haar-like features for an image with given width and height.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":268547,"byte_end":268641,"line_start":261,"line_end":261,"column_start":1,"column_end":95}}]},{"kind":"Function","id":{"krate":0,"index":1365},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":272268,"byte_end":272291,"line_start":361,"line_end":361,"column_start":8,"column_end":31},"name":"number_of_haar_features","qualname":"::haar::number_of_haar_features","value":"pub fn number_of_haar_features(u32, u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of distinct Haar-like features for an image of the given dimensions.","sig":null,"attributes":[{"value":"/ Returns the number of distinct Haar-like features for an image of the given dimensions.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":271616,"byte_end":271707,"line_start":350,"line_end":350,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":271708,"byte_end":271711,"line_start":351,"line_end":351,"column_start":1,"column_end":4}},{"value":"/ Includes positive and negative, two and three region, vertical and horizontal features,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":271712,"byte_end":271803,"line_start":352,"line_end":352,"column_start":1,"column_end":92}},{"value":"/ as well as positive and negative four region features.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":271804,"byte_end":271862,"line_start":353,"line_end":353,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":271863,"byte_end":271866,"line_start":354,"line_end":354,"column_start":1,"column_end":4}},{"value":"/ Consider a `k`-region horizontal feature in an image of height `1` and width `w`. The largest valid block size","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":271867,"byte_end":271981,"line_start":355,"line_end":355,"column_start":1,"column_end":115}},{"value":"/ for such a feature is `M = floor(w / k)`, and for a block size `s` there are `(w + 1) - 2 * s`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":271982,"byte_end":272080,"line_start":356,"line_end":356,"column_start":1,"column_end":99}},{"value":"/ valid locations for the leftmost column of this feature.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":272081,"byte_end":272141,"line_start":357,"line_end":357,"column_start":1,"column_end":61}},{"value":"/ Summing over `s` gives `M * (w + 1) - k * [(M * (M + 1)) / 2]`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":272142,"byte_end":272209,"line_start":358,"line_end":358,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":272210,"byte_end":272213,"line_start":359,"line_end":359,"column_start":1,"column_end":4}},{"value":"/ An equivalent argument applies vertically.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":272214,"byte_end":272260,"line_start":360,"line_end":360,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":1367},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":273142,"byte_end":273159,"line_start":384,"line_end":384,"column_start":8,"column_end":25},"name":"draw_haar_feature","qualname":"::haar::draw_haar_feature","value":"pub fn draw_haar_feature<I>(&I, HaarFeature) -> Image<I::Pixel> where\nI: GenericImage, I::Pixel: HasBlack + HasWhite + 'static","parent":null,"children":[],"decl_id":null,"docs":" Draws the given Haar-like feature on an image, drawing pixels\n with a positive sign white and those with a negative sign black.\n","sig":null,"attributes":[{"value":"/ Draws the given Haar-like feature on an image, drawing pixels","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":273000,"byte_end":273065,"line_start":382,"line_end":382,"column_start":1,"column_end":66}},{"value":"/ with a positive sign white and those with a negative sign black.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":273066,"byte_end":273134,"line_start":383,"line_end":383,"column_start":1,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":1369},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":273605,"byte_end":273626,"line_start":397,"line_end":397,"column_start":8,"column_end":29},"name":"draw_haar_feature_mut","qualname":"::haar::draw_haar_feature_mut","value":"pub fn draw_haar_feature_mut<I>(&mut I, HaarFeature) where I: GenericImage,\nI::Pixel: HasBlack + HasWhite","parent":null,"children":[],"decl_id":null,"docs":" Draws the given Haar-like feature on an image in place, drawing pixels\n with a positive sign white and those with a negative sign black.\n","sig":null,"attributes":[{"value":"/ Draws the given Haar-like feature on an image in place, drawing pixels","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":273454,"byte_end":273528,"line_start":395,"line_end":395,"column_start":1,"column_end":75}},{"value":"/ with a positive sign white and those with a negative sign black.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":273529,"byte_end":273597,"line_start":396,"line_end":396,"column_start":1,"column_end":69}}]},{"kind":"Mod","id":{"krate":0,"index":1371},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hog","qualname":"::hog","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","parent":null,"children":[{"krate":0,"index":1372},{"krate":0,"index":1373},{"krate":0,"index":1376},{"krate":0,"index":1379},{"krate":0,"index":1380},{"krate":0,"index":1383},{"krate":0,"index":1386},{"krate":0,"index":1389},{"krate":0,"index":1390},{"krate":0,"index":1393},{"krate":0,"index":1396},{"krate":0,"index":1399},{"krate":0,"index":1400},{"krate":0,"index":1402},{"krate":0,"index":1405},{"krate":0,"index":2493},{"krate":0,"index":2499},{"krate":0,"index":2501},{"krate":0,"index":2502},{"krate":0,"index":2504},{"krate":0,"index":2505},{"krate":0,"index":2508},{"krate":0,"index":2509},{"krate":0,"index":1408},{"krate":0,"index":2511},{"krate":0,"index":2517},{"krate":0,"index":2519},{"krate":0,"index":2520},{"krate":0,"index":2522},{"krate":0,"index":2523},{"krate":0,"index":2526},{"krate":0,"index":2527},{"krate":0,"index":1410},{"krate":0,"index":1424},{"krate":0,"index":1425},{"krate":0,"index":1426},{"krate":0,"index":1427},{"krate":0,"index":1428},{"krate":0,"index":1430},{"krate":0,"index":1431},{"krate":0,"index":1433},{"krate":0,"index":1434},{"krate":0,"index":2529},{"krate":0,"index":2534},{"krate":0,"index":2536},{"krate":0,"index":2537},{"krate":0,"index":2541},{"krate":0,"index":2542},{"krate":0,"index":1435},{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1450},{"krate":0,"index":1452},{"krate":0,"index":1457},{"krate":0,"index":1463},{"krate":0,"index":1468},{"krate":0,"index":1479}],"decl_id":null,"docs":" [HoG features](https://en.wikipedia.org/wiki/Histogram_of_oriented_gradients)\n and helpers for visualizing them.\n","sig":null,"attributes":[{"value":"/ [HoG features](https://en.wikipedia.org/wiki/Histogram_of_oriented_gradients)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":285157,"byte_end":285238,"line_start":1,"line_end":1,"column_start":1,"column_end":82}},{"value":"/ and helpers for visualizing them.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":285239,"byte_end":285276,"line_start":2,"line_end":2,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":2493},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":285581,"byte_end":285591,"line_start":13,"line_end":13,"column_start":12,"column_end":22},"name":"HogOptions","qualname":"::hog::HogOptions","value":"HogOptions { orientations, signed, cell_side, block_side, block_stride }","parent":null,"children":[{"krate":0,"index":2494},{"krate":0,"index":2495},{"krate":0,"index":2496},{"krate":0,"index":2497},{"krate":0,"index":2498}],"decl_id":null,"docs":" Parameters for HoG descriptors.\n","sig":null,"attributes":[{"value":"/ Parameters for HoG descriptors.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":285489,"byte_end":285524,"line_start":11,"line_end":11,"column_start":1,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":2494},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":285647,"byte_end":285659,"line_start":15,"line_end":15,"column_start":9,"column_end":21},"name":"orientations","qualname":"::hog::HogOptions::orientations","value":"usize","parent":{"krate":0,"index":2493},"children":[],"decl_id":null,"docs":" Number of gradient orientation bins.\n","sig":null,"attributes":[{"value":"/ Number of gradient orientation bins.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":285598,"byte_end":285638,"line_start":14,"line_end":14,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":2495},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":285747,"byte_end":285753,"line_start":17,"line_end":17,"column_start":9,"column_end":15},"name":"signed","qualname":"::hog::HogOptions::signed","value":"bool","parent":{"krate":0,"index":2493},"children":[],"decl_id":null,"docs":" Whether gradients in opposite directions are treated as equal.\n","sig":null,"attributes":[{"value":"/ Whether gradients in opposite directions are treated as equal.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":285672,"byte_end":285738,"line_start":16,"line_end":16,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":2496},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":285813,"byte_end":285822,"line_start":19,"line_end":19,"column_start":9,"column_end":18},"name":"cell_side","qualname":"::hog::HogOptions::cell_side","value":"usize","parent":{"krate":0,"index":2493},"children":[],"decl_id":null,"docs":" Width and height of cell in pixels.\n","sig":null,"attributes":[{"value":"/ Width and height of cell in pixels.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":285765,"byte_end":285804,"line_start":18,"line_end":18,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":2497},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":285883,"byte_end":285893,"line_start":21,"line_end":21,"column_start":9,"column_end":19},"name":"block_side","qualname":"::hog::HogOptions::block_side","value":"usize","parent":{"krate":0,"index":2493},"children":[],"decl_id":null,"docs":" Width and height of block in cells.\n","sig":null,"attributes":[{"value":"/ Width and height of block in cells.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":285835,"byte_end":285874,"line_start":20,"line_end":20,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":2498},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":285975,"byte_end":285987,"line_start":23,"line_end":23,"column_start":9,"column_end":21},"name":"block_stride","qualname":"::hog::HogOptions::block_stride","value":"usize","parent":{"krate":0,"index":2493},"children":[],"decl_id":null,"docs":" Offset of the start of one block from the next in cells.\n","sig":null,"attributes":[{"value":"/ Offset of the start of one block from the next in cells.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":285906,"byte_end":285966,"line_start":22,"line_end":22,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1409},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":286153,"byte_end":286156,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<HogOptions>::new","value":"pub fn new(usize, bool, usize, usize, usize) -> HogOptions","parent":null,"children":[],"decl_id":null,"docs":" User-provided options, prior to validation.\n","sig":null,"attributes":[{"value":"/ User-provided options, prior to validation.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":286094,"byte_end":286141,"line_start":27,"line_end":27,"column_start":5,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":2511},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":286751,"byte_end":286758,"line_start":49,"line_end":49,"column_start":12,"column_end":19},"name":"HogSpec","qualname":"::hog::HogSpec","value":"HogSpec {  }","parent":null,"children":[{"krate":0,"index":2512},{"krate":0,"index":2513},{"krate":0,"index":2514},{"krate":0,"index":2515},{"krate":0,"index":2516}],"decl_id":null,"docs":" HoG options plus values calculated from these options and the desired\n image dimensions. Validation must occur when instances of this struct\n are created - functions receiving a spec will assume that it is valid.\n","sig":null,"attributes":[{"value":"/ HoG options plus values calculated from these options and the desired","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":286472,"byte_end":286545,"line_start":45,"line_end":45,"column_start":1,"column_end":74}},{"value":"/ image dimensions. Validation must occur when instances of this struct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":286546,"byte_end":286619,"line_start":46,"line_end":46,"column_start":1,"column_end":74}},{"value":"/ are created - functions receiving a spec will assume that it is valid.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":286620,"byte_end":286694,"line_start":47,"line_end":47,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1411},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":287357,"byte_end":287369,"line_start":64,"line_end":64,"column_start":12,"column_end":24},"name":"from_options","qualname":"<HogSpec>::from_options","value":"pub fn from_options(u32, u32, HogOptions) -> Result<HogSpec, String>","parent":null,"children":[],"decl_id":null,"docs":" Returns an error message if image dimensions aren't compatible with the provided options.\n","sig":null,"attributes":[{"value":"/ Returns an error message if image dimensions aren't compatible with the provided options.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":287252,"byte_end":287345,"line_start":63,"line_end":63,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":1415},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":290199,"byte_end":290216,"line_start":137,"line_end":137,"column_start":12,"column_end":29},"name":"descriptor_length","qualname":"<HogSpec>::descriptor_length","value":"pub fn descriptor_length(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The total size in floats of the HoG descriptor with these dimensions.\n","sig":null,"attributes":[{"value":"/ The total size in floats of the HoG descriptor with these dimensions.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":290114,"byte_end":290187,"line_start":136,"line_end":136,"column_start":5,"column_end":78}}]},{"kind":"Function","id":{"krate":0,"index":1425},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":292261,"byte_end":292264,"line_start":191,"line_end":191,"column_start":8,"column_end":11},"name":"hog","qualname":"::hog::hog","value":"pub fn hog(&GrayImage, HogOptions) -> Result<Vec<f32>, String>","parent":null,"children":[],"decl_id":null,"docs":" Computes the HoG descriptor of an image, or None if the provided\n options are incompatible with the image size.\n","sig":null,"attributes":[{"value":"/ Computes the HoG descriptor of an image, or None if the provided","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":292047,"byte_end":292115,"line_start":188,"line_end":188,"column_start":1,"column_end":69}},{"value":"/ options are incompatible with the image size.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":292116,"byte_end":292165,"line_start":189,"line_end":189,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":1430},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":294633,"byte_end":294648,"line_start":255,"line_end":255,"column_start":8,"column_end":23},"name":"cell_histograms","qualname":"::hog::cell_histograms","value":"pub fn cell_histograms(&GrayImage, HogSpec) -> Array3d<f32>","parent":null,"children":[],"decl_id":null,"docs":" Computes orientation histograms for each cell of an image. Assumes that\n the provided dimensions are valid.\n","sig":null,"attributes":[{"value":"/ Computes orientation histograms for each cell of an image. Assumes that","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":294511,"byte_end":294586,"line_start":253,"line_end":253,"column_start":1,"column_end":76}},{"value":"/ the provided dimensions are valid.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":294587,"byte_end":294625,"line_start":254,"line_end":254,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":1441},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":298762,"byte_end":298778,"line_start":371,"line_end":371,"column_start":8,"column_end":24},"name":"render_hist_grid","qualname":"::hog::render_hist_grid","value":"pub fn render_hist_grid(u32, &View3d<, f32>, bool) -> Image<Luma<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Visualises an array of orientation histograms.\n The dimensions of the provided Array3d are orientation bucket,\n horizontal location of the cell, then vertical location of the cell.\n Note that we ignore block-level aggregation or normalisation here.\n Each rendered star has side length `star_side`, so the image will have\n width grid.lengths[1] * `star_side` and height grid.lengths[2] * `star_side`.\n","sig":null,"attributes":[{"value":"/ Visualises an array of orientation histograms.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":298336,"byte_end":298386,"line_start":365,"line_end":365,"column_start":1,"column_end":51}},{"value":"/ The dimensions of the provided Array3d are orientation bucket,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":298387,"byte_end":298453,"line_start":366,"line_end":366,"column_start":1,"column_end":67}},{"value":"/ horizontal location of the cell, then vertical location of the cell.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":298454,"byte_end":298526,"line_start":367,"line_end":367,"column_start":1,"column_end":73}},{"value":"/ Note that we ignore block-level aggregation or normalisation here.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":298527,"byte_end":298597,"line_start":368,"line_end":368,"column_start":1,"column_end":71}},{"value":"/ Each rendered star has side length `star_side`, so the image will have","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":298598,"byte_end":298672,"line_start":369,"line_end":369,"column_start":1,"column_end":75}},{"value":"/ width grid.lengths[1] * `star_side` and height grid.lengths[2] * `star_side`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":298673,"byte_end":298754,"line_start":370,"line_end":370,"column_start":1,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":1452},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":301145,"byte_end":301152,"line_start":435,"line_end":435,"column_start":12,"column_end":19},"name":"Array3d","qualname":"::hog::Array3d","value":"Array3d {  }","parent":null,"children":[{"krate":0,"index":1454},{"krate":0,"index":1455}],"decl_id":null,"docs":" A 3d array that owns its data.\n","sig":null,"attributes":[{"value":"/ A 3d array that owns its data.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":301099,"byte_end":301133,"line_start":434,"line_end":434,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":1457},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":301354,"byte_end":301360,"line_start":443,"line_end":443,"column_start":12,"column_end":18},"name":"View3d","qualname":"::hog::View3d","value":"View3d {  }","parent":null,"children":[{"krate":0,"index":1460},{"krate":0,"index":1461}],"decl_id":null,"docs":" A view into a 3d array.\n","sig":null,"attributes":[{"value":"/ A view into a 3d array.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":301315,"byte_end":301342,"line_start":442,"line_end":442,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1467},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":301832,"byte_end":301840,"line_start":458,"line_end":458,"column_start":12,"column_end":20},"name":"view_mut","qualname":"<Array3d<T>>::view_mut","value":"pub fn view_mut(&mut Self) -> View3d<, T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a 3d view of the data.\n","sig":null,"attributes":[{"value":"/ Provides a 3d view of the data.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":301785,"byte_end":301820,"line_start":457,"line_end":457,"column_start":5,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":1481},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hough","qualname":"::hough","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","parent":null,"children":[{"krate":0,"index":1482},{"krate":0,"index":1485},{"krate":0,"index":1488},{"krate":0,"index":1491},{"krate":0,"index":1492},{"krate":0,"index":1495},{"krate":0,"index":1498},{"krate":0,"index":1501},{"krate":0,"index":1504},{"krate":0,"index":1505},{"krate":0,"index":1507},{"krate":0,"index":1510},{"krate":0,"index":2545},{"krate":0,"index":2548},{"krate":0,"index":2549},{"krate":0,"index":2551},{"krate":0,"index":2553},{"krate":0,"index":2554},{"krate":0,"index":2557},{"krate":0,"index":2560},{"krate":0,"index":2561},{"krate":0,"index":2563},{"krate":0,"index":2565},{"krate":0,"index":2566},{"krate":0,"index":2569},{"krate":0,"index":2570},{"krate":0,"index":1513},{"krate":0,"index":1515},{"krate":0,"index":1517},{"krate":0,"index":1519},{"krate":0,"index":1521}],"decl_id":null,"docs":" Line detection via the [Hough transform].","sig":null,"attributes":[{"value":"/ Line detection via the [Hough transform].","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":309111,"byte_end":309156,"line_start":1,"line_end":1,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":309157,"byte_end":309160,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ [Hough transform]: https://en.wikipedia.org/wiki/Hough_transform","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":309161,"byte_end":309229,"line_start":3,"line_end":3,"column_start":1,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":2545},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":309540,"byte_end":309549,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"name":"PolarLine","qualname":"::hough::PolarLine","value":"PolarLine { r, angle_in_degrees }","parent":null,"children":[{"krate":0,"index":2546},{"krate":0,"index":2547}],"decl_id":null,"docs":" A detected line, in polar coordinates.\n","sig":null,"attributes":[{"value":"/ A detected line, in polar coordinates.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":309445,"byte_end":309487,"line_start":11,"line_end":11,"column_start":1,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":2546},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":309648,"byte_end":309649,"line_start":15,"line_end":15,"column_start":9,"column_end":10},"name":"r","qualname":"::hough::PolarLine::r","value":"f32","parent":{"krate":0,"index":2545},"children":[],"decl_id":null,"docs":" Signed distance of the line from the origin (top-left of the image), in pixels.\n","sig":null,"attributes":[{"value":"/ Signed distance of the line from the origin (top-left of the image), in pixels.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":309556,"byte_end":309639,"line_start":14,"line_end":14,"column_start":5,"column_end":88}}]},{"kind":"Field","id":{"krate":0,"index":2547},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":309766,"byte_end":309782,"line_start":18,"line_end":18,"column_start":9,"column_end":25},"name":"angle_in_degrees","qualname":"::hough::PolarLine::angle_in_degrees","value":"u32","parent":{"krate":0,"index":2545},"children":[],"decl_id":null,"docs":" Clockwise angle in degrees between the x-axis and the line.\n Always between 0 and 180.\n","sig":null,"attributes":[{"value":"/ Clockwise angle in degrees between the x-axis and the line.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":309660,"byte_end":309723,"line_start":16,"line_end":16,"column_start":5,"column_end":68}},{"value":"/ Always between 0 and 180.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":309728,"byte_end":309757,"line_start":17,"line_end":17,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":2557},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":309886,"byte_end":309906,"line_start":23,"line_end":23,"column_start":12,"column_end":32},"name":"LineDetectionOptions","qualname":"::hough::LineDetectionOptions","value":"LineDetectionOptions { vote_threshold, suppression_radius }","parent":null,"children":[{"krate":0,"index":2558},{"krate":0,"index":2559}],"decl_id":null,"docs":" Options for Hough line detection.\n","sig":null,"attributes":[{"value":"/ Options for Hough line detection.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":309792,"byte_end":309829,"line_start":21,"line_end":21,"column_start":1,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":2558},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":309976,"byte_end":309990,"line_start":25,"line_end":25,"column_start":9,"column_end":23},"name":"vote_threshold","qualname":"::hough::LineDetectionOptions::vote_threshold","value":"u32","parent":{"krate":0,"index":2557},"children":[],"decl_id":null,"docs":" Number of votes required to be detected as a line.\n","sig":null,"attributes":[{"value":"/ Number of votes required to be detected as a line.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":309913,"byte_end":309967,"line_start":24,"line_end":24,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":2559},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":310307,"byte_end":310325,"line_start":30,"line_end":30,"column_start":9,"column_end":27},"name":"suppression_radius","qualname":"::hough::LineDetectionOptions::suppression_radius","value":"u32","parent":{"krate":0,"index":2557},"children":[],"decl_id":null,"docs":" Non-maxima suppression is applied to accumulator buckets before\n returning lines. Only lines which have the greatest vote in the\n block centred on them of side length `2 * suppression_radius + 1`\n are returned. Set to `0` if you don't want to apply non-maxima suppression.\n","sig":null,"attributes":[{"value":"/ Non-maxima suppression is applied to accumulator buckets before","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":310001,"byte_end":310068,"line_start":26,"line_end":26,"column_start":5,"column_end":72}},{"value":"/ returning lines. Only lines which have the greatest vote in the","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":310073,"byte_end":310140,"line_start":27,"line_end":27,"column_start":5,"column_end":72}},{"value":"/ block centred on them of side length `2 * suppression_radius + 1`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":310145,"byte_end":310214,"line_start":28,"line_end":28,"column_start":5,"column_end":74}},{"value":"/ are returned. Set to `0` if you don't want to apply non-maxima suppression.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":310219,"byte_end":310298,"line_start":29,"line_end":29,"column_start":5,"column_end":84}}]},{"kind":"Function","id":{"krate":0,"index":1513},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":310578,"byte_end":310590,"line_start":39,"line_end":39,"column_start":8,"column_end":20},"name":"detect_lines","qualname":"::hough::detect_lines","value":"pub fn detect_lines(&GrayImage, LineDetectionOptions) -> Vec<PolarLine>","parent":null,"children":[],"decl_id":null,"docs":" Detects lines in a binary input image using the Hough transform.","sig":null,"attributes":[{"value":"/ Detects lines in a binary input image using the Hough transform.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":310335,"byte_end":310403,"line_start":33,"line_end":33,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":310404,"byte_end":310407,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Points are considered to be in the foreground (and thus vote for lines)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":310408,"byte_end":310483,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"/ if their intensity is non-zero.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":310484,"byte_end":310519,"line_start":36,"line_end":36,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":310520,"byte_end":310523,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ See ./examples/hough.rs for example usage.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":310524,"byte_end":310570,"line_start":38,"line_end":38,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":1515},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":312665,"byte_end":312681,"line_start":99,"line_end":99,"column_start":8,"column_end":24},"name":"draw_polar_lines","qualname":"::hough::draw_polar_lines","value":"pub fn draw_polar_lines<P>(&Image<P>, &[PolarLine], P) -> Image<P> where\nP: Pixel + 'static","parent":null,"children":[],"decl_id":null,"docs":" Draws each element of `lines` on `image` in the provided `color`.","sig":null,"attributes":[{"value":"/ Draws each element of `lines` on `image` in the provided `color`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":312537,"byte_end":312606,"line_start":96,"line_end":96,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":312607,"byte_end":312610,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ See ./examples/hough.rs for example usage.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":312611,"byte_end":312657,"line_start":98,"line_end":98,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":1517},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":313000,"byte_end":313020,"line_start":111,"line_end":111,"column_start":8,"column_end":28},"name":"draw_polar_lines_mut","qualname":"::hough::draw_polar_lines_mut","value":"pub fn draw_polar_lines_mut<P>(&mut Image<P>, &[PolarLine], P) where\nP: Pixel + 'static","parent":null,"children":[],"decl_id":null,"docs":" Draws each element of `lines` on `image` in the provided `color`.","sig":null,"attributes":[{"value":"/ Draws each element of `lines` on `image` in the provided `color`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":312872,"byte_end":312941,"line_start":108,"line_end":108,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":312942,"byte_end":312945,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ See ./examples/hough.rs for example usage.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hough.rs","byte_start":312946,"byte_end":312992,"line_start":110,"line_end":110,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":1522},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"integral_image","qualname":"::integral_image","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","parent":null,"children":[{"krate":0,"index":1523},{"krate":0,"index":1526},{"krate":0,"index":1527},{"krate":0,"index":1530},{"krate":0,"index":1533},{"krate":0,"index":1534},{"krate":0,"index":1537},{"krate":0,"index":1540},{"krate":0,"index":1541},{"krate":0,"index":1543},{"krate":0,"index":1546},{"krate":0,"index":1549},{"krate":0,"index":1550},{"krate":0,"index":1552},{"krate":0,"index":1553},{"krate":0,"index":1555},{"krate":0,"index":1558},{"krate":0,"index":1561},{"krate":0,"index":1564},{"krate":0,"index":1567},{"krate":0,"index":1572},{"krate":0,"index":1579},{"krate":0,"index":1586},{"krate":0,"index":1593},{"krate":0,"index":1595},{"krate":0,"index":1596},{"krate":0,"index":1597}],"decl_id":null,"docs":" Functions for computing [integral images](https://en.wikipedia.org/wiki/Summed_area_table)\n and running sums of rows and columns.\n","sig":null,"attributes":[{"value":"/ Functions for computing [integral images](https://en.wikipedia.org/wiki/Summed_area_table)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":326465,"byte_end":326559,"line_start":1,"line_end":1,"column_start":1,"column_end":95}},{"value":"/ and running sums of rows and columns.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":326560,"byte_end":326601,"line_start":2,"line_end":2,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":1558},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":328439,"byte_end":328453,"line_start":50,"line_end":50,"column_start":8,"column_end":22},"name":"integral_image","qualname":"::integral_image::integral_image","value":"pub fn integral_image<P, T>(&Image<P>) -> Image<ChannelMap<P, T>> where\nP: Pixel<Subpixel = u8> + WithChannel<T> + 'static, T: From<u8> + Primitive +\nAddAssign + 'static","parent":null,"children":[],"decl_id":null,"docs":" Computes the 2d running sum of an image. Channels are summed independently.","sig":null,"attributes":[{"value":"/ Computes the 2d running sum of an image. Channels are summed independently.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":326780,"byte_end":326859,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":326860,"byte_end":326863,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ An integral image I has width and height one greater than its source image F,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":326864,"byte_end":326945,"line_start":11,"line_end":11,"column_start":1,"column_end":82}},{"value":"/ and is defined by I(x, y) = sum of F(x', y') for x' < x, y' < y, i.e. each pixel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":326946,"byte_end":327030,"line_start":12,"line_end":12,"column_start":1,"column_end":85}},{"value":"/ in the integral image contains the sum of the pixel intensities of all input pixels","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":327031,"byte_end":327118,"line_start":13,"line_end":13,"column_start":1,"column_end":88}},{"value":"/ that are strictly above it and strictly to its left. In particular, the left column","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":327119,"byte_end":327206,"line_start":14,"line_end":14,"column_start":1,"column_end":88}},{"value":"/ and top row of an integral image are all 0, and the value of the bottom right pixel of","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":327207,"byte_end":327297,"line_start":15,"line_end":15,"column_start":1,"column_end":91}},{"value":"/ an integral image is equal to the sum of all pixels in the source image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":327298,"byte_end":327374,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":327375,"byte_end":327378,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Integral images have the helpful property of allowing us to","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":327379,"byte_end":327442,"line_start":18,"line_end":18,"column_start":1,"column_end":64}},{"value":"/ compute the sum of pixel intensities in a rectangular region of an image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":327443,"byte_end":327519,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ in constant time. Specifically, given a rectangle [l, r] * [t, b] in F,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":327520,"byte_end":327595,"line_start":20,"line_end":20,"column_start":1,"column_end":76}},{"value":"/ the sum of the pixels in this rectangle is","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":327596,"byte_end":327642,"line_start":21,"line_end":21,"column_start":1,"column_end":47}},{"value":"/ I(r + 1, b + 1) - I(r + 1, t) - I(l, b + 1) + I(l, t).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":327643,"byte_end":327701,"line_start":22,"line_end":22,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":327702,"byte_end":327705,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":327706,"byte_end":327720,"line_start":24,"line_end":24,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":327721,"byte_end":327728,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":327729,"byte_end":327754,"line_start":26,"line_end":26,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":327755,"byte_end":327773,"line_start":27,"line_end":27,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":327774,"byte_end":327803,"line_start":28,"line_end":28,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":327804,"byte_end":327821,"line_start":29,"line_end":29,"column_start":1,"column_end":18}},{"value":"/ use imageproc::integral_image::{integral_image, sum_image_pixels};","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":327822,"byte_end":327892,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":327893,"byte_end":327896,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":327897,"byte_end":327925,"line_start":32,"line_end":32,"column_start":1,"column_end":29}},{"value":"/     1, 2, 3;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":327926,"byte_end":327942,"line_start":33,"line_end":33,"column_start":1,"column_end":17}},{"value":"/     4, 5, 6);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":327943,"byte_end":327960,"line_start":34,"line_end":34,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":327961,"byte_end":327964,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ let integral = gray_image!(type: u32,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":327965,"byte_end":328006,"line_start":36,"line_end":36,"column_start":1,"column_end":42}},{"value":"/     0,  0,  0,  0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":328007,"byte_end":328029,"line_start":37,"line_end":37,"column_start":1,"column_end":23}},{"value":"/     0,  1,  3,  6;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":328030,"byte_end":328052,"line_start":38,"line_end":38,"column_start":1,"column_end":23}},{"value":"/     0,  5, 12, 21);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":328053,"byte_end":328076,"line_start":39,"line_end":39,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":328077,"byte_end":328080,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(integral_image::<_, u32>(&image), integral);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":328081,"byte_end":328147,"line_start":41,"line_end":41,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":328148,"byte_end":328151,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ // Compute the sum of all pixels in the right two columns","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":328152,"byte_end":328213,"line_start":43,"line_end":43,"column_start":1,"column_end":62}},{"value":"/ assert_eq!(sum_image_pixels(&integral, 1, 0, 2, 1)[0], 2 + 3 + 5 + 6);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":328214,"byte_end":328288,"line_start":44,"line_end":44,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":328289,"byte_end":328292,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ // Compute the sum of all pixels in the top row","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":328293,"byte_end":328344,"line_start":46,"line_end":46,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(sum_image_pixels(&integral, 0, 0, 2, 0)[0], 1 + 2 + 3);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":328345,"byte_end":328415,"line_start":47,"line_end":47,"column_start":1,"column_end":71}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":328416,"byte_end":328423,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":328424,"byte_end":328431,"line_start":49,"line_end":49,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1561},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":329678,"byte_end":329700,"line_start":89,"line_end":89,"column_start":8,"column_end":30},"name":"integral_squared_image","qualname":"::integral_image::integral_squared_image","value":"pub fn integral_squared_image<P, T>(&Image<P>) -> Image<ChannelMap<P, T>>\nwhere P: Pixel<Subpixel = u8> + WithChannel<T> + 'static, T: From<u8> +\nPrimitive + AddAssign + 'static","parent":null,"children":[],"decl_id":null,"docs":" Computes the 2d running sum of the squares of the intensities in an image. Channels are summed\n independently.","sig":null,"attributes":[{"value":"/ Computes the 2d running sum of the squares of the intensities in an image. Channels are summed","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":328661,"byte_end":328759,"line_start":58,"line_end":58,"column_start":1,"column_end":99}},{"value":"/ independently.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":328760,"byte_end":328778,"line_start":59,"line_end":59,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":328779,"byte_end":328782,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ See the [`integral_image`](fn.integral_image.html) documentation for more information on integral images.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":328783,"byte_end":328892,"line_start":61,"line_end":61,"column_start":1,"column_end":110}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":328893,"byte_end":328896,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":328897,"byte_end":328911,"line_start":63,"line_end":63,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":328912,"byte_end":328919,"line_start":64,"line_end":64,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":328920,"byte_end":328945,"line_start":65,"line_end":65,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":328946,"byte_end":328964,"line_start":66,"line_end":66,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":328965,"byte_end":328994,"line_start":67,"line_end":67,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":328995,"byte_end":329012,"line_start":68,"line_end":68,"column_start":1,"column_end":18}},{"value":"/ use imageproc::integral_image::{integral_squared_image, sum_image_pixels};","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":329013,"byte_end":329091,"line_start":69,"line_end":69,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":329092,"byte_end":329095,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":329096,"byte_end":329124,"line_start":71,"line_end":71,"column_start":1,"column_end":29}},{"value":"/     1, 2, 3;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":329125,"byte_end":329141,"line_start":72,"line_end":72,"column_start":1,"column_end":17}},{"value":"/     4, 5, 6);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":329142,"byte_end":329159,"line_start":73,"line_end":73,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":329160,"byte_end":329163,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ let integral = gray_image!(type: u32,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":329164,"byte_end":329205,"line_start":75,"line_end":75,"column_start":1,"column_end":42}},{"value":"/     0,  0,  0,  0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":329206,"byte_end":329228,"line_start":76,"line_end":76,"column_start":1,"column_end":23}},{"value":"/     0,  1,  5, 14;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":329229,"byte_end":329251,"line_start":77,"line_end":77,"column_start":1,"column_end":23}},{"value":"/     0, 17, 46, 91);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":329252,"byte_end":329275,"line_start":78,"line_end":78,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":329276,"byte_end":329279,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(integral_squared_image::<_, u32>(&image), integral);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":329280,"byte_end":329354,"line_start":80,"line_end":80,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":329355,"byte_end":329358,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ // Compute the sum of the squares of all pixels in the right two columns","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":329359,"byte_end":329435,"line_start":82,"line_end":82,"column_start":1,"column_end":77}},{"value":"/ assert_eq!(sum_image_pixels(&integral, 1, 0, 2, 1)[0], 4 + 9 + 25 + 36);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":329436,"byte_end":329512,"line_start":83,"line_end":83,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":329513,"byte_end":329516,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ // Compute the sum of the squares of all pixels in the top row","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":329517,"byte_end":329583,"line_start":85,"line_end":85,"column_start":1,"column_end":67}},{"value":"/ assert_eq!(sum_image_pixels(&integral, 0, 0, 2, 0)[0], 1 + 4 + 9);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":329584,"byte_end":329654,"line_start":86,"line_end":86,"column_start":1,"column_end":71}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":329655,"byte_end":329662,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":329663,"byte_end":329670,"line_start":88,"line_end":88,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":1567},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":332376,"byte_end":332385,"line_start":151,"line_end":151,"column_start":11,"column_end":20},"name":"ArrayData","qualname":"::integral_image::ArrayData","value":"ArrayData","parent":null,"children":[{"krate":0,"index":1568},{"krate":0,"index":1569},{"krate":0,"index":1570},{"krate":0,"index":1571}],"decl_id":null,"docs":" Hack to get around lack of const generics. See comment on `sum_image_pixels`.\n","sig":null,"attributes":[{"value":"/ Hack to get around lack of const generics. See comment on `sum_image_pixels`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":332284,"byte_end":332365,"line_start":150,"line_end":150,"column_start":1,"column_end":82}}]},{"kind":"Type","id":{"krate":0,"index":1568},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":332496,"byte_end":332504,"line_start":154,"line_end":154,"column_start":10,"column_end":18},"name":"DataType","qualname":"::integral_image::ArrayData::DataType","value":"type DataType;","parent":{"krate":0,"index":1567},"children":[],"decl_id":null,"docs":" The type of the data for this array.\n e.g. `[T; 1]` for `Luma`, `[T; 3]` for `Rgb`.\n","sig":null,"attributes":[{"value":"/ The type of the data for this array.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":332392,"byte_end":332432,"line_start":152,"line_end":152,"column_start":5,"column_end":45}},{"value":"/ e.g. `[T; 1]` for `Luma`, `[T; 3]` for `Rgb`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":332437,"byte_end":332486,"line_start":153,"line_end":153,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1569},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":332579,"byte_end":332583,"line_start":157,"line_end":157,"column_start":8,"column_end":12},"name":"data","qualname":"::integral_image::ArrayData::data","value":"pub fn data(&Self) -> Self::DataType","parent":{"krate":0,"index":1567},"children":[],"decl_id":null,"docs":" Get the data from this pixel as a constant length array.\n","sig":null,"attributes":[{"value":"/ Get the data from this pixel as a constant length array.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":332511,"byte_end":332571,"line_start":156,"line_end":156,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1570},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":332675,"byte_end":332678,"line_start":160,"line_end":160,"column_start":8,"column_end":11},"name":"add","qualname":"::integral_image::ArrayData::add","value":"pub fn add(Self::DataType, Self::DataType) -> Self::DataType","parent":{"krate":0,"index":1567},"children":[],"decl_id":null,"docs":" Add the elements of two data arrays elementwise.\n","sig":null,"attributes":[{"value":"/ Add the elements of two data arrays elementwise.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":332615,"byte_end":332667,"line_start":159,"line_end":159,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1571},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":332812,"byte_end":332815,"line_start":163,"line_end":163,"column_start":8,"column_end":11},"name":"sub","qualname":"::integral_image::ArrayData::sub","value":"pub fn sub(Self::DataType, Self::DataType) -> Self::DataType","parent":{"krate":0,"index":1567},"children":[],"decl_id":null,"docs":" Subtract the elements of two data arrays elementwise.\n","sig":null,"attributes":[{"value":"/ Subtract the elements of two data arrays elementwise.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":332747,"byte_end":332804,"line_start":162,"line_end":162,"column_start":5,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":1593},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":335022,"byte_end":335038,"line_start":238,"line_end":238,"column_start":8,"column_end":24},"name":"sum_image_pixels","qualname":"::integral_image::sum_image_pixels","value":"pub fn sum_image_pixels<P>(&Image<P>, u32, u32, u32, u32) -> P::DataType where\nP: Pixel + ArrayData + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Sums the pixels in positions [left, right] * [top, bottom] in F, where `integral_image` is the\n integral image of F.","sig":null,"attributes":[{"value":"/ Sums the pixels in positions [left, right] * [top, bottom] in F, where `integral_image` is the","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":334441,"byte_end":334539,"line_start":229,"line_end":229,"column_start":1,"column_end":99}},{"value":"/ integral image of F.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":334540,"byte_end":334564,"line_start":230,"line_end":230,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":334565,"byte_end":334568,"line_start":231,"line_end":231,"column_start":1,"column_end":4}},{"value":"/ The of `ArrayData` here is due to lack of const generics. This library contains","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":334569,"byte_end":334652,"line_start":232,"line_end":232,"column_start":1,"column_end":84}},{"value":"/ implementations of `ArrayData` for `Luma`, `Rgb` and `Rgba` for any element type `T` that","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":334653,"byte_end":334746,"line_start":233,"line_end":233,"column_start":1,"column_end":94}},{"value":"/ implements `Primitive`. In that case, this function returns `[T; 1]` for an image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":334747,"byte_end":334832,"line_start":234,"line_end":234,"column_start":1,"column_end":86}},{"value":"/ whose pixels are of type `Luma`, `[T; 3]` for `Rgb` pixels and `[T; 4]` for `Rgba` pixels.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":334833,"byte_end":334927,"line_start":235,"line_end":235,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":334928,"byte_end":334931,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ See the [`integral_image`](fn.integral_image.html) documentation for examples.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":334932,"byte_end":335014,"line_start":237,"line_end":237,"column_start":1,"column_end":83}}]},{"kind":"Function","id":{"krate":0,"index":1595},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":336782,"byte_end":336790,"line_start":291,"line_end":291,"column_start":8,"column_end":16},"name":"variance","qualname":"::integral_image::variance","value":"pub fn variance(&Image<Luma<u32>>, &Image<Luma<u32>>, u32, u32, u32, u32)\n-> f64","parent":null,"children":[],"decl_id":null,"docs":" Computes the variance of [left, right] * [top, bottom] in F, where `integral_image` is the\n integral image of F and `integral_squared_image` is the integral image of the squares of the\n pixels in F.","sig":null,"attributes":[{"value":"/ Computes the variance of [left, right] * [top, bottom] in F, where `integral_image` is the","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":335702,"byte_end":335796,"line_start":259,"line_end":259,"column_start":1,"column_end":95}},{"value":"/ integral image of F and `integral_squared_image` is the integral image of the squares of the","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":335797,"byte_end":335893,"line_start":260,"line_end":260,"column_start":1,"column_end":97}},{"value":"/ pixels in F.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":335894,"byte_end":335910,"line_start":261,"line_end":261,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":335911,"byte_end":335914,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"/ See the [`integral_image`](fn.integral_image.html) documentation for more information on integral images.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":335915,"byte_end":336024,"line_start":263,"line_end":263,"column_start":1,"column_end":110}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":336025,"byte_end":336028,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/# Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":336029,"byte_end":336042,"line_start":265,"line_end":265,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":336043,"byte_end":336050,"line_start":266,"line_end":266,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":336051,"byte_end":336076,"line_start":267,"line_end":267,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":336077,"byte_end":336095,"line_start":268,"line_end":268,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":336096,"byte_end":336125,"line_start":269,"line_end":269,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":336126,"byte_end":336143,"line_start":270,"line_end":270,"column_start":1,"column_end":18}},{"value":"/ use std::f64;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":336144,"byte_end":336161,"line_start":271,"line_end":271,"column_start":1,"column_end":18}},{"value":"/ use imageproc::integral_image::{integral_image, integral_squared_image, variance};","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":336162,"byte_end":336248,"line_start":272,"line_end":272,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":336249,"byte_end":336252,"line_start":273,"line_end":273,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":336253,"byte_end":336281,"line_start":274,"line_end":274,"column_start":1,"column_end":29}},{"value":"/     1, 2, 3;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":336282,"byte_end":336298,"line_start":275,"line_end":275,"column_start":1,"column_end":17}},{"value":"/     4, 5, 6);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":336299,"byte_end":336316,"line_start":276,"line_end":276,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":336317,"byte_end":336320,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ let integral = integral_image(&image);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":336321,"byte_end":336363,"line_start":278,"line_end":278,"column_start":1,"column_end":43}},{"value":"/ let integral_squared = integral_squared_image(&image);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":336364,"byte_end":336422,"line_start":279,"line_end":279,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":336423,"byte_end":336426,"line_start":280,"line_end":280,"column_start":1,"column_end":4}},{"value":"/ // Compute the variance of the pixels in the right two columns","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":336427,"byte_end":336493,"line_start":281,"line_end":281,"column_start":1,"column_end":67}},{"value":"/ let mean: f64 = (2.0 + 3.0 + 5.0 + 6.0) / 4.0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":336494,"byte_end":336544,"line_start":282,"line_end":282,"column_start":1,"column_end":51}},{"value":"/ let var = ((2.0 - mean).powi(2)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":336545,"byte_end":336580,"line_start":283,"line_end":283,"column_start":1,"column_end":36}},{"value":"/     + (3.0 - mean).powi(2)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":336581,"byte_end":336611,"line_start":284,"line_end":284,"column_start":1,"column_end":31}},{"value":"/     + (5.0 - mean).powi(2)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":336612,"byte_end":336642,"line_start":285,"line_end":285,"column_start":1,"column_end":31}},{"value":"/     + (6.0 - mean).powi(2)) / 4.0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":336643,"byte_end":336681,"line_start":286,"line_end":286,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":336682,"byte_end":336685,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(variance(&integral, &integral_squared, 1, 0, 2, 1), var);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":336686,"byte_end":336758,"line_start":288,"line_end":288,"column_start":1,"column_end":73}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":336759,"byte_end":336766,"line_start":289,"line_end":289,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":336767,"byte_end":336774,"line_start":290,"line_end":290,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1596},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":338197,"byte_end":338212,"line_start":336,"line_end":336,"column_start":8,"column_end":23},"name":"row_running_sum","qualname":"::integral_image::row_running_sum","value":"pub fn row_running_sum(&GrayImage, u32, &mut [u32], u32)","parent":null,"children":[],"decl_id":null,"docs":" Computes the running sum of one row of image, padded\n at the beginning and end. The padding is by continuity.\n Takes a reference to buffer so that this can be reused\n for all rows in an image.","sig":null,"attributes":[{"value":"/ Computes the running sum of one row of image, padded","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":337334,"byte_end":337390,"line_start":306,"line_end":306,"column_start":1,"column_end":57}},{"value":"/ at the beginning and end. The padding is by continuity.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":337391,"byte_end":337450,"line_start":307,"line_end":307,"column_start":1,"column_end":60}},{"value":"/ Takes a reference to buffer so that this can be reused","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":337451,"byte_end":337509,"line_start":308,"line_end":308,"column_start":1,"column_end":59}},{"value":"/ for all rows in an image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":337510,"byte_end":337539,"line_start":309,"line_end":309,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":337540,"byte_end":337543,"line_start":310,"line_end":310,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":337544,"byte_end":337556,"line_start":311,"line_end":311,"column_start":1,"column_end":13}},{"value":"/ - If `buffer.len() < 2 * padding + image.width()`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":337557,"byte_end":337611,"line_start":312,"line_end":312,"column_start":1,"column_end":55}},{"value":"/ - If `row >= image.height()`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":337612,"byte_end":337645,"line_start":313,"line_end":313,"column_start":1,"column_end":34}},{"value":"/ - If `image.width() == 0`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":337646,"byte_end":337676,"line_start":314,"line_end":314,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":337677,"byte_end":337680,"line_start":315,"line_end":315,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":337681,"byte_end":337695,"line_start":316,"line_end":316,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":337696,"byte_end":337703,"line_start":317,"line_end":317,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":337704,"byte_end":337729,"line_start":318,"line_end":318,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":337730,"byte_end":337748,"line_start":319,"line_end":319,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":337749,"byte_end":337778,"line_start":320,"line_end":320,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":337779,"byte_end":337796,"line_start":321,"line_end":321,"column_start":1,"column_end":18}},{"value":"/ use imageproc::integral_image::row_running_sum;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":337797,"byte_end":337848,"line_start":322,"line_end":322,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":337849,"byte_end":337852,"line_start":323,"line_end":323,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":337853,"byte_end":337881,"line_start":324,"line_end":324,"column_start":1,"column_end":29}},{"value":"/     1, 2, 3;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":337882,"byte_end":337898,"line_start":325,"line_end":325,"column_start":1,"column_end":17}},{"value":"/     4, 5, 6);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":337899,"byte_end":337916,"line_start":326,"line_end":326,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":337917,"byte_end":337920,"line_start":327,"line_end":327,"column_start":1,"column_end":4}},{"value":"/ // Buffer has length two greater than image width, hence padding of 1","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":337921,"byte_end":337994,"line_start":328,"line_end":328,"column_start":1,"column_end":74}},{"value":"/ let mut buffer = [0; 5];","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":337995,"byte_end":338023,"line_start":329,"line_end":329,"column_start":1,"column_end":29}},{"value":"/ row_running_sum(&image, 0, &mut buffer, 1);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":338024,"byte_end":338071,"line_start":330,"line_end":330,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":338072,"byte_end":338075,"line_start":331,"line_end":331,"column_start":1,"column_end":4}},{"value":"/ // The image is padded by continuity on either side","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":338076,"byte_end":338131,"line_start":332,"line_end":332,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(buffer, [1, 2, 4, 7, 10]);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":338132,"byte_end":338173,"line_start":333,"line_end":333,"column_start":1,"column_end":42}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":338174,"byte_end":338181,"line_start":334,"line_end":334,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":338182,"byte_end":338189,"line_start":335,"line_end":335,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1597},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":340051,"byte_end":340069,"line_start":401,"line_end":401,"column_start":8,"column_end":26},"name":"column_running_sum","qualname":"::integral_image::column_running_sum","value":"pub fn column_running_sum(&GrayImage, u32, &mut [u32], u32)","parent":null,"children":[],"decl_id":null,"docs":" Computes the running sum of one column of image, padded\n at the top and bottom. The padding is by continuity.\n Takes a reference to buffer so that this can be reused\n for all columns in an image.","sig":null,"attributes":[{"value":"/ Computes the running sum of one column of image, padded","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":339163,"byte_end":339222,"line_start":370,"line_end":370,"column_start":1,"column_end":60}},{"value":"/ at the top and bottom. The padding is by continuity.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":339223,"byte_end":339279,"line_start":371,"line_end":371,"column_start":1,"column_end":57}},{"value":"/ Takes a reference to buffer so that this can be reused","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":339280,"byte_end":339338,"line_start":372,"line_end":372,"column_start":1,"column_end":59}},{"value":"/ for all columns in an image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":339339,"byte_end":339371,"line_start":373,"line_end":373,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":339372,"byte_end":339375,"line_start":374,"line_end":374,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":339376,"byte_end":339388,"line_start":375,"line_end":375,"column_start":1,"column_end":13}},{"value":"/ - If `buffer.len() < 2 * padding + image.height()`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":339389,"byte_end":339444,"line_start":376,"line_end":376,"column_start":1,"column_end":56}},{"value":"/ - If `column >= image.width()`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":339445,"byte_end":339480,"line_start":377,"line_end":377,"column_start":1,"column_end":36}},{"value":"/ - If `image.height() == 0`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":339481,"byte_end":339512,"line_start":378,"line_end":378,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":339513,"byte_end":339516,"line_start":379,"line_end":379,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":339517,"byte_end":339531,"line_start":380,"line_end":380,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":339532,"byte_end":339539,"line_start":381,"line_end":381,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":339540,"byte_end":339565,"line_start":382,"line_end":382,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":339566,"byte_end":339584,"line_start":383,"line_end":383,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":339585,"byte_end":339614,"line_start":384,"line_end":384,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":339615,"byte_end":339632,"line_start":385,"line_end":385,"column_start":1,"column_end":18}},{"value":"/ use imageproc::integral_image::column_running_sum;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":339633,"byte_end":339687,"line_start":386,"line_end":386,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":339688,"byte_end":339691,"line_start":387,"line_end":387,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":339692,"byte_end":339720,"line_start":388,"line_end":388,"column_start":1,"column_end":29}},{"value":"/     1, 4;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":339721,"byte_end":339734,"line_start":389,"line_end":389,"column_start":1,"column_end":14}},{"value":"/     2, 5;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":339735,"byte_end":339748,"line_start":390,"line_end":390,"column_start":1,"column_end":14}},{"value":"/     3, 6);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":339749,"byte_end":339763,"line_start":391,"line_end":391,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":339764,"byte_end":339767,"line_start":392,"line_end":392,"column_start":1,"column_end":4}},{"value":"/ // Buffer has length two greater than image height, hence padding of 1","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":339768,"byte_end":339842,"line_start":393,"line_end":393,"column_start":1,"column_end":75}},{"value":"/ let mut buffer = [0; 5];","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":339843,"byte_end":339871,"line_start":394,"line_end":394,"column_start":1,"column_end":29}},{"value":"/ column_running_sum(&image, 0, &mut buffer, 1);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":339872,"byte_end":339922,"line_start":395,"line_end":395,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":339923,"byte_end":339926,"line_start":396,"line_end":396,"column_start":1,"column_end":4}},{"value":"/ // The image is padded by continuity on top and bottom","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":339927,"byte_end":339985,"line_start":397,"line_end":397,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(buffer, [1, 2, 4, 7, 10]);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":339986,"byte_end":340027,"line_start":398,"line_end":398,"column_start":1,"column_end":42}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":340028,"byte_end":340035,"line_start":399,"line_end":399,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":340036,"byte_end":340043,"line_start":400,"line_end":400,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1598},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"local_binary_patterns","qualname":"::local_binary_patterns","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","parent":null,"children":[{"krate":0,"index":1599},{"krate":0,"index":1600},{"krate":0,"index":1603},{"krate":0,"index":1604},{"krate":0,"index":1606},{"krate":0,"index":1609},{"krate":0,"index":1611},{"krate":0,"index":1612},{"krate":0,"index":1613},{"krate":0,"index":1615}],"decl_id":null,"docs":" Functions for computing [local binary patterns](https://en.wikipedia.org/wiki/Local_binary_patterns).\n","sig":null,"attributes":[{"value":"/ Functions for computing [local binary patterns](https://en.wikipedia.org/wiki/Local_binary_patterns).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347026,"byte_end":347131,"line_start":1,"line_end":1,"column_start":1,"column_end":106}}]},{"kind":"Function","id":{"krate":0,"index":1609},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347997,"byte_end":348017,"line_start":38,"line_end":38,"column_start":8,"column_end":28},"name":"local_binary_pattern","qualname":"::local_binary_patterns::local_binary_pattern","value":"pub fn local_binary_pattern<I>(&I, u32, u32) -> Option<u8> where\nI: GenericImage<Pixel = Luma<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Computes the basic local binary pattern of a pixel, or None\n if it's too close to the image boundary.","sig":null,"attributes":[{"value":"/ Computes the basic local binary pattern of a pixel, or None","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347181,"byte_end":347244,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/ if it's too close to the image boundary.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347245,"byte_end":347289,"line_start":7,"line_end":7,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347290,"byte_end":347293,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ The neighbors of a pixel p are enumerated in the following order:","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347294,"byte_end":347363,"line_start":9,"line_end":9,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347364,"byte_end":347367,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ <pre>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347368,"byte_end":347377,"line_start":11,"line_end":11,"column_start":1,"column_end":10}},{"value":"/ 7  0  1","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347378,"byte_end":347389,"line_start":12,"line_end":12,"column_start":1,"column_end":12}},{"value":"/ 6  p  2","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347390,"byte_end":347401,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"/ 5  4  3","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347402,"byte_end":347413,"line_start":14,"line_end":14,"column_start":1,"column_end":12}},{"value":"/ </pre>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347414,"byte_end":347424,"line_start":15,"line_end":15,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347425,"byte_end":347428,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ The nth most significant bit of the local binary pattern at p is 1","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347429,"byte_end":347499,"line_start":17,"line_end":17,"column_start":1,"column_end":71}},{"value":"/ if p is strictly brighter than the neighbor in position n.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347500,"byte_end":347562,"line_start":18,"line_end":18,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347563,"byte_end":347566,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347567,"byte_end":347581,"line_start":20,"line_end":20,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347582,"byte_end":347589,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347590,"byte_end":347615,"line_start":22,"line_end":22,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347616,"byte_end":347634,"line_start":23,"line_end":23,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347635,"byte_end":347664,"line_start":24,"line_end":24,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347665,"byte_end":347682,"line_start":25,"line_end":25,"column_start":1,"column_end":18}},{"value":"/ use imageproc::local_binary_patterns::local_binary_pattern;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347683,"byte_end":347746,"line_start":26,"line_end":26,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347747,"byte_end":347750,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347751,"byte_end":347779,"line_start":28,"line_end":28,"column_start":1,"column_end":29}},{"value":"/     06, 11, 14;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347780,"byte_end":347799,"line_start":29,"line_end":29,"column_start":1,"column_end":20}},{"value":"/     09, 10, 10;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347800,"byte_end":347819,"line_start":30,"line_end":30,"column_start":1,"column_end":20}},{"value":"/     19, 00, 22);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347820,"byte_end":347840,"line_start":31,"line_end":31,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347841,"byte_end":347844,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let expected = 0b11010000;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347845,"byte_end":347875,"line_start":33,"line_end":33,"column_start":1,"column_end":31}},{"value":"/ let pattern = local_binary_pattern(&image, 1, 1).unwrap();","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347876,"byte_end":347938,"line_start":34,"line_end":34,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(pattern, expected);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347939,"byte_end":347973,"line_start":35,"line_end":35,"column_start":1,"column_end":35}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347974,"byte_end":347981,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":347982,"byte_end":347989,"line_start":37,"line_end":37,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1611},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":350047,"byte_end":350056,"line_start":101,"line_end":101,"column_start":8,"column_end":17},"name":"min_shift","qualname":"::local_binary_patterns::min_shift","value":"pub fn min_shift(u8) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the least value of all rotations of a byte.","sig":null,"attributes":[{"value":"/ Returns the least value of all rotations of a byte.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":349820,"byte_end":349875,"line_start":92,"line_end":92,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":349876,"byte_end":349879,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":349880,"byte_end":349894,"line_start":94,"line_end":94,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":349895,"byte_end":349902,"line_start":95,"line_end":95,"column_start":1,"column_end":8}},{"value":"/ use imageproc::local_binary_patterns::min_shift;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":349903,"byte_end":349955,"line_start":96,"line_end":96,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":349956,"byte_end":349959,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ let byte = 0b10110100;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":349960,"byte_end":349986,"line_start":98,"line_end":98,"column_start":1,"column_end":27}},{"value":"/ assert_eq!(min_shift(byte), 0b00101101);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":349987,"byte_end":350031,"line_start":99,"line_end":99,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":350032,"byte_end":350039,"line_start":100,"line_end":100,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1612},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":350641,"byte_end":350658,"line_start":124,"line_end":124,"column_start":8,"column_end":25},"name":"count_transitions","qualname":"::local_binary_patterns::count_transitions","value":"pub fn count_transitions(u8) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Number of bit transitions in a byte, counting the last and final bits as adjacent.","sig":null,"attributes":[{"value":"/ Number of bit transitions in a byte, counting the last and final bits as adjacent.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":350187,"byte_end":350273,"line_start":109,"line_end":109,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":350274,"byte_end":350277,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":350278,"byte_end":350292,"line_start":111,"line_end":111,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":350293,"byte_end":350300,"line_start":112,"line_end":112,"column_start":1,"column_end":8}},{"value":"/ use imageproc::local_binary_patterns::count_transitions;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":350301,"byte_end":350361,"line_start":113,"line_end":113,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":350362,"byte_end":350365,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ let a = 0b11110000;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":350366,"byte_end":350389,"line_start":115,"line_end":115,"column_start":1,"column_end":24}},{"value":"/ assert_eq!(count_transitions(a), 2);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":350390,"byte_end":350430,"line_start":116,"line_end":116,"column_start":1,"column_end":41}},{"value":"/ let b = 0b00000000;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":350431,"byte_end":350454,"line_start":117,"line_end":117,"column_start":1,"column_end":24}},{"value":"/ assert_eq!(count_transitions(b), 0);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":350455,"byte_end":350495,"line_start":118,"line_end":118,"column_start":1,"column_end":41}},{"value":"/ let c = 0b10011001;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":350496,"byte_end":350519,"line_start":119,"line_end":119,"column_start":1,"column_end":24}},{"value":"/ assert_eq!(count_transitions(c), 4);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":350520,"byte_end":350560,"line_start":120,"line_end":120,"column_start":1,"column_end":41}},{"value":"/ let d = 0b10110010;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":350561,"byte_end":350584,"line_start":121,"line_end":121,"column_start":1,"column_end":24}},{"value":"/ assert_eq!(count_transitions(d), 6);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":350585,"byte_end":350625,"line_start":122,"line_end":122,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":350626,"byte_end":350633,"line_start":123,"line_end":123,"column_start":1,"column_end":8}}]},{"kind":"Static","id":{"krate":0,"index":1613},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":350934,"byte_end":350958,"line_start":131,"line_end":131,"column_start":12,"column_end":36},"name":"UNIFORM_REPRESENTATIVE_2","qualname":"::local_binary_patterns::UNIFORM_REPRESENTATIVE_2","value":"[u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Maps uniform bytes (i.e. those with at most two bit transitions) to their\n least circular shifts, and non-uniform bytes to 10101010 (an arbitrarily chosen\n non-uniform representative).\n","sig":null,"attributes":[{"value":"/ Maps uniform bytes (i.e. those with at most two bit transitions) to their","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":350728,"byte_end":350805,"line_start":128,"line_end":128,"column_start":1,"column_end":78}},{"value":"/ least circular shifts, and non-uniform bytes to 10101010 (an arbitrarily chosen","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":350806,"byte_end":350889,"line_start":129,"line_end":129,"column_start":1,"column_end":84}},{"value":"/ non-uniform representative).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":350890,"byte_end":350922,"line_start":130,"line_end":130,"column_start":1,"column_end":33}}]},{"kind":"Static","id":{"krate":0,"index":1615},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":355032,"byte_end":355041,"line_start":391,"line_end":391,"column_start":12,"column_end":21},"name":"MIN_SHIFT","qualname":"::local_binary_patterns::MIN_SHIFT","value":"[u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Lookup table for the least circular shift of a byte.\n","sig":null,"attributes":[{"value":"/ Lookup table for the least circular shift of a byte.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\local_binary_patterns.rs","byte_start":354964,"byte_end":355020,"line_start":390,"line_end":390,"column_start":1,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":1617},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"map","qualname":"::map","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","parent":null,"children":[{"krate":0,"index":1618},{"krate":0,"index":1619},{"krate":0,"index":1620},{"krate":0,"index":1622},{"krate":0,"index":1623},{"krate":0,"index":1625},{"krate":0,"index":1628},{"krate":0,"index":1631},{"krate":0,"index":1632},{"krate":0,"index":1634},{"krate":0,"index":1635},{"krate":0,"index":1637},{"krate":0,"index":1640},{"krate":0,"index":1643},{"krate":0,"index":1644},{"krate":0,"index":1646},{"krate":0,"index":1647},{"krate":0,"index":1649},{"krate":0,"index":1652},{"krate":0,"index":1655},{"krate":0,"index":1658},{"krate":0,"index":1662},{"krate":0,"index":1666},{"krate":0,"index":1670},{"krate":0,"index":1674},{"krate":0,"index":1678},{"krate":0,"index":1682},{"krate":0,"index":1687},{"krate":0,"index":1692},{"krate":0,"index":1699},{"krate":0,"index":1704},{"krate":0,"index":1708},{"krate":0,"index":1713},{"krate":0,"index":1717},{"krate":0,"index":1722},{"krate":0,"index":1726}],"decl_id":null,"docs":" Functions for mapping over pixels, colors or subpixels of images.\n","sig":null,"attributes":[{"value":"/ Functions for mapping over pixels, colors or subpixels of images.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":359891,"byte_end":359960,"line_start":1,"line_end":1,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":1652},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":360317,"byte_end":360328,"line_start":10,"line_end":10,"column_start":11,"column_end":22},"name":"WithChannel","qualname":"::map::WithChannel","value":"WithChannel<C: Primitive>: Pixel","parent":null,"children":[{"krate":0,"index":1654}],"decl_id":null,"docs":" The type obtained by replacing the channel type of a given `Pixel` type.\n The output type must have the same name of channels as the input type, or\n several algorithms will produce incorrect results or panic.\n","sig":null,"attributes":[{"value":"/ The type obtained by replacing the channel type of a given `Pixel` type.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":360088,"byte_end":360164,"line_start":7,"line_end":7,"column_start":1,"column_end":77}},{"value":"/ The output type must have the same name of channels as the input type, or","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":360165,"byte_end":360242,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/ several algorithms will produce incorrect results or panic.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":360243,"byte_end":360306,"line_start":9,"line_end":9,"column_start":1,"column_end":64}}]},{"kind":"Type","id":{"krate":0,"index":1654},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":360389,"byte_end":360394,"line_start":12,"line_end":12,"column_start":10,"column_end":15},"name":"Pixel","qualname":"::map::WithChannel::Pixel","value":"type Pixel: Pixel<Subpixel = C> + 'static;","parent":{"krate":0,"index":1652},"children":[],"decl_id":null,"docs":" The new pixel type.\n","sig":null,"attributes":[{"value":"/ The new pixel type.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":360356,"byte_end":360379,"line_start":11,"line_end":11,"column_start":5,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":1655},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":360505,"byte_end":360515,"line_start":16,"line_end":16,"column_start":10,"column_end":20},"name":"ChannelMap","qualname":"::map::ChannelMap","value":"<Pix as WithChannel<Sub>>::Pixel","parent":null,"children":[],"decl_id":null,"docs":" Alias to make uses of `WithChannel` less syntactically noisy.\n","sig":null,"attributes":[{"value":"/ Alias to make uses of `WithChannel` less syntactically noisy.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":360430,"byte_end":360495,"line_start":15,"line_end":15,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":1682},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":361817,"byte_end":361830,"line_start":89,"line_end":89,"column_start":8,"column_end":21},"name":"map_subpixels","qualname":"::map::map_subpixels","value":"pub fn map_subpixels<I, P, F, S>(&I, F) -> Image<ChannelMap<P, S>> where\nI: GenericImage<Pixel = P>, P: WithChannel<S> + 'static, S: Primitive +\n'static, F: Fn(P::Subpixel) -> S","parent":null,"children":[],"decl_id":null,"docs":" Applies `f` to each subpixel of the input image.","sig":null,"attributes":[{"value":"/ Applies `f` to each subpixel of the input image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":361347,"byte_end":361399,"line_start":66,"line_end":66,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":361400,"byte_end":361403,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":361404,"byte_end":361418,"line_start":68,"line_end":68,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":361419,"byte_end":361426,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":361427,"byte_end":361452,"line_start":70,"line_end":70,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":361453,"byte_end":361471,"line_start":71,"line_end":71,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":361472,"byte_end":361501,"line_start":72,"line_end":72,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":361502,"byte_end":361519,"line_start":73,"line_end":73,"column_start":1,"column_end":18}},{"value":"/ use imageproc::map::map_subpixels;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":361520,"byte_end":361558,"line_start":74,"line_end":74,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":361559,"byte_end":361562,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":361563,"byte_end":361591,"line_start":76,"line_end":76,"column_start":1,"column_end":29}},{"value":"/     1, 2;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":361592,"byte_end":361605,"line_start":77,"line_end":77,"column_start":1,"column_end":14}},{"value":"/     3, 4);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":361606,"byte_end":361620,"line_start":78,"line_end":78,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":361621,"byte_end":361624,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ let scaled = gray_image!(type: i16,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":361625,"byte_end":361664,"line_start":80,"line_end":80,"column_start":1,"column_end":40}},{"value":"/     -2, -4;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":361665,"byte_end":361680,"line_start":81,"line_end":81,"column_start":1,"column_end":16}},{"value":"/     -6, -8);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":361681,"byte_end":361697,"line_start":82,"line_end":82,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":361698,"byte_end":361701,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":361702,"byte_end":361724,"line_start":84,"line_end":84,"column_start":1,"column_end":23}},{"value":"/     map_subpixels(&image, |x| -2 * (x as i16)),","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":361725,"byte_end":361776,"line_start":85,"line_end":85,"column_start":1,"column_end":52}},{"value":"/     scaled);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":361777,"byte_end":361793,"line_start":86,"line_end":86,"column_start":1,"column_end":17}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":361794,"byte_end":361801,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":361802,"byte_end":361809,"line_start":88,"line_end":88,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1687},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":363129,"byte_end":363139,"line_start":140,"line_end":140,"column_start":8,"column_end":18},"name":"map_colors","qualname":"::map::map_colors","value":"pub fn map_colors<I, P, Q, F>(&I, F) -> Image<Q> where I: GenericImage<Pixel =\nP>, P: Pixel, Q: Pixel + 'static, F: Fn(P) -> Q","parent":null,"children":[],"decl_id":null,"docs":" Applies `f` to the color of each pixel in the input image.","sig":null,"attributes":[{"value":"/ Applies `f` to the color of each pixel in the input image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":362599,"byte_end":362661,"line_start":116,"line_end":116,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":362662,"byte_end":362665,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":362666,"byte_end":362680,"line_start":118,"line_end":118,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":362681,"byte_end":362688,"line_start":119,"line_end":119,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":362689,"byte_end":362714,"line_start":120,"line_end":120,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":362715,"byte_end":362733,"line_start":121,"line_end":121,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":362734,"byte_end":362763,"line_start":122,"line_end":122,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":362764,"byte_end":362781,"line_start":123,"line_end":123,"column_start":1,"column_end":18}},{"value":"/ use image::Rgb;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":362782,"byte_end":362801,"line_start":124,"line_end":124,"column_start":1,"column_end":20}},{"value":"/ use imageproc::map::map_colors;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":362802,"byte_end":362837,"line_start":125,"line_end":125,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":362838,"byte_end":362841,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":362842,"byte_end":362870,"line_start":127,"line_end":127,"column_start":1,"column_end":29}},{"value":"/     1, 2;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":362871,"byte_end":362884,"line_start":128,"line_end":128,"column_start":1,"column_end":14}},{"value":"/     3, 4);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":362885,"byte_end":362899,"line_start":129,"line_end":129,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":362900,"byte_end":362903,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ let rgb = rgb_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":362904,"byte_end":362929,"line_start":131,"line_end":131,"column_start":1,"column_end":26}},{"value":"/     [1, 2, 3], [2, 4, 6];","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":362930,"byte_end":362959,"line_start":132,"line_end":132,"column_start":1,"column_end":30}},{"value":"/     [3, 6, 9], [4, 8, 12]);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":362960,"byte_end":362991,"line_start":133,"line_end":133,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":362992,"byte_end":362995,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":362996,"byte_end":363018,"line_start":135,"line_end":135,"column_start":1,"column_end":23}},{"value":"/     map_colors(&image, |p| { Rgb([p[0], (2 * p[0]), (3 * p[0])]) }),","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":363019,"byte_end":363091,"line_start":136,"line_end":136,"column_start":1,"column_end":73}},{"value":"/     rgb);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":363092,"byte_end":363105,"line_start":137,"line_end":137,"column_start":1,"column_end":14}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":363106,"byte_end":363113,"line_start":138,"line_end":138,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":363114,"byte_end":363121,"line_start":139,"line_end":139,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1692},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":364286,"byte_end":364297,"line_start":195,"line_end":195,"column_start":8,"column_end":19},"name":"map_colors2","qualname":"::map::map_colors2","value":"pub fn map_colors2<I, J, P, Q, R, F>(&I, &J, F) -> Image<R> where\nI: GenericImage<Pixel = P>, J: GenericImage<Pixel = Q>, P: Pixel, Q: Pixel,\nR: Pixel + 'static, F: Fn(P, Q) -> R","parent":null,"children":[],"decl_id":null,"docs":" Applies `f` to the colors of the pixels in the input images.","sig":null,"attributes":[{"value":"/ Applies `f` to the colors of the pixels in the input images.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":363634,"byte_end":363698,"line_start":162,"line_end":162,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":363699,"byte_end":363702,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ Requires `image1` and `image2` to have the same dimensions.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":363703,"byte_end":363766,"line_start":164,"line_end":164,"column_start":1,"column_end":64}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":363767,"byte_end":363781,"line_start":165,"line_end":165,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":363782,"byte_end":363789,"line_start":166,"line_end":166,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":363790,"byte_end":363815,"line_start":167,"line_end":167,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":363816,"byte_end":363834,"line_start":168,"line_end":168,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":363835,"byte_end":363864,"line_start":169,"line_end":169,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":363865,"byte_end":363882,"line_start":170,"line_end":170,"column_start":1,"column_end":18}},{"value":"/ use image::Luma;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":363883,"byte_end":363903,"line_start":171,"line_end":171,"column_start":1,"column_end":21}},{"value":"/ use imageproc::map::map_colors2;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":363904,"byte_end":363940,"line_start":172,"line_end":172,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":363941,"byte_end":363944,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ let image1 = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":363945,"byte_end":363974,"line_start":174,"line_end":174,"column_start":1,"column_end":30}},{"value":"/     1, 2,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":363975,"byte_end":363988,"line_start":175,"line_end":175,"column_start":1,"column_end":14}},{"value":"/     3, 4","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":363989,"byte_end":364001,"line_start":176,"line_end":176,"column_start":1,"column_end":13}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":364002,"byte_end":364008,"line_start":177,"line_end":177,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":364009,"byte_end":364012,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ let image2 = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":364013,"byte_end":364042,"line_start":179,"line_end":179,"column_start":1,"column_end":30}},{"value":"/     10, 20,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":364043,"byte_end":364058,"line_start":180,"line_end":180,"column_start":1,"column_end":16}},{"value":"/     30, 40","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":364059,"byte_end":364073,"line_start":181,"line_end":181,"column_start":1,"column_end":15}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":364074,"byte_end":364080,"line_start":182,"line_end":182,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":364081,"byte_end":364084,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ let sum = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":364085,"byte_end":364111,"line_start":184,"line_end":184,"column_start":1,"column_end":27}},{"value":"/     11, 22,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":364112,"byte_end":364127,"line_start":185,"line_end":185,"column_start":1,"column_end":16}},{"value":"/     33, 44","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":364128,"byte_end":364142,"line_start":186,"line_end":186,"column_start":1,"column_end":15}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":364143,"byte_end":364149,"line_start":187,"line_end":187,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":364150,"byte_end":364153,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":364154,"byte_end":364176,"line_start":189,"line_end":189,"column_start":1,"column_end":23}},{"value":"/     map_colors2(&image1, &image2, |p, q| Luma([p[0] + q[0]])),","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":364177,"byte_end":364243,"line_start":190,"line_end":190,"column_start":1,"column_end":67}},{"value":"/     sum","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":364244,"byte_end":364255,"line_start":191,"line_end":191,"column_start":1,"column_end":12}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":364256,"byte_end":364262,"line_start":192,"line_end":192,"column_start":1,"column_end":7}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":364263,"byte_end":364270,"line_start":193,"line_end":193,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":364271,"byte_end":364278,"line_start":194,"line_end":194,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1699},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":365511,"byte_end":365521,"line_start":248,"line_end":248,"column_start":8,"column_end":18},"name":"map_pixels","qualname":"::map::map_pixels","value":"pub fn map_pixels<I, P, Q, F>(&I, F) -> Image<Q> where I: GenericImage<Pixel =\nP>, P: Pixel, Q: Pixel + 'static, F: Fn(u32, u32, P) -> Q","parent":null,"children":[],"decl_id":null,"docs":" Applies `f` to each pixel in the input image.","sig":null,"attributes":[{"value":"/ Applies `f` to each pixel in the input image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":364975,"byte_end":365024,"line_start":222,"line_end":222,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":365025,"byte_end":365028,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":365029,"byte_end":365043,"line_start":224,"line_end":224,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":365044,"byte_end":365051,"line_start":225,"line_end":225,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":365052,"byte_end":365077,"line_start":226,"line_end":226,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":365078,"byte_end":365096,"line_start":227,"line_end":227,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":365097,"byte_end":365126,"line_start":228,"line_end":228,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":365127,"byte_end":365144,"line_start":229,"line_end":229,"column_start":1,"column_end":18}},{"value":"/ use image::Rgb;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":365145,"byte_end":365164,"line_start":230,"line_end":230,"column_start":1,"column_end":20}},{"value":"/ use imageproc::map::map_pixels;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":365165,"byte_end":365200,"line_start":231,"line_end":231,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":365201,"byte_end":365204,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":365205,"byte_end":365233,"line_start":233,"line_end":233,"column_start":1,"column_end":29}},{"value":"/     1, 2;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":365234,"byte_end":365247,"line_start":234,"line_end":234,"column_start":1,"column_end":14}},{"value":"/     3, 4);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":365248,"byte_end":365262,"line_start":235,"line_end":235,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":365263,"byte_end":365266,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ let rgb = rgb_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":365267,"byte_end":365292,"line_start":237,"line_end":237,"column_start":1,"column_end":26}},{"value":"/     [1, 0, 0], [2, 1, 0];","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":365293,"byte_end":365322,"line_start":238,"line_end":238,"column_start":1,"column_end":30}},{"value":"/     [3, 0, 1], [4, 1, 1]);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":365323,"byte_end":365353,"line_start":239,"line_end":239,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":365354,"byte_end":365357,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":365358,"byte_end":365380,"line_start":241,"line_end":241,"column_start":1,"column_end":23}},{"value":"/     map_pixels(&image, |x, y, p| {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":365381,"byte_end":365419,"line_start":242,"line_end":242,"column_start":1,"column_end":39}},{"value":"/         Rgb([p[0], x as u8, y as u8])","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":365420,"byte_end":365461,"line_start":243,"line_end":243,"column_start":1,"column_end":42}},{"value":"/     }),","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":365462,"byte_end":365473,"line_start":244,"line_end":244,"column_start":1,"column_end":12}},{"value":"/     rgb);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":365474,"byte_end":365487,"line_start":245,"line_end":245,"column_start":1,"column_end":14}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":365488,"byte_end":365495,"line_start":246,"line_end":246,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":365496,"byte_end":365503,"line_start":247,"line_end":247,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1704},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366552,"byte_end":366563,"line_start":293,"line_end":293,"column_start":8,"column_end":19},"name":"red_channel","qualname":"::map::red_channel","value":"pub fn red_channel<I, C>(&I) -> Image<Luma<C>> where I: GenericImage<Pixel =\nRgb<C>>, C: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Creates a grayscale image by extracting the red channel of an RGB image.","sig":null,"attributes":[{"value":"/ Creates a grayscale image by extracting the red channel of an RGB image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366032,"byte_end":366108,"line_start":270,"line_end":270,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366109,"byte_end":366112,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366113,"byte_end":366127,"line_start":272,"line_end":272,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366128,"byte_end":366135,"line_start":273,"line_end":273,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366136,"byte_end":366161,"line_start":274,"line_end":274,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366162,"byte_end":366180,"line_start":275,"line_end":275,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366181,"byte_end":366210,"line_start":276,"line_end":276,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366211,"byte_end":366228,"line_start":277,"line_end":277,"column_start":1,"column_end":18}},{"value":"/ use image::Luma;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366229,"byte_end":366249,"line_start":278,"line_end":278,"column_start":1,"column_end":21}},{"value":"/ use imageproc::map::red_channel;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366250,"byte_end":366286,"line_start":279,"line_end":279,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366287,"byte_end":366290,"line_start":280,"line_end":280,"column_start":1,"column_end":4}},{"value":"/ let image = rgb_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366291,"byte_end":366318,"line_start":281,"line_end":281,"column_start":1,"column_end":28}},{"value":"/     [1, 2, 3], [2, 4, 6];","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366319,"byte_end":366348,"line_start":282,"line_end":282,"column_start":1,"column_end":30}},{"value":"/     [3, 6, 9], [4, 8, 12]);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366349,"byte_end":366380,"line_start":283,"line_end":283,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366381,"byte_end":366384,"line_start":284,"line_end":284,"column_start":1,"column_end":4}},{"value":"/ let expected = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366385,"byte_end":366416,"line_start":285,"line_end":285,"column_start":1,"column_end":32}},{"value":"/     1, 2;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366417,"byte_end":366430,"line_start":286,"line_end":286,"column_start":1,"column_end":14}},{"value":"/     3, 4);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366431,"byte_end":366445,"line_start":287,"line_end":287,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366446,"byte_end":366449,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/ let actual = red_channel(&image);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366450,"byte_end":366487,"line_start":289,"line_end":289,"column_start":1,"column_end":38}},{"value":"/ assert_pixels_eq!(actual, expected);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366488,"byte_end":366528,"line_start":290,"line_end":290,"column_start":1,"column_end":41}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366529,"byte_end":366536,"line_start":291,"line_end":291,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366537,"byte_end":366544,"line_start":292,"line_end":292,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1708},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367239,"byte_end":367253,"line_start":324,"line_end":324,"column_start":8,"column_end":22},"name":"as_red_channel","qualname":"::map::as_red_channel","value":"pub fn as_red_channel<I, C>(&I) -> Image<Rgb<C>> where I: GenericImage<Pixel =\nLuma<C>>, C: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Creates an RGB image by embedding a grayscale image in its red channel.","sig":null,"attributes":[{"value":"/ Creates an RGB image by embedding a grayscale image in its red channel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366715,"byte_end":366790,"line_start":301,"line_end":301,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366791,"byte_end":366794,"line_start":302,"line_end":302,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366795,"byte_end":366809,"line_start":303,"line_end":303,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366810,"byte_end":366817,"line_start":304,"line_end":304,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366818,"byte_end":366843,"line_start":305,"line_end":305,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366844,"byte_end":366862,"line_start":306,"line_end":306,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366863,"byte_end":366892,"line_start":307,"line_end":307,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366893,"byte_end":366910,"line_start":308,"line_end":308,"column_start":1,"column_end":18}},{"value":"/ use image::Luma;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366911,"byte_end":366931,"line_start":309,"line_end":309,"column_start":1,"column_end":21}},{"value":"/ use imageproc::map::as_red_channel;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366932,"byte_end":366971,"line_start":310,"line_end":310,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366972,"byte_end":366975,"line_start":311,"line_end":311,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":366976,"byte_end":367004,"line_start":312,"line_end":312,"column_start":1,"column_end":29}},{"value":"/     1, 2;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367005,"byte_end":367018,"line_start":313,"line_end":313,"column_start":1,"column_end":14}},{"value":"/     3, 4);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367019,"byte_end":367033,"line_start":314,"line_end":314,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367034,"byte_end":367037,"line_start":315,"line_end":315,"column_start":1,"column_end":4}},{"value":"/ let expected = rgb_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367038,"byte_end":367068,"line_start":316,"line_end":316,"column_start":1,"column_end":31}},{"value":"/     [1, 0, 0], [2, 0, 0];","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367069,"byte_end":367098,"line_start":317,"line_end":317,"column_start":1,"column_end":30}},{"value":"/     [3, 0, 0], [4, 0, 0]);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367099,"byte_end":367129,"line_start":318,"line_end":318,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367130,"byte_end":367133,"line_start":319,"line_end":319,"column_start":1,"column_end":4}},{"value":"/ let actual = as_red_channel(&image);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367134,"byte_end":367174,"line_start":320,"line_end":320,"column_start":1,"column_end":41}},{"value":"/ assert_pixels_eq!(actual, expected);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367175,"byte_end":367215,"line_start":321,"line_end":321,"column_start":1,"column_end":41}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367216,"byte_end":367223,"line_start":322,"line_end":322,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367224,"byte_end":367231,"line_start":323,"line_end":323,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1713},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":368001,"byte_end":368014,"line_start":359,"line_end":359,"column_start":8,"column_end":21},"name":"green_channel","qualname":"::map::green_channel","value":"pub fn green_channel<I, C>(&I) -> Image<Luma<C>> where I: GenericImage<Pixel =\nRgb<C>>, C: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Creates a grayscale image by extracting the green channel of an RGB image.","sig":null,"attributes":[{"value":"/ Creates a grayscale image by extracting the green channel of an RGB image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367475,"byte_end":367553,"line_start":336,"line_end":336,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367554,"byte_end":367557,"line_start":337,"line_end":337,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367558,"byte_end":367572,"line_start":338,"line_end":338,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367573,"byte_end":367580,"line_start":339,"line_end":339,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367581,"byte_end":367606,"line_start":340,"line_end":340,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367607,"byte_end":367625,"line_start":341,"line_end":341,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367626,"byte_end":367655,"line_start":342,"line_end":342,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367656,"byte_end":367673,"line_start":343,"line_end":343,"column_start":1,"column_end":18}},{"value":"/ use image::Luma;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367674,"byte_end":367694,"line_start":344,"line_end":344,"column_start":1,"column_end":21}},{"value":"/ use imageproc::map::green_channel;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367695,"byte_end":367733,"line_start":345,"line_end":345,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367734,"byte_end":367737,"line_start":346,"line_end":346,"column_start":1,"column_end":4}},{"value":"/ let image = rgb_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367738,"byte_end":367765,"line_start":347,"line_end":347,"column_start":1,"column_end":28}},{"value":"/     [1, 2, 3], [2, 4, 6];","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367766,"byte_end":367795,"line_start":348,"line_end":348,"column_start":1,"column_end":30}},{"value":"/     [3, 6, 9], [4, 8, 12]);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367796,"byte_end":367827,"line_start":349,"line_end":349,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367828,"byte_end":367831,"line_start":350,"line_end":350,"column_start":1,"column_end":4}},{"value":"/ let expected = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367832,"byte_end":367863,"line_start":351,"line_end":351,"column_start":1,"column_end":32}},{"value":"/     2, 4;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367864,"byte_end":367877,"line_start":352,"line_end":352,"column_start":1,"column_end":14}},{"value":"/     6, 8);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367878,"byte_end":367892,"line_start":353,"line_end":353,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367893,"byte_end":367896,"line_start":354,"line_end":354,"column_start":1,"column_end":4}},{"value":"/ let actual = green_channel(&image);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367897,"byte_end":367936,"line_start":355,"line_end":355,"column_start":1,"column_end":40}},{"value":"/ assert_pixels_eq!(actual, expected);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367937,"byte_end":367977,"line_start":356,"line_end":356,"column_start":1,"column_end":41}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367978,"byte_end":367985,"line_start":357,"line_end":357,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":367986,"byte_end":367993,"line_start":358,"line_end":358,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1717},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":368696,"byte_end":368712,"line_start":390,"line_end":390,"column_start":8,"column_end":24},"name":"as_green_channel","qualname":"::map::as_green_channel","value":"pub fn as_green_channel<I, C>(&I) -> Image<Rgb<C>> where I: GenericImage<Pixel\n= Luma<C>>, C: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Creates an RGB image by embedding a grayscale image in its green channel.","sig":null,"attributes":[{"value":"/ Creates an RGB image by embedding a grayscale image in its green channel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":368166,"byte_end":368243,"line_start":367,"line_end":367,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":368244,"byte_end":368247,"line_start":368,"line_end":368,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":368248,"byte_end":368262,"line_start":369,"line_end":369,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":368263,"byte_end":368270,"line_start":370,"line_end":370,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":368271,"byte_end":368296,"line_start":371,"line_end":371,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":368297,"byte_end":368315,"line_start":372,"line_end":372,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":368316,"byte_end":368345,"line_start":373,"line_end":373,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":368346,"byte_end":368363,"line_start":374,"line_end":374,"column_start":1,"column_end":18}},{"value":"/ use image::Luma;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":368364,"byte_end":368384,"line_start":375,"line_end":375,"column_start":1,"column_end":21}},{"value":"/ use imageproc::map::as_green_channel;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":368385,"byte_end":368426,"line_start":376,"line_end":376,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":368427,"byte_end":368430,"line_start":377,"line_end":377,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":368431,"byte_end":368459,"line_start":378,"line_end":378,"column_start":1,"column_end":29}},{"value":"/     1, 2;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":368460,"byte_end":368473,"line_start":379,"line_end":379,"column_start":1,"column_end":14}},{"value":"/     3, 4);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":368474,"byte_end":368488,"line_start":380,"line_end":380,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":368489,"byte_end":368492,"line_start":381,"line_end":381,"column_start":1,"column_end":4}},{"value":"/ let expected = rgb_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":368493,"byte_end":368523,"line_start":382,"line_end":382,"column_start":1,"column_end":31}},{"value":"/     [0, 1, 0], [0, 2, 0];","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":368524,"byte_end":368553,"line_start":383,"line_end":383,"column_start":1,"column_end":30}},{"value":"/     [0, 3, 0], [0, 4, 0]);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":368554,"byte_end":368584,"line_start":384,"line_end":384,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":368585,"byte_end":368588,"line_start":385,"line_end":385,"column_start":1,"column_end":4}},{"value":"/ let actual = as_green_channel(&image);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":368589,"byte_end":368631,"line_start":386,"line_end":386,"column_start":1,"column_end":43}},{"value":"/ assert_pixels_eq!(actual, expected);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":368632,"byte_end":368672,"line_start":387,"line_end":387,"column_start":1,"column_end":41}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":368673,"byte_end":368680,"line_start":388,"line_end":388,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":368681,"byte_end":368688,"line_start":389,"line_end":389,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1722},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369458,"byte_end":369470,"line_start":425,"line_end":425,"column_start":8,"column_end":20},"name":"blue_channel","qualname":"::map::blue_channel","value":"pub fn blue_channel<I, C>(&I) -> Image<Luma<C>> where I: GenericImage<Pixel =\nRgb<C>>, C: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Creates a grayscale image by extracting the blue channel of an RGB image.","sig":null,"attributes":[{"value":"/ Creates a grayscale image by extracting the blue channel of an RGB image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":368934,"byte_end":369011,"line_start":402,"line_end":402,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369012,"byte_end":369015,"line_start":403,"line_end":403,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369016,"byte_end":369030,"line_start":404,"line_end":404,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369031,"byte_end":369038,"line_start":405,"line_end":405,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369039,"byte_end":369064,"line_start":406,"line_end":406,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369065,"byte_end":369083,"line_start":407,"line_end":407,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369084,"byte_end":369113,"line_start":408,"line_end":408,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369114,"byte_end":369131,"line_start":409,"line_end":409,"column_start":1,"column_end":18}},{"value":"/ use image::Luma;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369132,"byte_end":369152,"line_start":410,"line_end":410,"column_start":1,"column_end":21}},{"value":"/ use imageproc::map::blue_channel;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369153,"byte_end":369190,"line_start":411,"line_end":411,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369191,"byte_end":369194,"line_start":412,"line_end":412,"column_start":1,"column_end":4}},{"value":"/ let image = rgb_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369195,"byte_end":369222,"line_start":413,"line_end":413,"column_start":1,"column_end":28}},{"value":"/     [1, 2, 3], [2, 4, 6];","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369223,"byte_end":369252,"line_start":414,"line_end":414,"column_start":1,"column_end":30}},{"value":"/     [3, 6, 9], [4, 8, 12]);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369253,"byte_end":369284,"line_start":415,"line_end":415,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369285,"byte_end":369288,"line_start":416,"line_end":416,"column_start":1,"column_end":4}},{"value":"/ let expected = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369289,"byte_end":369320,"line_start":417,"line_end":417,"column_start":1,"column_end":32}},{"value":"/     3, 6;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369321,"byte_end":369334,"line_start":418,"line_end":418,"column_start":1,"column_end":14}},{"value":"/     9, 12);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369335,"byte_end":369350,"line_start":419,"line_end":419,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369351,"byte_end":369354,"line_start":420,"line_end":420,"column_start":1,"column_end":4}},{"value":"/ let actual = blue_channel(&image);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369355,"byte_end":369393,"line_start":421,"line_end":421,"column_start":1,"column_end":39}},{"value":"/ assert_pixels_eq!(actual, expected);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369394,"byte_end":369434,"line_start":422,"line_end":422,"column_start":1,"column_end":41}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369435,"byte_end":369442,"line_start":423,"line_end":423,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369443,"byte_end":369450,"line_start":424,"line_end":424,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1726},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":370149,"byte_end":370164,"line_start":456,"line_end":456,"column_start":8,"column_end":23},"name":"as_blue_channel","qualname":"::map::as_blue_channel","value":"pub fn as_blue_channel<I, C>(&I) -> Image<Rgb<C>> where I: GenericImage<Pixel\n= Luma<C>>, C: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Creates an RGB image by embedding a grayscale image in its blue channel.","sig":null,"attributes":[{"value":"/ Creates an RGB image by embedding a grayscale image in its blue channel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369622,"byte_end":369698,"line_start":433,"line_end":433,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369699,"byte_end":369702,"line_start":434,"line_end":434,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369703,"byte_end":369717,"line_start":435,"line_end":435,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369718,"byte_end":369725,"line_start":436,"line_end":436,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369726,"byte_end":369751,"line_start":437,"line_end":437,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369752,"byte_end":369770,"line_start":438,"line_end":438,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369771,"byte_end":369800,"line_start":439,"line_end":439,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369801,"byte_end":369818,"line_start":440,"line_end":440,"column_start":1,"column_end":18}},{"value":"/ use image::Luma;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369819,"byte_end":369839,"line_start":441,"line_end":441,"column_start":1,"column_end":21}},{"value":"/ use imageproc::map::as_blue_channel;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369840,"byte_end":369880,"line_start":442,"line_end":442,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369881,"byte_end":369884,"line_start":443,"line_end":443,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369885,"byte_end":369913,"line_start":444,"line_end":444,"column_start":1,"column_end":29}},{"value":"/     1, 2;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369914,"byte_end":369927,"line_start":445,"line_end":445,"column_start":1,"column_end":14}},{"value":"/     3, 4);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369928,"byte_end":369942,"line_start":446,"line_end":446,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369943,"byte_end":369946,"line_start":447,"line_end":447,"column_start":1,"column_end":4}},{"value":"/ let expected = rgb_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369947,"byte_end":369977,"line_start":448,"line_end":448,"column_start":1,"column_end":31}},{"value":"/     [0, 0, 1], [0, 0, 2];","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":369978,"byte_end":370007,"line_start":449,"line_end":449,"column_start":1,"column_end":30}},{"value":"/     [0, 0, 3], [0, 0, 4]);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":370008,"byte_end":370038,"line_start":450,"line_end":450,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":370039,"byte_end":370042,"line_start":451,"line_end":451,"column_start":1,"column_end":4}},{"value":"/ let actual = as_blue_channel(&image);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":370043,"byte_end":370084,"line_start":452,"line_end":452,"column_start":1,"column_end":42}},{"value":"/ assert_pixels_eq!(actual, expected);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":370085,"byte_end":370125,"line_start":453,"line_end":453,"column_start":1,"column_end":41}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":370126,"byte_end":370133,"line_start":454,"line_end":454,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":370134,"byte_end":370141,"line_start":455,"line_end":455,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1731},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\math.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"math","qualname":"::math","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\math.rs","parent":null,"children":[{"krate":0,"index":1732},{"krate":0,"index":1735},{"krate":0,"index":1737},{"krate":0,"index":1739}],"decl_id":null,"docs":" Assorted mathematical helper functions.\n","sig":null,"attributes":[{"value":"/ Assorted mathematical helper functions.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\math.rs","byte_start":370386,"byte_end":370429,"line_start":1,"line_end":1,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":1735},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\math.rs","byte_start":370485,"byte_end":370492,"line_start":6,"line_end":6,"column_start":8,"column_end":15},"name":"l1_norm","qualname":"::math::l1_norm","value":"pub fn l1_norm(&[f32]) -> f32","parent":null,"children":[],"decl_id":null,"docs":" L1 norm of a vector.\n","sig":null,"attributes":[{"value":"/ L1 norm of a vector.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\math.rs","byte_start":370453,"byte_end":370477,"line_start":5,"line_end":5,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":1737},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\math.rs","byte_start":370598,"byte_end":370605,"line_start":11,"line_end":11,"column_start":8,"column_end":15},"name":"l2_norm","qualname":"::math::l2_norm","value":"pub fn l2_norm(&[f32]) -> f32","parent":null,"children":[],"decl_id":null,"docs":" L2 norm of a vector.\n","sig":null,"attributes":[{"value":"/ L2 norm of a vector.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\math.rs","byte_start":370566,"byte_end":370590,"line_start":10,"line_end":10,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":1739},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\math.rs","byte_start":370744,"byte_end":370748,"line_start":16,"line_end":16,"column_start":8,"column_end":12},"name":"cast","qualname":"::math::cast","value":"pub fn cast<T, U>(T) -> U where T: ValueInto<U>","parent":null,"children":[],"decl_id":null,"docs":" Helper for a conversion that we know can't fail.\n","sig":null,"attributes":[{"value":"/ Helper for a conversion that we know can't fail.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\math.rs","byte_start":370684,"byte_end":370736,"line_start":15,"line_end":15,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":1742},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"morphology","qualname":"::morphology","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","parent":null,"children":[{"krate":0,"index":1743},{"krate":0,"index":1744},{"krate":0,"index":1747},{"krate":0,"index":1750},{"krate":0,"index":1753},{"krate":0,"index":1756},{"krate":0,"index":1759},{"krate":0,"index":1762},{"krate":0,"index":1763},{"krate":0,"index":1764},{"krate":0,"index":1765},{"krate":0,"index":1766},{"krate":0,"index":1767},{"krate":0,"index":1768},{"krate":0,"index":1769}],"decl_id":null,"docs":" Functions for computing [morphological operators].","sig":null,"attributes":[{"value":"/ Functions for computing [morphological operators].","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":370898,"byte_end":370952,"line_start":1,"line_end":1,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":370953,"byte_end":370956,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ [morphological operators]: http://homepages.inf.ed.ac.uk/rbf/HIPR2/morops.htm","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":370957,"byte_end":371038,"line_start":3,"line_end":3,"column_start":1,"column_end":82}}]},{"kind":"Function","id":{"krate":0,"index":1762},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":372359,"byte_end":372365,"line_start":56,"line_end":56,"column_start":8,"column_end":14},"name":"dilate","qualname":"::morphology::dilate","value":"pub fn dilate(&GrayImage, Norm, u8) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Sets all pixels within distance `k` of a foreground pixel to white.","sig":null,"attributes":[{"value":"/ Sets all pixels within distance `k` of a foreground pixel to white.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371185,"byte_end":371256,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371257,"byte_end":371260,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ A pixel is treated as belonging to the foreground if it has non-zero intensity.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371261,"byte_end":371344,"line_start":13,"line_end":13,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371345,"byte_end":371348,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371349,"byte_end":371363,"line_start":15,"line_end":15,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371364,"byte_end":371371,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371372,"byte_end":371397,"line_start":17,"line_end":17,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371398,"byte_end":371416,"line_start":18,"line_end":18,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371417,"byte_end":371446,"line_start":19,"line_end":19,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371447,"byte_end":371464,"line_start":20,"line_end":20,"column_start":1,"column_end":18}},{"value":"/ use image::GrayImage;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371465,"byte_end":371490,"line_start":21,"line_end":21,"column_start":1,"column_end":26}},{"value":"/ use imageproc::morphology::dilate;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371491,"byte_end":371529,"line_start":22,"line_end":22,"column_start":1,"column_end":39}},{"value":"/ use imageproc::distance_transform::Norm;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371530,"byte_end":371574,"line_start":23,"line_end":23,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371575,"byte_end":371578,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371579,"byte_end":371607,"line_start":25,"line_end":25,"column_start":1,"column_end":29}},{"value":"/     0,   0,   0,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371608,"byte_end":371638,"line_start":26,"line_end":26,"column_start":1,"column_end":31}},{"value":"/     0,   0,   0,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371639,"byte_end":371669,"line_start":27,"line_end":27,"column_start":1,"column_end":31}},{"value":"/     0,   0, 255,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371670,"byte_end":371700,"line_start":28,"line_end":28,"column_start":1,"column_end":31}},{"value":"/     0,   0,   0,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371701,"byte_end":371731,"line_start":29,"line_end":29,"column_start":1,"column_end":31}},{"value":"/     0,   0,   0,   0,   0","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371732,"byte_end":371761,"line_start":30,"line_end":30,"column_start":1,"column_end":30}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371762,"byte_end":371768,"line_start":31,"line_end":31,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371769,"byte_end":371772,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ // L1 norm","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371773,"byte_end":371787,"line_start":33,"line_end":33,"column_start":1,"column_end":15}},{"value":"/ let l1_dilated = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371788,"byte_end":371821,"line_start":34,"line_end":34,"column_start":1,"column_end":34}},{"value":"/     0,   0,   0,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371822,"byte_end":371852,"line_start":35,"line_end":35,"column_start":1,"column_end":31}},{"value":"/     0,   0, 255,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371853,"byte_end":371883,"line_start":36,"line_end":36,"column_start":1,"column_end":31}},{"value":"/     0, 255, 255, 255,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371884,"byte_end":371914,"line_start":37,"line_end":37,"column_start":1,"column_end":31}},{"value":"/     0,   0, 255,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371915,"byte_end":371945,"line_start":38,"line_end":38,"column_start":1,"column_end":31}},{"value":"/     0,   0,   0,   0,   0","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371946,"byte_end":371975,"line_start":39,"line_end":39,"column_start":1,"column_end":30}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371976,"byte_end":371982,"line_start":40,"line_end":40,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371983,"byte_end":371986,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(dilate(&image, Norm::L1, 1), l1_dilated);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":371987,"byte_end":372050,"line_start":42,"line_end":42,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":372051,"byte_end":372054,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ // LInf norm","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":372055,"byte_end":372071,"line_start":44,"line_end":44,"column_start":1,"column_end":17}},{"value":"/ let linf_dilated = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":372072,"byte_end":372107,"line_start":45,"line_end":45,"column_start":1,"column_end":36}},{"value":"/    0,   0,   0,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":372108,"byte_end":372137,"line_start":46,"line_end":46,"column_start":1,"column_end":30}},{"value":"/    0, 255, 255, 255,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":372138,"byte_end":372167,"line_start":47,"line_end":47,"column_start":1,"column_end":30}},{"value":"/    0, 255, 255, 255,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":372168,"byte_end":372197,"line_start":48,"line_end":48,"column_start":1,"column_end":30}},{"value":"/    0, 255, 255, 255,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":372198,"byte_end":372227,"line_start":49,"line_end":49,"column_start":1,"column_end":30}},{"value":"/    0,   0,   0,   0,   0","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":372228,"byte_end":372256,"line_start":50,"line_end":50,"column_start":1,"column_end":29}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":372257,"byte_end":372263,"line_start":51,"line_end":51,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":372264,"byte_end":372267,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(dilate(&image, Norm::LInf, 1), linf_dilated);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":372268,"byte_end":372335,"line_start":53,"line_end":53,"column_start":1,"column_end":68}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":372336,"byte_end":372343,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":372344,"byte_end":372351,"line_start":55,"line_end":55,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1763},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":372736,"byte_end":372746,"line_start":67,"line_end":67,"column_start":8,"column_end":18},"name":"dilate_mut","qualname":"::morphology::dilate_mut","value":"pub fn dilate_mut(&mut GrayImage, Norm, u8)","parent":null,"children":[],"decl_id":null,"docs":" Sets all pixels within distance `k` of a foreground pixel to white.","sig":null,"attributes":[{"value":"/ Sets all pixels within distance `k` of a foreground pixel to white.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":372498,"byte_end":372569,"line_start":62,"line_end":62,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":372570,"byte_end":372573,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ A pixel is treated as belonging to the foreground if it has non-zero intensity.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":372574,"byte_end":372657,"line_start":64,"line_end":64,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":372658,"byte_end":372661,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ See the [`dilate`](fn.dilate.html) documentation for examples.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":372662,"byte_end":372728,"line_start":66,"line_end":66,"column_start":1,"column_end":67}}]},{"kind":"Function","id":{"krate":0,"index":1764},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":375240,"byte_end":375245,"line_start":134,"line_end":134,"column_start":8,"column_end":13},"name":"erode","qualname":"::morphology::erode","value":"pub fn erode(&GrayImage, Norm, u8) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Sets all pixels within distance `k` of a background pixel to black.","sig":null,"attributes":[{"value":"/ Sets all pixels within distance `k` of a background pixel to black.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":372917,"byte_end":372988,"line_start":74,"line_end":74,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":372989,"byte_end":372992,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ A pixel is treated as belonging to the foreground if it has non-zero intensity.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":372993,"byte_end":373076,"line_start":76,"line_end":76,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":373077,"byte_end":373080,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":373081,"byte_end":373095,"line_start":78,"line_end":78,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":373096,"byte_end":373103,"line_start":79,"line_end":79,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":373104,"byte_end":373129,"line_start":80,"line_end":80,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":373130,"byte_end":373148,"line_start":81,"line_end":81,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":373149,"byte_end":373178,"line_start":82,"line_end":82,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":373179,"byte_end":373196,"line_start":83,"line_end":83,"column_start":1,"column_end":18}},{"value":"/ use image::GrayImage;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":373197,"byte_end":373222,"line_start":84,"line_end":84,"column_start":1,"column_end":26}},{"value":"/ use imageproc::morphology::erode;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":373223,"byte_end":373260,"line_start":85,"line_end":85,"column_start":1,"column_end":38}},{"value":"/ use imageproc::distance_transform::Norm;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":373261,"byte_end":373305,"line_start":86,"line_end":86,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":373306,"byte_end":373309,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":373310,"byte_end":373338,"line_start":88,"line_end":88,"column_start":1,"column_end":29}},{"value":"/     0,   0,   0,   0,   0,   0,   0,   0,  0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":373339,"byte_end":373388,"line_start":89,"line_end":89,"column_start":1,"column_end":50}},{"value":"/     0, 255, 255, 255, 255, 255, 255, 255,  0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":373389,"byte_end":373438,"line_start":90,"line_end":90,"column_start":1,"column_end":50}},{"value":"/     0, 255, 255, 255, 255, 255, 255, 255,  0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":373439,"byte_end":373488,"line_start":91,"line_end":91,"column_start":1,"column_end":50}},{"value":"/     0, 255, 255, 255, 255, 255, 255, 255,  0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":373489,"byte_end":373538,"line_start":92,"line_end":92,"column_start":1,"column_end":50}},{"value":"/     0, 255, 255, 255,   0, 255, 255, 255,  0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":373539,"byte_end":373588,"line_start":93,"line_end":93,"column_start":1,"column_end":50}},{"value":"/     0, 255, 255, 255, 255, 255, 255, 255,  0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":373589,"byte_end":373638,"line_start":94,"line_end":94,"column_start":1,"column_end":50}},{"value":"/     0, 255, 255, 255, 255, 255, 255, 255,  0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":373639,"byte_end":373688,"line_start":95,"line_end":95,"column_start":1,"column_end":50}},{"value":"/     0, 255, 255, 255, 255, 255, 255, 255,  0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":373689,"byte_end":373738,"line_start":96,"line_end":96,"column_start":1,"column_end":50}},{"value":"/     0,   0,   0,   0,   0,   0,   0,   0,  0","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":373739,"byte_end":373787,"line_start":97,"line_end":97,"column_start":1,"column_end":49}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":373788,"byte_end":373794,"line_start":98,"line_end":98,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":373795,"byte_end":373798,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ // L1 norm - the outermost foreground pixels are eroded,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":373799,"byte_end":373859,"line_start":100,"line_end":100,"column_start":1,"column_end":61}},{"value":"/ // as well as those horizontally and vertically adjacent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":373860,"byte_end":373920,"line_start":101,"line_end":101,"column_start":1,"column_end":61}},{"value":"/ // to the centre background pixel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":373921,"byte_end":373959,"line_start":102,"line_end":102,"column_start":1,"column_end":39}},{"value":"/ let l1_eroded = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":373960,"byte_end":373992,"line_start":103,"line_end":103,"column_start":1,"column_end":33}},{"value":"/     0,   0,   0,   0,   0,   0,   0,   0,  0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":373993,"byte_end":374042,"line_start":104,"line_end":104,"column_start":1,"column_end":50}},{"value":"/     0,   0,   0,   0,   0,   0,   0,   0,  0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":374043,"byte_end":374092,"line_start":105,"line_end":105,"column_start":1,"column_end":50}},{"value":"/     0,   0, 255, 255, 255, 255, 255,   0,  0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":374093,"byte_end":374142,"line_start":106,"line_end":106,"column_start":1,"column_end":50}},{"value":"/     0,   0, 255, 255,   0, 255, 255,   0,  0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":374143,"byte_end":374192,"line_start":107,"line_end":107,"column_start":1,"column_end":50}},{"value":"/     0,   0, 255,   0,   0,   0, 255,   0,  0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":374193,"byte_end":374242,"line_start":108,"line_end":108,"column_start":1,"column_end":50}},{"value":"/     0,   0, 255, 255,   0, 255, 255,   0,  0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":374243,"byte_end":374292,"line_start":109,"line_end":109,"column_start":1,"column_end":50}},{"value":"/     0,   0, 255, 255, 255, 255, 255,   0,  0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":374293,"byte_end":374342,"line_start":110,"line_end":110,"column_start":1,"column_end":50}},{"value":"/     0,   0,   0,   0,   0,   0,   0,   0,  0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":374343,"byte_end":374392,"line_start":111,"line_end":111,"column_start":1,"column_end":50}},{"value":"/     0,   0,   0,   0,   0,   0,   0,   0,  0","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":374393,"byte_end":374441,"line_start":112,"line_end":112,"column_start":1,"column_end":49}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":374442,"byte_end":374448,"line_start":113,"line_end":113,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":374449,"byte_end":374452,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(erode(&image, Norm::L1, 1), l1_eroded);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":374453,"byte_end":374514,"line_start":115,"line_end":115,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":374515,"byte_end":374518,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ // LInf norm - all pixels eroded using the L1 norm are eroded,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":374519,"byte_end":374585,"line_start":117,"line_end":117,"column_start":1,"column_end":67}},{"value":"/ // as well as the pixels diagonally adjacent to the centre pixel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":374586,"byte_end":374655,"line_start":118,"line_end":118,"column_start":1,"column_end":70}},{"value":"/ let linf_eroded = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":374656,"byte_end":374690,"line_start":119,"line_end":119,"column_start":1,"column_end":35}},{"value":"/     0,   0,   0,   0,   0,   0,   0,   0,  0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":374691,"byte_end":374740,"line_start":120,"line_end":120,"column_start":1,"column_end":50}},{"value":"/     0,   0,   0,   0,   0,   0,   0,   0,  0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":374741,"byte_end":374790,"line_start":121,"line_end":121,"column_start":1,"column_end":50}},{"value":"/     0,   0, 255, 255, 255, 255, 255,   0,  0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":374791,"byte_end":374840,"line_start":122,"line_end":122,"column_start":1,"column_end":50}},{"value":"/     0,   0, 255,   0,   0,   0, 255,   0,  0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":374841,"byte_end":374890,"line_start":123,"line_end":123,"column_start":1,"column_end":50}},{"value":"/     0,   0, 255,   0,   0,   0, 255,   0,  0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":374891,"byte_end":374940,"line_start":124,"line_end":124,"column_start":1,"column_end":50}},{"value":"/     0,   0, 255,   0,   0,   0, 255,   0,  0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":374941,"byte_end":374990,"line_start":125,"line_end":125,"column_start":1,"column_end":50}},{"value":"/     0,   0, 255, 255, 255, 255, 255,   0,  0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":374991,"byte_end":375040,"line_start":126,"line_end":126,"column_start":1,"column_end":50}},{"value":"/     0,   0,   0,   0,   0,   0,   0,   0,  0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":375041,"byte_end":375090,"line_start":127,"line_end":127,"column_start":1,"column_end":50}},{"value":"/     0,   0,   0,   0,   0,   0,   0,   0,  0","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":375091,"byte_end":375139,"line_start":128,"line_end":128,"column_start":1,"column_end":49}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":375140,"byte_end":375146,"line_start":129,"line_end":129,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":375147,"byte_end":375150,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(erode(&image, Norm::LInf, 1), linf_eroded);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":375151,"byte_end":375216,"line_start":131,"line_end":131,"column_start":1,"column_end":66}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":375217,"byte_end":375224,"line_start":132,"line_end":132,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":375225,"byte_end":375232,"line_start":133,"line_end":133,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1765},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":375613,"byte_end":375622,"line_start":145,"line_end":145,"column_start":8,"column_end":17},"name":"erode_mut","qualname":"::morphology::erode_mut","value":"pub fn erode_mut(&mut GrayImage, Norm, u8)","parent":null,"children":[],"decl_id":null,"docs":" Sets all pixels within distance `k` of a background pixel to black.","sig":null,"attributes":[{"value":"/ Sets all pixels within distance `k` of a background pixel to black.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":375377,"byte_end":375448,"line_start":140,"line_end":140,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":375449,"byte_end":375452,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ A pixel is treated as belonging to the foreground if it has non-zero intensity.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":375453,"byte_end":375536,"line_start":142,"line_end":142,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":375537,"byte_end":375540,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ See the [`erode`](fn.erode.html) documentation for examples.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":375541,"byte_end":375605,"line_start":144,"line_end":144,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":1766},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":377100,"byte_end":377104,"line_start":203,"line_end":203,"column_start":8,"column_end":12},"name":"open","qualname":"::morphology::open","value":"pub fn open(&GrayImage, Norm, u8) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Erosion followed by dilation.","sig":null,"attributes":[{"value":"/ Erosion followed by dilation.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":375820,"byte_end":375853,"line_start":152,"line_end":152,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":375854,"byte_end":375857,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ See the [`erode`](fn.erode.html) and [`dilate`](fn.dilate.html)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":375858,"byte_end":375925,"line_start":154,"line_end":154,"column_start":1,"column_end":68}},{"value":"/ documentation for definitions of dilation and erosion.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":375926,"byte_end":375984,"line_start":155,"line_end":155,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":375985,"byte_end":375988,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":375989,"byte_end":376003,"line_start":157,"line_end":157,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376004,"byte_end":376011,"line_start":158,"line_end":158,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376012,"byte_end":376037,"line_start":159,"line_end":159,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376038,"byte_end":376056,"line_start":160,"line_end":160,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376057,"byte_end":376086,"line_start":161,"line_end":161,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376087,"byte_end":376104,"line_start":162,"line_end":162,"column_start":1,"column_end":18}},{"value":"/ use imageproc::morphology::open;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376105,"byte_end":376141,"line_start":163,"line_end":163,"column_start":1,"column_end":37}},{"value":"/ use imageproc::distance_transform::Norm;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376142,"byte_end":376186,"line_start":164,"line_end":164,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376187,"byte_end":376190,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ // Isolated regions of foreground pixels are removed.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376191,"byte_end":376248,"line_start":166,"line_end":166,"column_start":1,"column_end":58}},{"value":"/ let cross = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376249,"byte_end":376277,"line_start":167,"line_end":167,"column_start":1,"column_end":29}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376278,"byte_end":376310,"line_start":168,"line_end":168,"column_start":1,"column_end":33}},{"value":"/       0,   0, 255,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376311,"byte_end":376343,"line_start":169,"line_end":169,"column_start":1,"column_end":33}},{"value":"/       0, 255, 255, 255,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376344,"byte_end":376376,"line_start":170,"line_end":170,"column_start":1,"column_end":33}},{"value":"/       0,   0, 255,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376377,"byte_end":376409,"line_start":171,"line_end":171,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376410,"byte_end":376441,"line_start":172,"line_end":172,"column_start":1,"column_end":32}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376442,"byte_end":376448,"line_start":173,"line_end":173,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376449,"byte_end":376452,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ let opened_cross = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376453,"byte_end":376488,"line_start":175,"line_end":175,"column_start":1,"column_end":36}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376489,"byte_end":376521,"line_start":176,"line_end":176,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376522,"byte_end":376554,"line_start":177,"line_end":177,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376555,"byte_end":376587,"line_start":178,"line_end":178,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376588,"byte_end":376620,"line_start":179,"line_end":179,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376621,"byte_end":376652,"line_start":180,"line_end":180,"column_start":1,"column_end":32}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376653,"byte_end":376659,"line_start":181,"line_end":181,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376660,"byte_end":376663,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376664,"byte_end":376686,"line_start":183,"line_end":183,"column_start":1,"column_end":23}},{"value":"/     open(&cross, Norm::LInf, 1),","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376687,"byte_end":376723,"line_start":184,"line_end":184,"column_start":1,"column_end":37}},{"value":"/     opened_cross","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376724,"byte_end":376744,"line_start":185,"line_end":185,"column_start":1,"column_end":21}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376745,"byte_end":376751,"line_start":186,"line_end":186,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376752,"byte_end":376755,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ // Large blocks survive unchanged.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376756,"byte_end":376794,"line_start":188,"line_end":188,"column_start":1,"column_end":39}},{"value":"/ let blob = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376795,"byte_end":376822,"line_start":189,"line_end":189,"column_start":1,"column_end":28}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376823,"byte_end":376855,"line_start":190,"line_end":190,"column_start":1,"column_end":33}},{"value":"/       0, 255, 255, 255,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376856,"byte_end":376888,"line_start":191,"line_end":191,"column_start":1,"column_end":33}},{"value":"/       0, 255, 255, 255,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376889,"byte_end":376921,"line_start":192,"line_end":192,"column_start":1,"column_end":33}},{"value":"/       0, 255, 255, 255,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376922,"byte_end":376954,"line_start":193,"line_end":193,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376955,"byte_end":376986,"line_start":194,"line_end":194,"column_start":1,"column_end":32}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376987,"byte_end":376993,"line_start":195,"line_end":195,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376994,"byte_end":376997,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":376998,"byte_end":377020,"line_start":197,"line_end":197,"column_start":1,"column_end":23}},{"value":"/     open(&blob, Norm::LInf, 1),","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":377021,"byte_end":377056,"line_start":198,"line_end":198,"column_start":1,"column_end":36}},{"value":"/     blob","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":377057,"byte_end":377069,"line_start":199,"line_end":199,"column_start":1,"column_end":13}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":377070,"byte_end":377076,"line_start":200,"line_end":200,"column_start":1,"column_end":7}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":377077,"byte_end":377084,"line_start":201,"line_end":201,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":377085,"byte_end":377092,"line_start":202,"line_end":202,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1767},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":377470,"byte_end":377478,"line_start":214,"line_end":214,"column_start":8,"column_end":16},"name":"open_mut","qualname":"::morphology::open_mut","value":"pub fn open_mut(&mut GrayImage, Norm, u8)","parent":null,"children":[],"decl_id":null,"docs":" Erosion followed by dilation.","sig":null,"attributes":[{"value":"/ Erosion followed by dilation.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":377235,"byte_end":377268,"line_start":209,"line_end":209,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":377269,"byte_end":377272,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ See the [`open`](fn.open.html) documentation for examples,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":377273,"byte_end":377335,"line_start":211,"line_end":211,"column_start":1,"column_end":63}},{"value":"/ and the [`erode`](fn.erode.html) and [`dilate`](fn.dilate.html)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":377336,"byte_end":377403,"line_start":212,"line_end":212,"column_start":1,"column_end":68}},{"value":"/ documentation for definitions of dilation and erosion.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":377404,"byte_end":377462,"line_start":213,"line_end":213,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":1768},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379942,"byte_end":379947,"line_start":308,"line_end":308,"column_start":8,"column_end":13},"name":"close","qualname":"::morphology::close","value":"pub fn close(&GrayImage, Norm, u8) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Dilation followed by erosion.","sig":null,"attributes":[{"value":"/ Dilation followed by erosion.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":377589,"byte_end":377622,"line_start":219,"line_end":219,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":377623,"byte_end":377626,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ See the [`erode`](fn.erode.html) and [`dilate`](fn.dilate.html)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":377627,"byte_end":377694,"line_start":221,"line_end":221,"column_start":1,"column_end":68}},{"value":"/ documentation for definitions of dilation and erosion.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":377695,"byte_end":377753,"line_start":222,"line_end":222,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":377754,"byte_end":377757,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":377758,"byte_end":377772,"line_start":224,"line_end":224,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":377773,"byte_end":377780,"line_start":225,"line_end":225,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":377781,"byte_end":377806,"line_start":226,"line_end":226,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":377807,"byte_end":377825,"line_start":227,"line_end":227,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":377826,"byte_end":377855,"line_start":228,"line_end":228,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":377856,"byte_end":377873,"line_start":229,"line_end":229,"column_start":1,"column_end":18}},{"value":"/ use imageproc::morphology::close;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":377874,"byte_end":377911,"line_start":230,"line_end":230,"column_start":1,"column_end":38}},{"value":"/ use imageproc::distance_transform::Norm;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":377912,"byte_end":377956,"line_start":231,"line_end":231,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":377957,"byte_end":377960,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ // Small holes are closed - hence the name.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":377961,"byte_end":378008,"line_start":233,"line_end":233,"column_start":1,"column_end":48}},{"value":"/ let small_hole = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378009,"byte_end":378042,"line_start":234,"line_end":234,"column_start":1,"column_end":34}},{"value":"/     255, 255, 255, 255;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378043,"byte_end":378070,"line_start":235,"line_end":235,"column_start":1,"column_end":28}},{"value":"/     255,   0,   0, 255;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378071,"byte_end":378098,"line_start":236,"line_end":236,"column_start":1,"column_end":28}},{"value":"/     255,   0,   0, 255;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378099,"byte_end":378126,"line_start":237,"line_end":237,"column_start":1,"column_end":28}},{"value":"/     255, 255, 255, 255","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378127,"byte_end":378153,"line_start":238,"line_end":238,"column_start":1,"column_end":27}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378154,"byte_end":378160,"line_start":239,"line_end":239,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378161,"byte_end":378164,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ let closed_small_hole = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378165,"byte_end":378205,"line_start":241,"line_end":241,"column_start":1,"column_end":41}},{"value":"/     255, 255, 255, 255;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378206,"byte_end":378233,"line_start":242,"line_end":242,"column_start":1,"column_end":28}},{"value":"/     255, 255, 255, 255;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378234,"byte_end":378261,"line_start":243,"line_end":243,"column_start":1,"column_end":28}},{"value":"/     255, 255, 255, 255;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378262,"byte_end":378289,"line_start":244,"line_end":244,"column_start":1,"column_end":28}},{"value":"/     255, 255, 255, 255","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378290,"byte_end":378316,"line_start":245,"line_end":245,"column_start":1,"column_end":27}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378317,"byte_end":378323,"line_start":246,"line_end":246,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378324,"byte_end":378327,"line_start":247,"line_end":247,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378328,"byte_end":378350,"line_start":248,"line_end":248,"column_start":1,"column_end":23}},{"value":"/     close(&small_hole, Norm::LInf, 1),","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378351,"byte_end":378393,"line_start":249,"line_end":249,"column_start":1,"column_end":43}},{"value":"/     closed_small_hole","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378394,"byte_end":378419,"line_start":250,"line_end":250,"column_start":1,"column_end":26}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378420,"byte_end":378426,"line_start":251,"line_end":251,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378427,"byte_end":378430,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ // Large holes survive unchanged.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378431,"byte_end":378468,"line_start":253,"line_end":253,"column_start":1,"column_end":38}},{"value":"/ let large_hole = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378469,"byte_end":378502,"line_start":254,"line_end":254,"column_start":1,"column_end":34}},{"value":"/     255, 255, 255, 255, 255;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378503,"byte_end":378535,"line_start":255,"line_end":255,"column_start":1,"column_end":33}},{"value":"/     255,   0,   0,   0, 255;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378536,"byte_end":378568,"line_start":256,"line_end":256,"column_start":1,"column_end":33}},{"value":"/     255,   0,   0,   0, 255;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378569,"byte_end":378601,"line_start":257,"line_end":257,"column_start":1,"column_end":33}},{"value":"/     255,   0,   0,   0, 255;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378602,"byte_end":378634,"line_start":258,"line_end":258,"column_start":1,"column_end":33}},{"value":"/     255, 255, 255, 255, 255","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378635,"byte_end":378666,"line_start":259,"line_end":259,"column_start":1,"column_end":32}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378667,"byte_end":378673,"line_start":260,"line_end":260,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378674,"byte_end":378677,"line_start":261,"line_end":261,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378678,"byte_end":378700,"line_start":262,"line_end":262,"column_start":1,"column_end":23}},{"value":"/     close(&large_hole, Norm::LInf, 1),","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378701,"byte_end":378743,"line_start":263,"line_end":263,"column_start":1,"column_end":43}},{"value":"/     large_hole","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378744,"byte_end":378762,"line_start":264,"line_end":264,"column_start":1,"column_end":19}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378763,"byte_end":378769,"line_start":265,"line_end":265,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378770,"byte_end":378773,"line_start":266,"line_end":266,"column_start":1,"column_end":4}},{"value":"/ // A dot gains a layer of foreground pixels","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378774,"byte_end":378821,"line_start":267,"line_end":267,"column_start":1,"column_end":48}},{"value":"/ // when dilated and loses them again when eroded,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378822,"byte_end":378875,"line_start":268,"line_end":268,"column_start":1,"column_end":54}},{"value":"/ // resulting in no change.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378876,"byte_end":378906,"line_start":269,"line_end":269,"column_start":1,"column_end":31}},{"value":"/ let dot = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378907,"byte_end":378933,"line_start":270,"line_end":270,"column_start":1,"column_end":27}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378934,"byte_end":378966,"line_start":271,"line_end":271,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":378967,"byte_end":378999,"line_start":272,"line_end":272,"column_start":1,"column_end":33}},{"value":"/       0,   0, 255,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379000,"byte_end":379032,"line_start":273,"line_end":273,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379033,"byte_end":379065,"line_start":274,"line_end":274,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379066,"byte_end":379097,"line_start":275,"line_end":275,"column_start":1,"column_end":32}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379098,"byte_end":379104,"line_start":276,"line_end":276,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379105,"byte_end":379108,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379109,"byte_end":379131,"line_start":278,"line_end":278,"column_start":1,"column_end":23}},{"value":"/     close(&dot, Norm::LInf, 1),","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379132,"byte_end":379167,"line_start":279,"line_end":279,"column_start":1,"column_end":36}},{"value":"/     dot","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379168,"byte_end":379179,"line_start":280,"line_end":280,"column_start":1,"column_end":12}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379180,"byte_end":379186,"line_start":281,"line_end":281,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379187,"byte_end":379190,"line_start":282,"line_end":282,"column_start":1,"column_end":4}},{"value":"/ // A dot near the boundary gains pixels in the top-left","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379191,"byte_end":379250,"line_start":283,"line_end":283,"column_start":1,"column_end":60}},{"value":"/ // of the image which are not within distance 1 of any","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379251,"byte_end":379309,"line_start":284,"line_end":284,"column_start":1,"column_end":59}},{"value":"/ // background pixels, so are not removed by erosion.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379310,"byte_end":379366,"line_start":285,"line_end":285,"column_start":1,"column_end":57}},{"value":"/ let dot_near_boundary = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379367,"byte_end":379407,"line_start":286,"line_end":286,"column_start":1,"column_end":41}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379408,"byte_end":379440,"line_start":287,"line_end":287,"column_start":1,"column_end":33}},{"value":"/       0, 255,   0,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379441,"byte_end":379473,"line_start":288,"line_end":288,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379474,"byte_end":379506,"line_start":289,"line_end":289,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379507,"byte_end":379539,"line_start":290,"line_end":290,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379540,"byte_end":379571,"line_start":291,"line_end":291,"column_start":1,"column_end":32}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379572,"byte_end":379578,"line_start":292,"line_end":292,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379579,"byte_end":379582,"line_start":293,"line_end":293,"column_start":1,"column_end":4}},{"value":"/ let closed_dot_near_boundary = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379583,"byte_end":379630,"line_start":294,"line_end":294,"column_start":1,"column_end":48}},{"value":"/     255, 255,   0,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379631,"byte_end":379663,"line_start":295,"line_end":295,"column_start":1,"column_end":33}},{"value":"/     255, 255,   0,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379664,"byte_end":379696,"line_start":296,"line_end":296,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379697,"byte_end":379729,"line_start":297,"line_end":297,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379730,"byte_end":379762,"line_start":298,"line_end":298,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379763,"byte_end":379794,"line_start":299,"line_end":299,"column_start":1,"column_end":32}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379795,"byte_end":379801,"line_start":300,"line_end":300,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379802,"byte_end":379805,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379806,"byte_end":379828,"line_start":302,"line_end":302,"column_start":1,"column_end":23}},{"value":"/     close(&dot_near_boundary, Norm::LInf, 1),","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379829,"byte_end":379878,"line_start":303,"line_end":303,"column_start":1,"column_end":50}},{"value":"/     closed_dot_near_boundary","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379879,"byte_end":379911,"line_start":304,"line_end":304,"column_start":1,"column_end":33}},{"value":"/ );","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379912,"byte_end":379918,"line_start":305,"line_end":305,"column_start":1,"column_end":7}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379919,"byte_end":379926,"line_start":306,"line_end":306,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":379927,"byte_end":379934,"line_start":307,"line_end":307,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1769},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":380316,"byte_end":380325,"line_start":319,"line_end":319,"column_start":8,"column_end":17},"name":"close_mut","qualname":"::morphology::close_mut","value":"pub fn close_mut(&mut GrayImage, Norm, u8)","parent":null,"children":[],"decl_id":null,"docs":" Dilation followed by erosion.","sig":null,"attributes":[{"value":"/ Dilation followed by erosion.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":380079,"byte_end":380112,"line_start":314,"line_end":314,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":380113,"byte_end":380116,"line_start":315,"line_end":315,"column_start":1,"column_end":4}},{"value":"/ See the [`close`](fn.close.html) documentation for examples,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":380117,"byte_end":380181,"line_start":316,"line_end":316,"column_start":1,"column_end":65}},{"value":"/ and the [`erode`](fn.erode.html) and [`dilate`](fn.dilate.html)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":380182,"byte_end":380249,"line_start":317,"line_end":317,"column_start":1,"column_end":68}},{"value":"/ documentation for definitions of dilation and erosion.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\morphology.rs","byte_start":380250,"byte_end":380308,"line_start":318,"line_end":318,"column_start":1,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":1770},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\noise.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"noise","qualname":"::noise","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\noise.rs","parent":null,"children":[{"krate":0,"index":1771},{"krate":0,"index":1772},{"krate":0,"index":1775},{"krate":0,"index":1778},{"krate":0,"index":1781},{"krate":0,"index":1784},{"krate":0,"index":1787},{"krate":0,"index":1790},{"krate":0,"index":1793},{"krate":0,"index":1794},{"krate":0,"index":1797},{"krate":0,"index":1800},{"krate":0,"index":1801},{"krate":0,"index":1804},{"krate":0,"index":1807},{"krate":0,"index":1810},{"krate":0,"index":1812},{"krate":0,"index":1814},{"krate":0,"index":1816}],"decl_id":null,"docs":" Functions for adding synthetic noise to images.\n","sig":null,"attributes":[{"value":"/ Functions for adding synthetic noise to images.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\noise.rs","byte_start":384903,"byte_end":384954,"line_start":1,"line_end":1,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":1810},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\noise.rs","byte_start":385296,"byte_end":385310,"line_start":12,"line_end":12,"column_start":8,"column_end":22},"name":"gaussian_noise","qualname":"::noise::gaussian_noise","value":"pub fn gaussian_noise<P>(&Image<P>, f64, f64, u64) -> Image<P> where\nP: Pixel + 'static, P::Subpixel: ValueInto<f64> + Clamp<f64>","parent":null,"children":[],"decl_id":null,"docs":" Adds independent additive Gaussian noise to all channels\n of an image, with the given mean and standard deviation.\n","sig":null,"attributes":[{"value":"/ Adds independent additive Gaussian noise to all channels","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\noise.rs","byte_start":385167,"byte_end":385227,"line_start":10,"line_end":10,"column_start":1,"column_end":61}},{"value":"/ of an image, with the given mean and standard deviation.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\noise.rs","byte_start":385228,"byte_end":385288,"line_start":11,"line_end":11,"column_start":1,"column_end":61}}]},{"kind":"Function","id":{"krate":0,"index":1812},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\noise.rs","byte_start":385693,"byte_end":385711,"line_start":24,"line_end":24,"column_start":8,"column_end":26},"name":"gaussian_noise_mut","qualname":"::noise::gaussian_noise_mut","value":"pub fn gaussian_noise_mut<P>(&mut Image<P>, f64, f64, u64) where P: Pixel +\n'static, P::Subpixel: ValueInto<f64> + Clamp<f64>","parent":null,"children":[],"decl_id":null,"docs":" Adds independent additive Gaussian noise to all channels\n of an image in place, with the given mean and standard deviation.\n","sig":null,"attributes":[{"value":"/ Adds independent additive Gaussian noise to all channels","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\noise.rs","byte_start":385555,"byte_end":385615,"line_start":22,"line_end":22,"column_start":1,"column_end":61}},{"value":"/ of an image in place, with the given mean and standard deviation.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\noise.rs","byte_start":385616,"byte_end":385685,"line_start":23,"line_end":23,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":1814},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\noise.rs","byte_start":386295,"byte_end":386316,"line_start":42,"line_end":42,"column_start":8,"column_end":29},"name":"salt_and_pepper_noise","qualname":"::noise::salt_and_pepper_noise","value":"pub fn salt_and_pepper_noise<P>(&Image<P>, f64, u64) -> Image<P> where\nP: Pixel + HasBlack + HasWhite + 'static","parent":null,"children":[],"decl_id":null,"docs":" Converts pixels to black or white at the given `rate` (between 0.0 and 1.0).\n Black and white occur with equal probability.\n","sig":null,"attributes":[{"value":"/ Converts pixels to black or white at the given `rate` (between 0.0 and 1.0).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\noise.rs","byte_start":386157,"byte_end":386237,"line_start":40,"line_end":40,"column_start":1,"column_end":81}},{"value":"/ Black and white occur with equal probability.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\noise.rs","byte_start":386238,"byte_end":386287,"line_start":41,"line_end":41,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":1816},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\noise.rs","byte_start":386670,"byte_end":386695,"line_start":53,"line_end":53,"column_start":8,"column_end":33},"name":"salt_and_pepper_noise_mut","qualname":"::noise::salt_and_pepper_noise_mut","value":"pub fn salt_and_pepper_noise_mut<P>(&mut Image<P>, f64, u64) where P: Pixel +\nHasBlack + HasWhite + 'static","parent":null,"children":[],"decl_id":null,"docs":" Converts pixels to black or white in place at the given `rate` (between 0.0 and 1.0).\n Black and white occur with equal probability.\n","sig":null,"attributes":[{"value":"/ Converts pixels to black or white in place at the given `rate` (between 0.0 and 1.0).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\noise.rs","byte_start":386523,"byte_end":386612,"line_start":51,"line_end":51,"column_start":1,"column_end":90}},{"value":"/ Black and white occur with equal probability.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\noise.rs","byte_start":386613,"byte_end":386662,"line_start":52,"line_end":52,"column_start":1,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":1818},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pixelops","qualname":"::pixelops","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","parent":null,"children":[{"krate":0,"index":1819},{"krate":0,"index":1822},{"krate":0,"index":1825},{"krate":0,"index":1828},{"krate":0,"index":1831},{"krate":0,"index":1834},{"krate":0,"index":1836}],"decl_id":null,"docs":" Pixel manipulations.\n","sig":null,"attributes":[{"value":"/ Pixel manipulations.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":387714,"byte_end":387738,"line_start":1,"line_end":1,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":1831},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":388297,"byte_end":388309,"line_start":25,"line_end":25,"column_start":8,"column_end":20},"name":"weighted_sum","qualname":"::pixelops::weighted_sum","value":"pub fn weighted_sum<P: Pixel>(P, P, f32, f32) -> P where\nP::Subpixel: ValueInto<f32> + Clamp<f32>","parent":null,"children":[],"decl_id":null,"docs":" Adds pixels with the given weights. Results are clamped to prevent arithmetical overflows.","sig":null,"attributes":[{"value":"/ Adds pixels with the given weights. Results are clamped to prevent arithmetical overflows.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":387834,"byte_end":387928,"line_start":8,"line_end":8,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":387929,"byte_end":387932,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":387933,"byte_end":387947,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":387948,"byte_end":387955,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":387956,"byte_end":387981,"line_start":12,"line_end":12,"column_start":1,"column_end":26}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":387982,"byte_end":388011,"line_start":13,"line_end":13,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":388012,"byte_end":388029,"line_start":14,"line_end":14,"column_start":1,"column_end":18}},{"value":"/ use image::Rgb;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":388030,"byte_end":388049,"line_start":15,"line_end":15,"column_start":1,"column_end":20}},{"value":"/ use imageproc::pixelops::weighted_sum;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":388050,"byte_end":388092,"line_start":16,"line_end":16,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":388093,"byte_end":388096,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ let left = Rgb([10u8, 20u8, 30u8]);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":388097,"byte_end":388136,"line_start":18,"line_end":18,"column_start":1,"column_end":40}},{"value":"/ let right = Rgb([100u8, 80u8, 60u8]);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":388137,"byte_end":388178,"line_start":19,"line_end":19,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":388179,"byte_end":388182,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ let sum = weighted_sum(left, right, 0.7, 0.3);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":388183,"byte_end":388233,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(sum, Rgb([37, 38, 39]));","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":388234,"byte_end":388273,"line_start":22,"line_end":22,"column_start":1,"column_end":40}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":388274,"byte_end":388281,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":388282,"byte_end":388289,"line_start":24,"line_end":24,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1834},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":388976,"byte_end":388987,"line_start":51,"line_end":51,"column_start":8,"column_end":19},"name":"interpolate","qualname":"::pixelops::interpolate","value":"pub fn interpolate<P: Pixel>(P, P, f32) -> P where\nP::Subpixel: ValueInto<f32> + Clamp<f32>","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to `weighted_sum(left, right, left_weight, 1 - left_weight)`.","sig":null,"attributes":[{"value":"/ Equivalent to `weighted_sum(left, right, left_weight, 1 - left_weight)`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":388538,"byte_end":388614,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":388615,"byte_end":388618,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":388619,"byte_end":388633,"line_start":36,"line_end":36,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":388634,"byte_end":388641,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":388642,"byte_end":388667,"line_start":38,"line_end":38,"column_start":1,"column_end":26}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":388668,"byte_end":388697,"line_start":39,"line_end":39,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":388698,"byte_end":388715,"line_start":40,"line_end":40,"column_start":1,"column_end":18}},{"value":"/ use image::Rgb;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":388716,"byte_end":388735,"line_start":41,"line_end":41,"column_start":1,"column_end":20}},{"value":"/ use imageproc::pixelops::interpolate;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":388736,"byte_end":388777,"line_start":42,"line_end":42,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":388778,"byte_end":388781,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ let left = Rgb([10u8, 20u8, 30u8]);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":388782,"byte_end":388821,"line_start":44,"line_end":44,"column_start":1,"column_end":40}},{"value":"/ let right = Rgb([100u8, 80u8, 60u8]);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":388822,"byte_end":388863,"line_start":45,"line_end":45,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":388864,"byte_end":388867,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ let sum = interpolate(left, right, 0.7);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":388868,"byte_end":388912,"line_start":47,"line_end":47,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(sum, Rgb([37, 38, 39]));","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":388913,"byte_end":388952,"line_start":48,"line_end":48,"column_start":1,"column_end":40}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":388953,"byte_end":388960,"line_start":49,"line_end":49,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\pixelops.rs","byte_start":388961,"byte_end":388968,"line_start":50,"line_end":50,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1838},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\point.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"point","qualname":"::point","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\point.rs","parent":null,"children":[{"krate":0,"index":1839},{"krate":0,"index":1840},{"krate":0,"index":1843},{"krate":0,"index":1846},{"krate":0,"index":1847},{"krate":0,"index":1850},{"krate":0,"index":1853},{"krate":0,"index":1856},{"krate":0,"index":2572},{"krate":0,"index":2576},{"krate":0,"index":2579},{"krate":0,"index":2581},{"krate":0,"index":2584},{"krate":0,"index":2586},{"krate":0,"index":2590},{"krate":0,"index":2592},{"krate":0,"index":1859},{"krate":0,"index":1862},{"krate":0,"index":1866},{"krate":0,"index":1869},{"krate":0,"index":1873},{"krate":0,"index":1876},{"krate":0,"index":1880},{"krate":0,"index":1882},{"krate":0,"index":2595},{"krate":0,"index":2598},{"krate":0,"index":2600},{"krate":0,"index":2601},{"krate":0,"index":2603},{"krate":0,"index":2604},{"krate":0,"index":1884},{"krate":0,"index":1886},{"krate":0,"index":2607},{"krate":0,"index":2611},{"krate":0,"index":2613},{"krate":0,"index":2614},{"krate":0,"index":2616},{"krate":0,"index":2617},{"krate":0,"index":1889}],"decl_id":null,"docs":" A 2d point type.\n","sig":null,"attributes":[{"value":"/ A 2d point type.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\point.rs","byte_start":391213,"byte_end":391233,"line_start":1,"line_end":1,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":2572},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\point.rs","byte_start":391381,"byte_end":391386,"line_start":8,"line_end":8,"column_start":12,"column_end":17},"name":"Point","qualname":"::point::Point","value":"Point { x, y }","parent":null,"children":[{"krate":0,"index":2574},{"krate":0,"index":2575}],"decl_id":null,"docs":" A 2d point.\n","sig":null,"attributes":[{"value":"/ A 2d point.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\point.rs","byte_start":391309,"byte_end":391324,"line_start":6,"line_end":6,"column_start":1,"column_end":16}}]},{"kind":"Field","id":{"krate":0,"index":2574},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\point.rs","byte_start":391422,"byte_end":391423,"line_start":10,"line_end":10,"column_start":9,"column_end":10},"name":"x","qualname":"::point::Point::x","value":"T","parent":{"krate":0,"index":2572},"children":[],"decl_id":null,"docs":" x-coordinate.\n","sig":null,"attributes":[{"value":"/ x-coordinate.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\point.rs","byte_start":391396,"byte_end":391413,"line_start":9,"line_end":9,"column_start":5,"column_end":22}}]},{"kind":"Field","id":{"krate":0,"index":2575},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\point.rs","byte_start":391458,"byte_end":391459,"line_start":12,"line_end":12,"column_start":9,"column_end":10},"name":"y","qualname":"::point::Point::y","value":"T","parent":{"krate":0,"index":2572},"children":[],"decl_id":null,"docs":" y-coordinate.\n","sig":null,"attributes":[{"value":"/ y-coordinate.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\point.rs","byte_start":391432,"byte_end":391449,"line_start":11,"line_end":11,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1861},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\point.rs","byte_start":391534,"byte_end":391537,"line_start":17,"line_end":17,"column_start":12,"column_end":15},"name":"new","qualname":"<Point<T>>::new","value":"pub fn new(T, T) -> Point<T>","parent":null,"children":[],"decl_id":null,"docs":" Construct a point at (x, y).\n","sig":null,"attributes":[{"value":"/ Construct a point at (x, y).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\point.rs","byte_start":391490,"byte_end":391522,"line_start":16,"line_end":16,"column_start":5,"column_end":37}}]},{"kind":"Mod","id":{"krate":0,"index":1892},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rect","qualname":"::rect","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","parent":null,"children":[{"krate":0,"index":1893},{"krate":0,"index":2620},{"krate":0,"index":2625},{"krate":0,"index":2626},{"krate":0,"index":2628},{"krate":0,"index":2630},{"krate":0,"index":2631},{"krate":0,"index":2634},{"krate":0,"index":2635},{"krate":0,"index":1896},{"krate":0,"index":1899},{"krate":0,"index":1908},{"krate":0,"index":1910},{"krate":0,"index":2637},{"krate":0,"index":2640},{"krate":0,"index":2641},{"krate":0,"index":2643},{"krate":0,"index":2645},{"krate":0,"index":2646},{"krate":0,"index":2649},{"krate":0,"index":2650},{"krate":0,"index":1912}],"decl_id":null,"docs":" Basic manipulation of rectangles.\n","sig":null,"attributes":[{"value":"/ Basic manipulation of rectangles.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":395474,"byte_end":395511,"line_start":1,"line_end":1,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":2620},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":396224,"byte_end":396228,"line_start":25,"line_end":25,"column_start":12,"column_end":16},"name":"Rect","qualname":"::rect::Rect","value":"Rect {  }","parent":null,"children":[{"krate":0,"index":2621},{"krate":0,"index":2622},{"krate":0,"index":2623},{"krate":0,"index":2624}],"decl_id":null,"docs":" A rectangular region of non-zero width and height.\n # Examples\n ```\n use imageproc::rect::Rect;\n use imageproc::rect::Region;","sig":null,"attributes":[{"value":"/ A rectangular region of non-zero width and height.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":395528,"byte_end":395582,"line_start":5,"line_end":5,"column_start":1,"column_end":55}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":395583,"byte_end":395597,"line_start":6,"line_end":6,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":395598,"byte_end":395605,"line_start":7,"line_end":7,"column_start":1,"column_end":8}},{"value":"/ use imageproc::rect::Rect;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":395606,"byte_end":395636,"line_start":8,"line_end":8,"column_start":1,"column_end":31}},{"value":"/ use imageproc::rect::Region;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":395637,"byte_end":395669,"line_start":9,"line_end":9,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":395670,"byte_end":395673,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ // Construct a rectangle with top-left corner at (4, 5), width 6 and height 7.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":395674,"byte_end":395756,"line_start":11,"line_end":11,"column_start":1,"column_end":83}},{"value":"/ let rect = Rect::at(4, 5).of_size(6, 7);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":395757,"byte_end":395801,"line_start":12,"line_end":12,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":395802,"byte_end":395805,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ // Contains top-left point:","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":395806,"byte_end":395837,"line_start":14,"line_end":14,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(rect.left(), 4);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":395838,"byte_end":395869,"line_start":15,"line_end":15,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(rect.top(), 5);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":395870,"byte_end":395900,"line_start":16,"line_end":16,"column_start":1,"column_end":31}},{"value":"/ assert!(rect.contains(rect.left(), rect.top()));","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":395901,"byte_end":395953,"line_start":17,"line_end":17,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":395954,"byte_end":395957,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ // Contains bottom-right point, at (left + width - 1, top + height - 1):","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":395958,"byte_end":396034,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ assert_eq!(rect.right(), 9);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":396035,"byte_end":396067,"line_start":20,"line_end":20,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(rect.bottom(), 11);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":396068,"byte_end":396102,"line_start":21,"line_end":21,"column_start":1,"column_end":35}},{"value":"/ assert!(rect.contains(rect.right(), rect.bottom()));","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":396103,"byte_end":396159,"line_start":22,"line_end":22,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":396160,"byte_end":396167,"line_start":23,"line_end":23,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":1896},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":396385,"byte_end":396391,"line_start":33,"line_end":33,"column_start":11,"column_end":17},"name":"Region","qualname":"::rect::Region","value":"Region<T>","parent":null,"children":[{"krate":0,"index":1898}],"decl_id":null,"docs":" A geometrical representation of a set of 2D points with coordinate type T.\n","sig":null,"attributes":[{"value":"/ A geometrical representation of a set of 2D points with coordinate type T.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":396296,"byte_end":396374,"line_start":32,"line_end":32,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1898},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":396458,"byte_end":396466,"line_start":35,"line_end":35,"column_start":8,"column_end":16},"name":"contains","qualname":"::rect::Region::contains","value":"pub fn contains(&Self, T, T) -> bool","parent":{"krate":0,"index":1896},"children":[],"decl_id":null,"docs":" Whether this region contains the given point.\n","sig":null,"attributes":[{"value":"/ Whether this region contains the given point.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":396401,"byte_end":396450,"line_start":34,"line_end":34,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1900},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":396705,"byte_end":396707,"line_start":43,"line_end":43,"column_start":12,"column_end":14},"name":"at","qualname":"<Rect>::at","value":"pub fn at(i32, i32) -> RectPosition","parent":null,"children":[],"decl_id":null,"docs":" Reduces possibility of confusing coordinates and dimensions\n when specifying rects.","sig":null,"attributes":[{"value":"/ Reduces possibility of confusing coordinates and dimensions","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":396514,"byte_end":396577,"line_start":39,"line_end":39,"column_start":5,"column_end":68}},{"value":"/ when specifying rects.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":396582,"byte_end":396608,"line_start":40,"line_end":40,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":396613,"byte_end":396616,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ See the [struct-level documentation](struct.Rect.html) for examples.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":396621,"byte_end":396693,"line_start":42,"line_end":42,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1901},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":396933,"byte_end":396936,"line_start":50,"line_end":50,"column_start":12,"column_end":15},"name":"top","qualname":"<Rect>::top","value":"pub fn top(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Smallest y-coordinate reached by rect.","sig":null,"attributes":[{"value":"/ Smallest y-coordinate reached by rect.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":396794,"byte_end":396836,"line_start":47,"line_end":47,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":396841,"byte_end":396844,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ See the [struct-level documentation](struct.Rect.html) for examples.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":396849,"byte_end":396921,"line_start":49,"line_end":49,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1902},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":397120,"byte_end":397124,"line_start":57,"line_end":57,"column_start":12,"column_end":16},"name":"left","qualname":"<Rect>::left","value":"pub fn left(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Smallest x-coordinate reached by rect.","sig":null,"attributes":[{"value":"/ Smallest x-coordinate reached by rect.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":396981,"byte_end":397023,"line_start":54,"line_end":54,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":397028,"byte_end":397031,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ See the [struct-level documentation](struct.Rect.html) for examples.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":397036,"byte_end":397108,"line_start":56,"line_end":56,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1903},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":397309,"byte_end":397315,"line_start":64,"line_end":64,"column_start":12,"column_end":18},"name":"bottom","qualname":"<Rect>::bottom","value":"pub fn bottom(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Greatest y-coordinate reached by rect.","sig":null,"attributes":[{"value":"/ Greatest y-coordinate reached by rect.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":397170,"byte_end":397212,"line_start":61,"line_end":61,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":397217,"byte_end":397220,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ See the [struct-level documentation](struct.Rect.html) for examples.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":397225,"byte_end":397297,"line_start":63,"line_end":63,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1904},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":397526,"byte_end":397531,"line_start":71,"line_end":71,"column_start":12,"column_end":17},"name":"right","qualname":"<Rect>::right","value":"pub fn right(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Greatest x-coordinate reached by rect.","sig":null,"attributes":[{"value":"/ Greatest x-coordinate reached by rect.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":397387,"byte_end":397429,"line_start":68,"line_end":68,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":397434,"byte_end":397437,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ See the [struct-level documentation](struct.Rect.html) for examples.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":397442,"byte_end":397514,"line_start":70,"line_end":70,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1905},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":397633,"byte_end":397638,"line_start":76,"line_end":76,"column_start":12,"column_end":17},"name":"width","qualname":"<Rect>::width","value":"pub fn width(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Width of rect.\n","sig":null,"attributes":[{"value":"/ Width of rect.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":397603,"byte_end":397621,"line_start":75,"line_end":75,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":1906},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":397716,"byte_end":397722,"line_start":81,"line_end":81,"column_start":12,"column_end":18},"name":"height","qualname":"<Rect>::height","value":"pub fn height(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Height of rect.\n","sig":null,"attributes":[{"value":"/ Height of rect.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":397685,"byte_end":397704,"line_start":80,"line_end":80,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1907},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":398578,"byte_end":398587,"line_start":107,"line_end":107,"column_start":12,"column_end":21},"name":"intersect","qualname":"<Rect>::intersect","value":"pub fn intersect(&Self, Rect) -> Option<Rect>","parent":null,"children":[],"decl_id":null,"docs":" Returns the intersection of self and other, or none if they are are disjoint.","sig":null,"attributes":[{"value":"/ Returns the intersection of self and other, or none if they are are disjoint.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":397770,"byte_end":397851,"line_start":85,"line_end":85,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":397856,"byte_end":397859,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":397864,"byte_end":397878,"line_start":87,"line_end":87,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":397883,"byte_end":397890,"line_start":88,"line_end":88,"column_start":5,"column_end":12}},{"value":"/ use imageproc::rect::Rect;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":397895,"byte_end":397925,"line_start":89,"line_end":89,"column_start":5,"column_end":35}},{"value":"/ use imageproc::rect::Region;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":397930,"byte_end":397962,"line_start":90,"line_end":90,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":397967,"byte_end":397970,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ // Intersecting a rectangle with itself","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":397975,"byte_end":398018,"line_start":92,"line_end":92,"column_start":5,"column_end":48}},{"value":"/ let r = Rect::at(4, 5).of_size(6, 7);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":398023,"byte_end":398064,"line_start":93,"line_end":93,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(r.intersect(r), Some(r));","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":398069,"byte_end":398109,"line_start":94,"line_end":94,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":398114,"byte_end":398117,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ // Intersecting overlapping but non-equal rectangles","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":398122,"byte_end":398178,"line_start":96,"line_end":96,"column_start":5,"column_end":61}},{"value":"/ let r = Rect::at(0, 0).of_size(5, 5);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":398183,"byte_end":398224,"line_start":97,"line_end":97,"column_start":5,"column_end":46}},{"value":"/ let s = Rect::at(1, 4).of_size(10, 12);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":398229,"byte_end":398272,"line_start":98,"line_end":98,"column_start":5,"column_end":48}},{"value":"/ let i = Rect::at(1, 4).of_size(4, 1);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":398277,"byte_end":398318,"line_start":99,"line_end":99,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(r.intersect(s), Some(i));","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":398323,"byte_end":398363,"line_start":100,"line_end":100,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":398368,"byte_end":398371,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ // Intersecting disjoint rectangles","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":398376,"byte_end":398415,"line_start":102,"line_end":102,"column_start":5,"column_end":44}},{"value":"/ let r = Rect::at(0, 0).of_size(5, 5);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":398420,"byte_end":398461,"line_start":103,"line_end":103,"column_start":5,"column_end":46}},{"value":"/ let s = Rect::at(10, 10).of_size(100, 12);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":398466,"byte_end":398512,"line_start":104,"line_end":104,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(r.intersect(s), None);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":398517,"byte_end":398554,"line_start":105,"line_end":105,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":398559,"byte_end":398566,"line_start":106,"line_end":106,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":2637},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":399656,"byte_end":399668,"line_start":144,"line_end":144,"column_start":12,"column_end":24},"name":"RectPosition","qualname":"::rect::RectPosition","value":"RectPosition {  }","parent":null,"children":[{"krate":0,"index":2638},{"krate":0,"index":2639}],"decl_id":null,"docs":" Position of the top left of a rectangle.\n Only used when building a [`Rect`](struct.Rect.html).\n","sig":null,"attributes":[{"value":"/ Position of the top left of a rectangle.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":399497,"byte_end":399541,"line_start":141,"line_end":141,"column_start":1,"column_end":45}},{"value":"/ Only used when building a [`Rect`](struct.Rect.html).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":399542,"byte_end":399599,"line_start":142,"line_end":142,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1913},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":399932,"byte_end":399939,"line_start":154,"line_end":154,"column_start":12,"column_end":19},"name":"of_size","qualname":"<RectPosition>::of_size","value":"pub fn of_size(Self, u32, u32) -> Rect","parent":null,"children":[],"decl_id":null,"docs":" Construct a rectangle from a position and size. Width and height\n are required to be strictly positive.","sig":null,"attributes":[{"value":"/ Construct a rectangle from a position and size. Width and height","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":399727,"byte_end":399795,"line_start":150,"line_end":150,"column_start":5,"column_end":73}},{"value":"/ are required to be strictly positive.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":399800,"byte_end":399841,"line_start":151,"line_end":151,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":399846,"byte_end":399849,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ See the [`Rect`](struct.Rect.html) documentation for examples.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":399854,"byte_end":399920,"line_start":153,"line_end":153,"column_start":5,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":1914},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"region_labelling","qualname":"::region_labelling","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","parent":null,"children":[{"krate":0,"index":1915},{"krate":0,"index":1916},{"krate":0,"index":1919},{"krate":0,"index":1922},{"krate":0,"index":1925},{"krate":0,"index":1926},{"krate":0,"index":1928},{"krate":0,"index":1931},{"krate":0,"index":1934},{"krate":0,"index":2652},{"krate":0,"index":2657},{"krate":0,"index":2659},{"krate":0,"index":2660},{"krate":0,"index":2662},{"krate":0,"index":2663},{"krate":0,"index":2665},{"krate":0,"index":2666},{"krate":0,"index":1937}],"decl_id":null,"docs":" Functions for finding and labelling connected components of an image.\n","sig":null,"attributes":[{"value":"/ Functions for finding and labelling connected components of an image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":400837,"byte_end":400910,"line_start":1,"line_end":1,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2653},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":401280,"byte_end":401284,"line_start":14,"line_end":14,"column_start":5,"column_end":9},"name":"Four","qualname":"::region_labelling::Connectivity::Four","value":"Connectivity::Four","parent":{"krate":0,"index":2652},"children":[],"decl_id":null,"docs":" A pixel is connected to its N, S, E and W neighbors.\n","sig":null,"attributes":[{"value":"/ A pixel is connected to its N, S, E and W neighbors.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":401219,"byte_end":401275,"line_start":13,"line_end":13,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2655},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":401344,"byte_end":401349,"line_start":16,"line_end":16,"column_start":5,"column_end":10},"name":"Eight","qualname":"::region_labelling::Connectivity::Eight","value":"Connectivity::Eight","parent":{"krate":0,"index":2652},"children":[],"decl_id":null,"docs":" A pixel is connected to all of its neighbors.\n","sig":null,"attributes":[{"value":"/ A pixel is connected to all of its neighbors.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":401290,"byte_end":401339,"line_start":15,"line_end":15,"column_start":5,"column_end":54}}]},{"kind":"Enum","id":{"krate":0,"index":2652},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":401200,"byte_end":401212,"line_start":12,"line_end":12,"column_start":10,"column_end":22},"name":"Connectivity","qualname":"::region_labelling::Connectivity","value":"pub enum Connectivity { Four, Eight, }","parent":null,"children":[{"krate":0,"index":2653},{"krate":0,"index":2655}],"decl_id":null,"docs":" Determines which neighbors of a pixel we consider\n to be connected to it.\n","sig":null,"attributes":[{"value":"/ Determines which neighbors of a pixel we consider","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":401065,"byte_end":401118,"line_start":9,"line_end":9,"column_start":1,"column_end":54}},{"value":"/ to be connected to it.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":401119,"byte_end":401145,"line_start":10,"line_end":10,"column_start":1,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":1937},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":404467,"byte_end":404487,"line_start":121,"line_end":121,"column_start":8,"column_end":28},"name":"connected_components","qualname":"::region_labelling::connected_components","value":"pub fn connected_components<I>(&I, Connectivity, I::Pixel) -> Image<Luma<u32>>\nwhere I: GenericImage, I::Pixel: Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns an image of the same size as the input, where each pixel\n is labelled by the connected foreground component it belongs to,\n or 0 if it's in the background. Input pixels are treated as belonging\n to the background if and only if they are equal to the provided background pixel.","sig":null,"attributes":[{"value":"/ Returns an image of the same size as the input, where each pixel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":401354,"byte_end":401422,"line_start":19,"line_end":19,"column_start":1,"column_end":69}},{"value":"/ is labelled by the connected foreground component it belongs to,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":401423,"byte_end":401491,"line_start":20,"line_end":20,"column_start":1,"column_end":69}},{"value":"/ or 0 if it's in the background. Input pixels are treated as belonging","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":401492,"byte_end":401565,"line_start":21,"line_end":21,"column_start":1,"column_end":74}},{"value":"/ to the background if and only if they are equal to the provided background pixel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":401566,"byte_end":401651,"line_start":22,"line_end":22,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":401652,"byte_end":401655,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":401656,"byte_end":401668,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/ Panics if the image contains 2<sup>32</sup> or more pixels. If this limitation causes you","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":401669,"byte_end":401762,"line_start":25,"line_end":25,"column_start":1,"column_end":94}},{"value":"/ problems then open an issue and we can rewrite this function to support larger images.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":401763,"byte_end":401853,"line_start":26,"line_end":26,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":401854,"byte_end":401857,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":401858,"byte_end":401872,"line_start":28,"line_end":28,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":401873,"byte_end":401876,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":401877,"byte_end":401884,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":401885,"byte_end":401910,"line_start":31,"line_end":31,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":401911,"byte_end":401929,"line_start":32,"line_end":32,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":401930,"byte_end":401959,"line_start":33,"line_end":33,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":401960,"byte_end":401977,"line_start":34,"line_end":34,"column_start":1,"column_end":18}},{"value":"/ use image::Luma;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":401978,"byte_end":401998,"line_start":35,"line_end":35,"column_start":1,"column_end":21}},{"value":"/ use imageproc::region_labelling::{connected_components, Connectivity};","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":401999,"byte_end":402073,"line_start":36,"line_end":36,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402074,"byte_end":402077,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ let background_color = Luma([0u8]);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402078,"byte_end":402117,"line_start":38,"line_end":38,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402118,"byte_end":402121,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402122,"byte_end":402150,"line_start":40,"line_end":40,"column_start":1,"column_end":29}},{"value":"/     1, 0, 1, 1;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402151,"byte_end":402170,"line_start":41,"line_end":41,"column_start":1,"column_end":20}},{"value":"/     0, 1, 1, 0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402171,"byte_end":402190,"line_start":42,"line_end":42,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402191,"byte_end":402210,"line_start":43,"line_end":43,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 1);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402211,"byte_end":402231,"line_start":44,"line_end":44,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402232,"byte_end":402235,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ // With four-way connectivity the foreground regions which","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402236,"byte_end":402298,"line_start":46,"line_end":46,"column_start":1,"column_end":63}},{"value":"/ // are only connected across diagonals belong to different","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402299,"byte_end":402361,"line_start":47,"line_end":47,"column_start":1,"column_end":63}},{"value":"/ // connected components.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402362,"byte_end":402390,"line_start":48,"line_end":48,"column_start":1,"column_end":29}},{"value":"/ let components_four = gray_image!(type: u32,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402391,"byte_end":402439,"line_start":49,"line_end":49,"column_start":1,"column_end":49}},{"value":"/     1, 0, 2, 2;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402440,"byte_end":402459,"line_start":50,"line_end":50,"column_start":1,"column_end":20}},{"value":"/     0, 2, 2, 0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402460,"byte_end":402479,"line_start":51,"line_end":51,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402480,"byte_end":402499,"line_start":52,"line_end":52,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 3);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402500,"byte_end":402520,"line_start":53,"line_end":53,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402521,"byte_end":402524,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402525,"byte_end":402547,"line_start":55,"line_end":55,"column_start":1,"column_end":23}},{"value":"/     connected_components(&image, Connectivity::Four, background_color),","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402548,"byte_end":402623,"line_start":56,"line_end":56,"column_start":1,"column_end":76}},{"value":"/     components_four);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402624,"byte_end":402649,"line_start":57,"line_end":57,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402650,"byte_end":402653,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ // With eight-way connectivity all foreground pixels in the top two rows","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402654,"byte_end":402730,"line_start":59,"line_end":59,"column_start":1,"column_end":77}},{"value":"/ // belong to the same connected component.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402731,"byte_end":402777,"line_start":60,"line_end":60,"column_start":1,"column_end":47}},{"value":"/ let components_eight = gray_image!(type: u32,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402778,"byte_end":402827,"line_start":61,"line_end":61,"column_start":1,"column_end":50}},{"value":"/     1, 0, 1, 1;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402828,"byte_end":402847,"line_start":62,"line_end":62,"column_start":1,"column_end":20}},{"value":"/     0, 1, 1, 0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402848,"byte_end":402867,"line_start":63,"line_end":63,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402868,"byte_end":402887,"line_start":64,"line_end":64,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 2);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402888,"byte_end":402908,"line_start":65,"line_end":65,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402909,"byte_end":402912,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402913,"byte_end":402935,"line_start":67,"line_end":67,"column_start":1,"column_end":23}},{"value":"/     connected_components(&image, Connectivity::Eight, background_color),","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":402936,"byte_end":403012,"line_start":68,"line_end":68,"column_start":1,"column_end":77}},{"value":"/     components_eight);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403013,"byte_end":403039,"line_start":69,"line_end":69,"column_start":1,"column_end":27}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403040,"byte_end":403047,"line_start":70,"line_end":70,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403048,"byte_end":403055,"line_start":71,"line_end":71,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403056,"byte_end":403059,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403060,"byte_end":403067,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403068,"byte_end":403093,"line_start":74,"line_end":74,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403094,"byte_end":403112,"line_start":75,"line_end":75,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403113,"byte_end":403142,"line_start":76,"line_end":76,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403143,"byte_end":403160,"line_start":77,"line_end":77,"column_start":1,"column_end":18}},{"value":"/ // This example is like the first, except that not all of the input foreground","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403161,"byte_end":403243,"line_start":78,"line_end":78,"column_start":1,"column_end":83}},{"value":"/ // pixels are the same color. Pixels of different color are never counted","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403244,"byte_end":403321,"line_start":79,"line_end":79,"column_start":1,"column_end":78}},{"value":"/ // as belonging to the same connected component.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403322,"byte_end":403374,"line_start":80,"line_end":80,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403375,"byte_end":403378,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ use image::Luma;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403379,"byte_end":403399,"line_start":82,"line_end":82,"column_start":1,"column_end":21}},{"value":"/ use imageproc::region_labelling::{connected_components, Connectivity};","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403400,"byte_end":403474,"line_start":83,"line_end":83,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403475,"byte_end":403478,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ let background_color = Luma([0u8]);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403479,"byte_end":403518,"line_start":85,"line_end":85,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403519,"byte_end":403522,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403523,"byte_end":403551,"line_start":87,"line_end":87,"column_start":1,"column_end":29}},{"value":"/     1, 0, 1, 1;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403552,"byte_end":403571,"line_start":88,"line_end":88,"column_start":1,"column_end":20}},{"value":"/     0, 1, 2, 0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403572,"byte_end":403591,"line_start":89,"line_end":89,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403592,"byte_end":403611,"line_start":90,"line_end":90,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 1);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403612,"byte_end":403632,"line_start":91,"line_end":91,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403633,"byte_end":403636,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ let components_four = gray_image!(type: u32,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403637,"byte_end":403685,"line_start":93,"line_end":93,"column_start":1,"column_end":49}},{"value":"/     1, 0, 2, 2;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403686,"byte_end":403705,"line_start":94,"line_end":94,"column_start":1,"column_end":20}},{"value":"/     0, 3, 4, 0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403706,"byte_end":403725,"line_start":95,"line_end":95,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403726,"byte_end":403745,"line_start":96,"line_end":96,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 5);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403746,"byte_end":403766,"line_start":97,"line_end":97,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403767,"byte_end":403770,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403771,"byte_end":403793,"line_start":99,"line_end":99,"column_start":1,"column_end":23}},{"value":"/     connected_components(&image, Connectivity::Four, background_color),","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403794,"byte_end":403869,"line_start":100,"line_end":100,"column_start":1,"column_end":76}},{"value":"/     components_four);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403870,"byte_end":403895,"line_start":101,"line_end":101,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403896,"byte_end":403899,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ // If this behaviour is not what you want then you can first","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403900,"byte_end":403964,"line_start":103,"line_end":103,"column_start":1,"column_end":65}},{"value":"/ // threshold the input image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403965,"byte_end":403998,"line_start":104,"line_end":104,"column_start":1,"column_end":34}},{"value":"/ use imageproc::contrast::threshold;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":403999,"byte_end":404038,"line_start":105,"line_end":105,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":404039,"byte_end":404042,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ // Pixels equal to the threshold are treated as background.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":404043,"byte_end":404106,"line_start":107,"line_end":107,"column_start":1,"column_end":64}},{"value":"/ let thresholded = threshold(&image, 0);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":404107,"byte_end":404150,"line_start":108,"line_end":108,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":404151,"byte_end":404154,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ let thresholded_components_four = gray_image!(type: u32,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":404155,"byte_end":404215,"line_start":110,"line_end":110,"column_start":1,"column_end":61}},{"value":"/     1, 0, 2, 2;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":404216,"byte_end":404235,"line_start":111,"line_end":111,"column_start":1,"column_end":20}},{"value":"/     0, 2, 2, 0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":404236,"byte_end":404255,"line_start":112,"line_end":112,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 0;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":404256,"byte_end":404275,"line_start":113,"line_end":113,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 3);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":404276,"byte_end":404296,"line_start":114,"line_end":114,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":404297,"byte_end":404300,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":404301,"byte_end":404323,"line_start":116,"line_end":116,"column_start":1,"column_end":23}},{"value":"/     connected_components(&thresholded, Connectivity::Four, background_color),","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":404324,"byte_end":404405,"line_start":117,"line_end":117,"column_start":1,"column_end":82}},{"value":"/     thresholded_components_four);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":404406,"byte_end":404443,"line_start":118,"line_end":118,"column_start":1,"column_end":38}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":404444,"byte_end":404451,"line_start":119,"line_end":119,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\region_labelling.rs","byte_start":404452,"byte_end":404459,"line_start":120,"line_end":120,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1940},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\seam_carving.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"seam_carving","qualname":"::seam_carving","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\seam_carving.rs","parent":null,"children":[{"krate":0,"index":1941},{"krate":0,"index":1942},{"krate":0,"index":1945},{"krate":0,"index":1948},{"krate":0,"index":1951},{"krate":0,"index":1952},{"krate":0,"index":1955},{"krate":0,"index":1958},{"krate":0,"index":1959},{"krate":0,"index":1962},{"krate":0,"index":1963},{"krate":0,"index":1965},{"krate":0,"index":1968},{"krate":0,"index":1969},{"krate":0,"index":1971},{"krate":0,"index":1974},{"krate":0,"index":1977},{"krate":0,"index":1979},{"krate":0,"index":1982},{"krate":0,"index":1983},{"krate":0,"index":1985}],"decl_id":null,"docs":" An implementation of [seam carving]. Currently in a pretty rough state.\n See examples/seam_carving.rs for an example.","sig":null,"attributes":[{"value":"/ An implementation of [seam carving]. Currently in a pretty rough state.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\seam_carving.rs","byte_start":411250,"byte_end":411325,"line_start":1,"line_end":1,"column_start":1,"column_end":76}},{"value":"/ See examples/seam_carving.rs for an example.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\seam_carving.rs","byte_start":411326,"byte_end":411374,"line_start":2,"line_end":2,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\seam_carving.rs","byte_start":411375,"byte_end":411378,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ [seam carving]: https://en.wikipedia.org/wiki/Seam_carving","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\seam_carving.rs","byte_start":411379,"byte_end":411441,"line_start":4,"line_end":4,"column_start":1,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":1974},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\seam_carving.rs","byte_start":411724,"byte_end":411736,"line_start":13,"line_end":13,"column_start":12,"column_end":24},"name":"VerticalSeam","qualname":"::seam_carving::VerticalSeam","value":"","parent":null,"children":[],"decl_id":null,"docs":" An image seam connecting the bottom of an image to its top (in that order).\n","sig":null,"attributes":[{"value":"/ An image seam connecting the bottom of an image to its top (in that order).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\seam_carving.rs","byte_start":411633,"byte_end":411712,"line_start":12,"line_end":12,"column_start":1,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":1977},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\seam_carving.rs","byte_start":412249,"byte_end":412261,"line_start":22,"line_end":22,"column_start":8,"column_end":20},"name":"shrink_width","qualname":"::seam_carving::shrink_width","value":"pub fn shrink_width<P>(&Image<P>, u32) -> Image<P> where P: Pixel<Subpixel =\nu8> + WithChannel<u16> + WithChannel<i16> + 'static,\n<P as WithChannel<u16>>::Pixel: HasBlack","parent":null,"children":[],"decl_id":null,"docs":" Reduces the width of an image using seam carving.","sig":null,"attributes":[{"value":"/ Reduces the width of an image using seam carving.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\seam_carving.rs","byte_start":411749,"byte_end":411802,"line_start":15,"line_end":15,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\seam_carving.rs","byte_start":411803,"byte_end":411806,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Warning: this is very slow! It implements the algorithm from","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\seam_carving.rs","byte_start":411807,"byte_end":411871,"line_start":17,"line_end":17,"column_start":1,"column_end":65}},{"value":"/ https://inst.eecs.berkeley.edu/~cs194-26/fa16/hw/proj4-seamcarving/imret.pdf, with some","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\seam_carving.rs","byte_start":411872,"byte_end":411963,"line_start":18,"line_end":18,"column_start":1,"column_end":92}},{"value":"/ extra unnecessary allocations thrown in. Rather than attempting to optimise the implementation","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\seam_carving.rs","byte_start":411964,"byte_end":412062,"line_start":19,"line_end":19,"column_start":1,"column_end":99}},{"value":"/ of this inherently slow algorithm, the planned next step is to switch to the algorithm from","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\seam_carving.rs","byte_start":412063,"byte_end":412158,"line_start":20,"line_end":20,"column_start":1,"column_end":96}},{"value":"/ https://users.cs.cf.ac.uk/Paul.Rosin/resources/papers/seam-carving-ChinaF.pdf.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\seam_carving.rs","byte_start":412159,"byte_end":412241,"line_start":21,"line_end":21,"column_start":1,"column_end":83}}]},{"kind":"Function","id":{"krate":0,"index":1979},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\seam_carving.rs","byte_start":413049,"byte_end":413067,"line_start":46,"line_end":46,"column_start":8,"column_end":26},"name":"find_vertical_seam","qualname":"::seam_carving::find_vertical_seam","value":"pub fn find_vertical_seam<P>(&Image<P>) -> VerticalSeam where\nP: Pixel<Subpixel = u8> + WithChannel<u16> + WithChannel<i16> + 'static,\n<P as WithChannel<u16>>::Pixel: HasBlack","parent":null,"children":[],"decl_id":null,"docs":" Computes an 8-connected path from the bottom of the image to the top whose sum of\n gradient magnitudes is minimal.\n","sig":null,"attributes":[{"value":"/ Computes an 8-connected path from the bottom of the image to the top whose sum of","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\seam_carving.rs","byte_start":412920,"byte_end":413005,"line_start":44,"line_end":44,"column_start":1,"column_end":86}},{"value":"/ gradient magnitudes is minimal.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\seam_carving.rs","byte_start":413006,"byte_end":413041,"line_start":45,"line_end":45,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":1983},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\seam_carving.rs","byte_start":415830,"byte_end":415850,"line_start":135,"line_end":135,"column_start":8,"column_end":28},"name":"remove_vertical_seam","qualname":"::seam_carving::remove_vertical_seam","value":"pub fn remove_vertical_seam<P>(&Image<P>, &VerticalSeam) -> Image<P> where\nP: Pixel + 'static","parent":null,"children":[],"decl_id":null,"docs":" Returns the result of removing `seam` from `image`.\n","sig":null,"attributes":[{"value":"/ Returns the result of removing `seam` from `image`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\seam_carving.rs","byte_start":415485,"byte_end":415540,"line_start":130,"line_end":130,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":1985},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\seam_carving.rs","byte_start":416602,"byte_end":416621,"line_start":162,"line_end":162,"column_start":8,"column_end":27},"name":"draw_vertical_seams","qualname":"::seam_carving::draw_vertical_seams","value":"pub fn draw_vertical_seams(&GrayImage, &[VerticalSeam]) -> Image<Rgb<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Draws a series of `seams` on `image` in red. Assumes that the provided seams were\n removed in the given order from the input image.\n","sig":null,"attributes":[{"value":"/ Draws a series of `seams` on `image` in red. Assumes that the provided seams were","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\seam_carving.rs","byte_start":416456,"byte_end":416541,"line_start":160,"line_end":160,"column_start":1,"column_end":86}},{"value":"/ removed in the given order from the input image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\seam_carving.rs","byte_start":416542,"byte_end":416594,"line_start":161,"line_end":161,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":1987},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stats","qualname":"::stats","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","parent":null,"children":[{"krate":0,"index":1988},{"krate":0,"index":1991},{"krate":0,"index":1994},{"krate":0,"index":1997},{"krate":0,"index":1998},{"krate":0,"index":2001},{"krate":0,"index":2004},{"krate":0,"index":2007},{"krate":0,"index":2010},{"krate":0,"index":2013},{"krate":0,"index":2016},{"krate":0,"index":2018},{"krate":0,"index":2021},{"krate":0,"index":2023},{"krate":0,"index":2024},{"krate":0,"index":2028},{"krate":0,"index":2032}],"decl_id":null,"docs":" Statistical properties of images.\n","sig":null,"attributes":[{"value":"/ Statistical properties of images.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":417980,"byte_end":418017,"line_start":1,"line_end":1,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":2013},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":418259,"byte_end":418275,"line_start":10,"line_end":10,"column_start":12,"column_end":28},"name":"ChannelHistogram","qualname":"::stats::ChannelHistogram","value":"ChannelHistogram { channels }","parent":null,"children":[{"krate":0,"index":2014}],"decl_id":null,"docs":" A set of per-channel histograms from an image with 8 bits per channel.\n","sig":null,"attributes":[{"value":"/ A set of per-channel histograms from an image with 8 bits per channel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":418173,"byte_end":418247,"line_start":9,"line_end":9,"column_start":1,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":2014},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":418318,"byte_end":418326,"line_start":12,"line_end":12,"column_start":9,"column_end":17},"name":"channels","qualname":"::stats::ChannelHistogram::channels","value":"std::vec::Vec<[u32; 256]>","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" Per-channel histograms.\n","sig":null,"attributes":[{"value":"/ Per-channel histograms.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":418282,"byte_end":418309,"line_start":11,"line_end":11,"column_start":5,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":2016},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":418403,"byte_end":418412,"line_start":16,"line_end":16,"column_start":8,"column_end":17},"name":"histogram","qualname":"::stats::histogram","value":"pub fn histogram<P>(&Image<P>) -> ChannelHistogram where P: Pixel<Subpixel =\nu8> + 'static","parent":null,"children":[],"decl_id":null,"docs":" Returns a vector of per-channel histograms.\n","sig":null,"attributes":[{"value":"/ Returns a vector of per-channel histograms.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":418348,"byte_end":418395,"line_start":15,"line_end":15,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":2018},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":418853,"byte_end":418879,"line_start":32,"line_end":32,"column_start":12,"column_end":38},"name":"CumulativeChannelHistogram","qualname":"::stats::CumulativeChannelHistogram","value":"CumulativeChannelHistogram { channels }","parent":null,"children":[{"krate":0,"index":2019}],"decl_id":null,"docs":" A set of per-channel cumulative histograms from an image with 8 bits per channel.\n","sig":null,"attributes":[{"value":"/ A set of per-channel cumulative histograms from an image with 8 bits per channel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":418756,"byte_end":418841,"line_start":31,"line_end":31,"column_start":1,"column_end":86}}]},{"kind":"Field","id":{"krate":0,"index":2019},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":418933,"byte_end":418941,"line_start":34,"line_end":34,"column_start":9,"column_end":17},"name":"channels","qualname":"::stats::CumulativeChannelHistogram::channels","value":"std::vec::Vec<[u32; 256]>","parent":{"krate":0,"index":2018},"children":[],"decl_id":null,"docs":" Per-channel cumulative histograms.\n","sig":null,"attributes":[{"value":"/ Per-channel cumulative histograms.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":418886,"byte_end":418924,"line_start":33,"line_end":33,"column_start":5,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":2021},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":419017,"byte_end":419037,"line_start":38,"line_end":38,"column_start":8,"column_end":28},"name":"cumulative_histogram","qualname":"::stats::cumulative_histogram","value":"pub fn cumulative_histogram<P>(&Image<P>) -> CumulativeChannelHistogram where\nP: Pixel<Subpixel = u8> + 'static","parent":null,"children":[],"decl_id":null,"docs":" Returns per-channel cumulative histograms.\n","sig":null,"attributes":[{"value":"/ Returns per-channel cumulative histograms.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":418963,"byte_end":419009,"line_start":37,"line_end":37,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":2023},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":420334,"byte_end":420344,"line_start":89,"line_end":89,"column_start":8,"column_end":18},"name":"percentile","qualname":"::stats::percentile","value":"pub fn percentile(&GrayImage, u8) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the `p`th percentile of the pixel intensities in an image.","sig":null,"attributes":[{"value":"/ Returns the `p`th percentile of the pixel intensities in an image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":419409,"byte_end":419479,"line_start":55,"line_end":55,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":419480,"byte_end":419483,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ We define the `p`th percentile intensity to be the least `x` such","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":419484,"byte_end":419553,"line_start":57,"line_end":57,"column_start":1,"column_end":70}},{"value":"/ that at least `p`% of image pixels have intensity less than or","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":419554,"byte_end":419620,"line_start":58,"line_end":58,"column_start":1,"column_end":67}},{"value":"/ equal to `x`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":419621,"byte_end":419638,"line_start":59,"line_end":59,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":419639,"byte_end":419642,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":419643,"byte_end":419655,"line_start":61,"line_end":61,"column_start":1,"column_end":13}},{"value":"/ If `p > 100`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":419656,"byte_end":419673,"line_start":62,"line_end":62,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":419674,"byte_end":419677,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":419678,"byte_end":419692,"line_start":64,"line_end":64,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":419693,"byte_end":419700,"line_start":65,"line_end":65,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":419701,"byte_end":419726,"line_start":66,"line_end":66,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":419727,"byte_end":419745,"line_start":67,"line_end":67,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":419746,"byte_end":419775,"line_start":68,"line_end":68,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":419776,"byte_end":419793,"line_start":69,"line_end":69,"column_start":1,"column_end":18}},{"value":"/ use imageproc::stats::percentile;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":419794,"byte_end":419831,"line_start":70,"line_end":70,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":419832,"byte_end":419835,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":419836,"byte_end":419864,"line_start":72,"line_end":72,"column_start":1,"column_end":29}},{"value":"/     1, 2, 3, 4, 5;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":419865,"byte_end":419887,"line_start":73,"line_end":73,"column_start":1,"column_end":23}},{"value":"/     6, 7, 8, 9, 10);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":419888,"byte_end":419912,"line_start":74,"line_end":74,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":419913,"byte_end":419916,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ // The 0th percentile is always 0","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":419917,"byte_end":419954,"line_start":76,"line_end":76,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(percentile(&image, 0), 0);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":419955,"byte_end":419996,"line_start":77,"line_end":77,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":419997,"byte_end":420000,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ // Exactly 10% of pixels have intensity <= 1.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":420001,"byte_end":420050,"line_start":79,"line_end":79,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(percentile(&image, 10), 1);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":420051,"byte_end":420093,"line_start":80,"line_end":80,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":420094,"byte_end":420097,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ // Fewer than 15% of pixels have intensity <=1, so the 15th percentile is 2.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":420098,"byte_end":420178,"line_start":82,"line_end":82,"column_start":1,"column_end":81}},{"value":"/ assert_eq!(percentile(&image, 15), 2);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":420179,"byte_end":420221,"line_start":83,"line_end":83,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":420222,"byte_end":420225,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ // All pixels have intensity <= 10.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":420226,"byte_end":420265,"line_start":85,"line_end":85,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(percentile(&image, 100), 10);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":420266,"byte_end":420310,"line_start":86,"line_end":86,"column_start":1,"column_end":45}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":420311,"byte_end":420318,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":420319,"byte_end":420326,"line_start":88,"line_end":88,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":2024},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":420935,"byte_end":420958,"line_start":108,"line_end":108,"column_start":8,"column_end":31},"name":"root_mean_squared_error","qualname":"::stats::root_mean_squared_error","value":"pub fn root_mean_squared_error<I, J, P>(&I, &J) -> f64 where\nI: GenericImageView<Pixel = P>, J: GenericImageView<Pixel = P>, P: Pixel,\nP::Subpixel: ValueInto<f64>","parent":null,"children":[],"decl_id":null,"docs":" Returns the square root of the mean of the squares of differences\n between all subpixels in left and right. All channels are considered\n equally. If you do not want this (e.g. if using RGBA) then change\n image formats first.\n","sig":null,"attributes":[{"value":"/ Returns the square root of the mean of the squares of differences","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":420690,"byte_end":420759,"line_start":104,"line_end":104,"column_start":1,"column_end":70}},{"value":"/ between all subpixels in left and right. All channels are considered","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":420760,"byte_end":420832,"line_start":105,"line_end":105,"column_start":1,"column_end":73}},{"value":"/ equally. If you do not want this (e.g. if using RGBA) then change","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":420833,"byte_end":420902,"line_start":106,"line_end":106,"column_start":1,"column_end":70}},{"value":"/ image formats first.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":420903,"byte_end":420927,"line_start":107,"line_end":107,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":2028},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":421501,"byte_end":421527,"line_start":122,"line_end":122,"column_start":8,"column_end":34},"name":"peak_signal_to_noise_ratio","qualname":"::stats::peak_signal_to_noise_ratio","value":"pub fn peak_signal_to_noise_ratio<I, J, P>(&I, &J) -> f64 where\nI: GenericImageView<Pixel = P>, J: GenericImageView<Pixel = P>, P: Pixel,\nP::Subpixel: ValueInto<f64> + Primitive","parent":null,"children":[],"decl_id":null,"docs":" Returns the peak signal to noise ratio for a clean image and its noisy\n aproximation. All channels are considered equally. If you do not want this\n (e.g. if using RGBA) then change image formats first.\n See also [peak signal-to-noise ratio (wikipedia)](https://en.wikipedia.org/wiki/Peak_signal-to-noise_ratio).\n","sig":null,"attributes":[{"value":"/ Returns the peak signal to noise ratio for a clean image and its noisy","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":421169,"byte_end":421243,"line_start":118,"line_end":118,"column_start":1,"column_end":75}},{"value":"/ aproximation. All channels are considered equally. If you do not want this","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":421244,"byte_end":421322,"line_start":119,"line_end":119,"column_start":1,"column_end":79}},{"value":"/ (e.g. if using RGBA) then change image formats first.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":421323,"byte_end":421380,"line_start":120,"line_end":120,"column_start":1,"column_end":58}},{"value":"/ See also [peak signal-to-noise ratio (wikipedia)](https://en.wikipedia.org/wiki/Peak_signal-to-noise_ratio).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\stats.rs","byte_start":421381,"byte_end":421493,"line_start":121,"line_end":121,"column_start":1,"column_end":113}}]},{"kind":"Mod","id":{"krate":0,"index":2036},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\suppress.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"suppress","qualname":"::suppress","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\suppress.rs","parent":null,"children":[{"krate":0,"index":2037},{"krate":0,"index":2038},{"krate":0,"index":2041},{"krate":0,"index":2044},{"krate":0,"index":2045},{"krate":0,"index":2048},{"krate":0,"index":2051},{"krate":0,"index":2052},{"krate":0,"index":2054},{"krate":0,"index":2057},{"krate":0,"index":2060},{"krate":0,"index":2063},{"krate":0,"index":2066}],"decl_id":null,"docs":" Functions for suppressing non-maximal values.\n","sig":null,"attributes":[{"value":"/ Functions for suppressing non-maximal values.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\suppress.rs","byte_start":426880,"byte_end":426929,"line_start":1,"line_end":1,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":2060},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\suppress.rs","byte_start":427245,"byte_end":427265,"line_start":10,"line_end":10,"column_start":8,"column_end":28},"name":"suppress_non_maximum","qualname":"::suppress::suppress_non_maximum","value":"pub fn suppress_non_maximum<I, C>(&I, u32) -> ImageBuffer<Luma<C>, Vec<C>>\nwhere I: GenericImage<Pixel = Luma<C>>, C: Primitive + Ord + 'static","parent":null,"children":[],"decl_id":null,"docs":" Returned image has zeroes for all inputs pixels which do not have the greatest\n intensity in the (2 * radius + 1) square block centred on them.\n Ties are resolved lexicographically.\n","sig":null,"attributes":[{"value":"/ Returned image has zeroes for all inputs pixels which do not have the greatest","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\suppress.rs","byte_start":427046,"byte_end":427128,"line_start":7,"line_end":7,"column_start":1,"column_end":83}},{"value":"/ intensity in the (2 * radius + 1) square block centred on them.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\suppress.rs","byte_start":427129,"byte_end":427196,"line_start":8,"line_end":8,"column_start":1,"column_end":68}},{"value":"/ Ties are resolved lexicographically.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\suppress.rs","byte_start":427197,"byte_end":427237,"line_start":9,"line_end":9,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":2066},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\suppress.rs","byte_start":430873,"byte_end":430885,"line_start":110,"line_end":110,"column_start":8,"column_end":20},"name":"local_maxima","qualname":"::suppress::local_maxima","value":"pub fn local_maxima<T>(&[T], u32) -> Vec<T> where T: Position + Score + Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns all items which have the highest score in the\n (2 * radius + 1) square block centred on them. Ties are resolved lexicographically.\n","sig":null,"attributes":[{"value":"/ Returns all items which have the highest score in the","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\suppress.rs","byte_start":430720,"byte_end":430777,"line_start":108,"line_end":108,"column_start":1,"column_end":58}},{"value":"/ (2 * radius + 1) square block centred on them. Ties are resolved lexicographically.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\suppress.rs","byte_start":430778,"byte_end":430865,"line_start":109,"line_end":109,"column_start":1,"column_end":88}}]},{"kind":"Mod","id":{"krate":0,"index":2069},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"template_matching","qualname":"::template_matching","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","parent":null,"children":[{"krate":0,"index":2070},{"krate":0,"index":2073},{"krate":0,"index":2074},{"krate":0,"index":2077},{"krate":0,"index":2080},{"krate":0,"index":2083},{"krate":0,"index":2086},{"krate":0,"index":2087},{"krate":0,"index":2090},{"krate":0,"index":2091},{"krate":0,"index":2669},{"krate":0,"index":2678},{"krate":0,"index":2679},{"krate":0,"index":2681},{"krate":0,"index":2683},{"krate":0,"index":2684},{"krate":0,"index":2686},{"krate":0,"index":2687},{"krate":0,"index":2093},{"krate":0,"index":2098},{"krate":0,"index":2100},{"krate":0,"index":2689},{"krate":0,"index":2695},{"krate":0,"index":2697},{"krate":0,"index":2700},{"krate":0,"index":2703},{"krate":0,"index":2705},{"krate":0,"index":2709},{"krate":0,"index":2711},{"krate":0,"index":2101}],"decl_id":null,"docs":" Functions for performing template matching.\n","sig":null,"attributes":[{"value":"/ Functions for performing template matching.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":440066,"byte_end":440113,"line_start":1,"line_end":1,"column_start":1,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2670},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":440600,"byte_end":440618,"line_start":15,"line_end":15,"column_start":5,"column_end":23},"name":"SumOfSquaredErrors","qualname":"::template_matching::MatchTemplateMethod::SumOfSquaredErrors","value":"MatchTemplateMethod::SumOfSquaredErrors","parent":{"krate":0,"index":2669},"children":[],"decl_id":null,"docs":" Sum of the squares of the difference between image and template pixel\n intensities.","sig":null,"attributes":[{"value":"/ Sum of the squares of the difference between image and template pixel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":440458,"byte_end":440531,"line_start":11,"line_end":11,"column_start":5,"column_end":78}},{"value":"/ intensities.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":440536,"byte_end":440552,"line_start":12,"line_end":12,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":440557,"byte_end":440560,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ Smaller values are better.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":440565,"byte_end":440595,"line_start":14,"line_end":14,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2672},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":440709,"byte_end":440737,"line_start":17,"line_end":17,"column_start":5,"column_end":33},"name":"SumOfSquaredErrorsNormalized","qualname":"::template_matching::MatchTemplateMethod::SumOfSquaredErrorsNormalized","value":"MatchTemplateMethod::SumOfSquaredErrorsNormalized","parent":{"krate":0,"index":2669},"children":[],"decl_id":null,"docs":" Divides the sum computed using `SumOfSquaredErrors` by a normalization term.\n","sig":null,"attributes":[{"value":"/ Divides the sum computed using `SumOfSquaredErrors` by a normalization term.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":440624,"byte_end":440704,"line_start":16,"line_end":16,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2674},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":440811,"byte_end":440827,"line_start":21,"line_end":21,"column_start":5,"column_end":21},"name":"CrossCorrelation","qualname":"::template_matching::MatchTemplateMethod::CrossCorrelation","value":"MatchTemplateMethod::CrossCorrelation","parent":{"krate":0,"index":2669},"children":[],"decl_id":null,"docs":" Cross Correlation","sig":null,"attributes":[{"value":"/ Cross Correlation","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":440743,"byte_end":440764,"line_start":18,"line_end":18,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":440769,"byte_end":440772,"line_start":19,"line_end":19,"column_start":5,"column_end":8}},{"value":"/ Higher values are better.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":440777,"byte_end":440806,"line_start":20,"line_end":20,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2676},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":440916,"byte_end":440942,"line_start":23,"line_end":23,"column_start":5,"column_end":31},"name":"CrossCorrelationNormalized","qualname":"::template_matching::MatchTemplateMethod::CrossCorrelationNormalized","value":"MatchTemplateMethod::CrossCorrelationNormalized","parent":{"krate":0,"index":2669},"children":[],"decl_id":null,"docs":" Divides the sum computed using `CrossCorrelation` by a normalization term.\n","sig":null,"attributes":[{"value":"/ Divides the sum computed using `CrossCorrelation` by a normalization term.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":440833,"byte_end":440911,"line_start":22,"line_end":22,"column_start":5,"column_end":83}}]},{"kind":"Enum","id":{"krate":0,"index":2669},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":440432,"byte_end":440451,"line_start":10,"line_end":10,"column_start":10,"column_end":29},"name":"MatchTemplateMethod","qualname":"::template_matching::MatchTemplateMethod","value":"pub enum MatchTemplateMethod {\n    SumOfSquaredErrors,\n    SumOfSquaredErrorsNormalized,\n    CrossCorrelation,\n    CrossCorrelationNormalized,\n}","parent":null,"children":[{"krate":0,"index":2670},{"krate":0,"index":2672},{"krate":0,"index":2674},{"krate":0,"index":2676}],"decl_id":null,"docs":" Method used to compute the matching score between a template and an image region.\n","sig":null,"attributes":[{"value":"/ Method used to compute the matching score between a template and an image region.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":440292,"byte_end":440377,"line_start":8,"line_end":8,"column_start":1,"column_end":86}}]},{"kind":"Function","id":{"krate":0,"index":2093},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":441322,"byte_end":441336,"line_start":36,"line_end":36,"column_start":8,"column_end":22},"name":"match_template","qualname":"::template_matching::match_template","value":"pub fn match_template(&GrayImage, &GrayImage, MatchTemplateMethod)\n-> Image<Luma<f32>>","parent":null,"children":[],"decl_id":null,"docs":" Slides a `template` over an `image` and scores the match at each point using\n the requested `method`.","sig":null,"attributes":[{"value":"/ Slides a `template` over an `image` and scores the match at each point using","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":440947,"byte_end":441027,"line_start":26,"line_end":26,"column_start":1,"column_end":81}},{"value":"/ the requested `method`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":441028,"byte_end":441055,"line_start":27,"line_end":27,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":441056,"byte_end":441059,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ The returned image has dimensions `image.width() - template.width() + 1` by","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":441060,"byte_end":441139,"line_start":29,"line_end":29,"column_start":1,"column_end":80}},{"value":"/ `image.height() - template.height() + 1`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":441140,"byte_end":441185,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":441186,"byte_end":441189,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":441190,"byte_end":441202,"line_start":32,"line_end":32,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":441203,"byte_end":441206,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ If either dimension of `template` is not strictly less than the corresponding dimension","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":441207,"byte_end":441298,"line_start":34,"line_end":34,"column_start":1,"column_end":92}},{"value":"/ of `image`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":441299,"byte_end":441314,"line_start":35,"line_end":35,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2689},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":444491,"byte_end":444499,"line_start":135,"line_end":135,"column_start":12,"column_end":20},"name":"Extremes","qualname":"::template_matching::Extremes","value":"Extremes { max_value, min_value, max_value_location, min_value_location }","parent":null,"children":[{"krate":0,"index":2691},{"krate":0,"index":2692},{"krate":0,"index":2693},{"krate":0,"index":2694}],"decl_id":null,"docs":" The largest and smallest values in an image,\n together with their locations.\n","sig":null,"attributes":[{"value":"/ The largest and smallest values in an image,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":444351,"byte_end":444399,"line_start":132,"line_end":132,"column_start":1,"column_end":49}},{"value":"/ together with their locations.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":444400,"byte_end":444434,"line_start":133,"line_end":133,"column_start":1,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":2691},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":444552,"byte_end":444561,"line_start":137,"line_end":137,"column_start":9,"column_end":18},"name":"max_value","qualname":"::template_matching::Extremes::max_value","value":"T","parent":{"krate":0,"index":2689},"children":[],"decl_id":null,"docs":" The largest value in an image.\n","sig":null,"attributes":[{"value":"/ The largest value in an image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":444509,"byte_end":444543,"line_start":136,"line_end":136,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":2692},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":444614,"byte_end":444623,"line_start":139,"line_end":139,"column_start":9,"column_end":18},"name":"min_value","qualname":"::template_matching::Extremes::min_value","value":"T","parent":{"krate":0,"index":2689},"children":[],"decl_id":null,"docs":" The smallest value in an image.\n","sig":null,"attributes":[{"value":"/ The smallest value in an image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":444570,"byte_end":444605,"line_start":138,"line_end":138,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":2693},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":444694,"byte_end":444712,"line_start":141,"line_end":141,"column_start":9,"column_end":27},"name":"max_value_location","qualname":"::template_matching::Extremes::max_value_location","value":"(u32, u32)","parent":{"krate":0,"index":2689},"children":[],"decl_id":null,"docs":" The coordinates of the largest value in an image.\n","sig":null,"attributes":[{"value":"/ The coordinates of the largest value in an image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":444632,"byte_end":444685,"line_start":140,"line_end":140,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":2694},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":444793,"byte_end":444811,"line_start":143,"line_end":143,"column_start":9,"column_end":27},"name":"min_value_location","qualname":"::template_matching::Extremes::min_value_location","value":"(u32, u32)","parent":{"krate":0,"index":2689},"children":[],"decl_id":null,"docs":" The coordinates of the smallest value in an image.\n","sig":null,"attributes":[{"value":"/ The coordinates of the smallest value in an image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":444730,"byte_end":444784,"line_start":142,"line_end":142,"column_start":5,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":2101},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":444997,"byte_end":445010,"line_start":148,"line_end":148,"column_start":8,"column_end":21},"name":"find_extremes","qualname":"::template_matching::find_extremes","value":"pub fn find_extremes<T>(&Image<Luma<T>>) -> Extremes<T> where T: Primitive +\n'static","parent":null,"children":[],"decl_id":null,"docs":" Finds the largest and smallest values in an image and their locations.\n If there are multiple such values then the lexicographically smallest is returned.\n","sig":null,"attributes":[{"value":"/ Finds the largest and smallest values in an image and their locations.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":444828,"byte_end":444902,"line_start":146,"line_end":146,"column_start":1,"column_end":75}},{"value":"/ If there are multiple such values then the lexicographically smallest is returned.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\template_matching.rs","byte_start":444903,"byte_end":444989,"line_start":147,"line_end":147,"column_start":1,"column_end":87}}]},{"kind":"Mod","id":{"krate":0,"index":2103},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\union_find.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"union_find","qualname":"::union_find","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\union_find.rs","parent":null,"children":[{"krate":0,"index":2104},{"krate":0,"index":2108}],"decl_id":null,"docs":" An implementation of disjoint set forests for union find.\n","sig":null,"attributes":[{"value":"/ An implementation of disjoint set forests for union find.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\union_find.rs","byte_start":451584,"byte_end":451645,"line_start":1,"line_end":1,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":2104},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\union_find.rs","byte_start":451703,"byte_end":451720,"line_start":4,"line_end":4,"column_start":12,"column_end":29},"name":"DisjointSetForest","qualname":"::union_find::DisjointSetForest","value":"DisjointSetForest {  }","parent":null,"children":[{"krate":0,"index":2105},{"krate":0,"index":2106},{"krate":0,"index":2107}],"decl_id":null,"docs":" Data structure for efficient union find.\n","sig":null,"attributes":[{"value":"/ Data structure for efficient union find.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\union_find.rs","byte_start":451647,"byte_end":451691,"line_start":3,"line_end":3,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2109},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\union_find.rs","byte_start":452111,"byte_end":452114,"line_start":17,"line_end":17,"column_start":12,"column_end":15},"name":"new","qualname":"<DisjointSetForest>::new","value":"pub fn new(usize) -> DisjointSetForest","parent":null,"children":[],"decl_id":null,"docs":" Constructs forest of singletons with count elements.\n","sig":null,"attributes":[{"value":"/ Constructs forest of singletons with count elements.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\union_find.rs","byte_start":452043,"byte_end":452099,"line_start":16,"line_end":16,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2110},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\union_find.rs","byte_start":452425,"byte_end":452434,"line_start":28,"line_end":28,"column_start":12,"column_end":21},"name":"num_trees","qualname":"<DisjointSetForest>::num_trees","value":"pub fn num_trees(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of trees in the forest.\n","sig":null,"attributes":[{"value":"/ Returns the number of trees in the forest.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\union_find.rs","byte_start":452367,"byte_end":452413,"line_start":27,"line_end":27,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2112},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\union_find.rs","byte_start":452728,"byte_end":452732,"line_start":37,"line_end":37,"column_start":12,"column_end":16},"name":"root","qualname":"<DisjointSetForest>::root","value":"pub fn root(&mut Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns index of the root of the tree containing i.\n Needs mutable reference to self for path compression.\n","sig":null,"attributes":[{"value":"/ Returns index of the root of the tree containing i.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\union_find.rs","byte_start":452599,"byte_end":452654,"line_start":35,"line_end":35,"column_start":5,"column_end":60}},{"value":"/ Needs mutable reference to self for path compression.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\union_find.rs","byte_start":452659,"byte_end":452716,"line_start":36,"line_end":36,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2113},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\union_find.rs","byte_start":453258,"byte_end":453262,"line_start":55,"line_end":55,"column_start":12,"column_end":16},"name":"find","qualname":"<DisjointSetForest>::find","value":"pub fn find(&mut Self, usize, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if i and j are in the same tree.\n Need mutable reference to self for path compression.\n","sig":null,"attributes":[{"value":"/ Returns true if i and j are in the same tree.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\union_find.rs","byte_start":453136,"byte_end":453185,"line_start":53,"line_end":53,"column_start":5,"column_end":54}},{"value":"/ Need mutable reference to self for path compression.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\union_find.rs","byte_start":453190,"byte_end":453246,"line_start":54,"line_end":54,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2114},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\union_find.rs","byte_start":453455,"byte_end":453460,"line_start":61,"line_end":61,"column_start":12,"column_end":17},"name":"union","qualname":"<DisjointSetForest>::union","value":"pub fn union(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Unions the trees containing i and j.\n","sig":null,"attributes":[{"value":"/ Unions the trees containing i and j.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\union_find.rs","byte_start":453403,"byte_end":453443,"line_start":60,"line_end":60,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2115},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\union_find.rs","byte_start":454183,"byte_end":454188,"line_start":82,"line_end":82,"column_start":12,"column_end":17},"name":"trees","qualname":"<DisjointSetForest>::trees","value":"pub fn trees(&mut Self) -> Vec<Vec<usize>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the elements of each tree.\n","sig":null,"attributes":[{"value":"/ Returns the elements of each tree.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\union_find.rs","byte_start":454133,"byte_end":454171,"line_start":81,"line_end":81,"column_start":5,"column_end":43}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":24977,"byte_end":24984,"line_start":31,"line_end":31,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":57743,"byte_end":57749,"line_start":19,"line_end":19,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":57921,"byte_end":57927,"line_start":26,"line_end":26,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":230},{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":58113,"byte_end":58119,"line_start":38,"line_end":38,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":87950,"byte_end":87963,"line_start":227,"line_end":227,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":88422,"byte_end":88425,"line_start":251,"line_end":251,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":360},{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":88780,"byte_end":88789,"line_start":268,"line_end":268,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":368},{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":89066,"byte_end":89069,"line_start":280,"line_end":280,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":371},{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":89433,"byte_end":89439,"line_start":303,"line_end":303,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":382},{"krate":0,"index":383}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":106748,"byte_end":106749,"line_start":76,"line_end":76,"column_start":20,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":107318,"byte_end":107323,"line_start":101,"line_end":101,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":122814,"byte_end":122831,"line_start":21,"line_end":21,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":123753,"byte_end":123770,"line_start":54,"line_end":54,"column_start":19,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":606},{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":124911,"byte_end":124933,"line_start":100,"line_end":100,"column_start":30,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":619}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":125595,"byte_end":125617,"line_start":117,"line_end":117,"column_start":43,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":623},{"krate":0,"index":624}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":126126,"byte_end":126151,"line_start":134,"line_end":134,"column_start":30,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":634}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":127133,"byte_end":127158,"line_start":157,"line_end":157,"column_start":43,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":638},{"krate":0,"index":639}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":131646,"byte_end":131653,"line_start":310,"line_end":310,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":672},{"krate":0,"index":673}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":195360,"byte_end":195367,"line_start":250,"line_end":250,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":921},{"krate":0,"index":923},{"krate":0,"index":925},{"krate":0,"index":927},{"krate":0,"index":929}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":162991,"byte_end":162997,"line_start":87,"line_end":87,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1040},{"krate":0,"index":1041}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":203286,"byte_end":203296,"line_start":44,"line_end":44,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1102},{"krate":0,"index":2311},{"krate":0,"index":2312},{"krate":0,"index":2313},{"krate":0,"index":1105},{"krate":0,"index":1106},{"krate":0,"index":1111},{"krate":0,"index":1112},{"krate":0,"index":1113}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":209059,"byte_end":209069,"line_start":226,"line_end":226,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1115},{"krate":0,"index":1116}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":209934,"byte_end":209944,"line_start":258,"line_end":258,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1126},{"krate":0,"index":1127}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":262381,"byte_end":262396,"line_start":84,"line_end":84,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1345}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":262880,"byte_end":262891,"line_start":97,"line_end":97,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1347},{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":1350},{"krate":0,"index":1351},{"krate":0,"index":1352}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":270438,"byte_end":270442,"line_start":318,"line_end":318,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1360}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":286077,"byte_end":286087,"line_start":26,"line_end":26,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1409}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":287238,"byte_end":287245,"line_start":62,"line_end":62,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1411},{"krate":0,"index":1412},{"krate":0,"index":1413},{"krate":0,"index":1414},{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":1417},{"krate":0,"index":1419},{"krate":0,"index":1421},{"krate":0,"index":1423}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":297433,"byte_end":297446,"line_start":338,"line_end":338,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1436},{"krate":0,"index":1439},{"krate":0,"index":1440}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":301559,"byte_end":301566,"line_start":450,"line_end":450,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1465},{"krate":0,"index":1467}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":301947,"byte_end":301953,"line_start":463,"line_end":463,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1471},{"krate":0,"index":1473},{"krate":0,"index":1475},{"krate":0,"index":1476},{"krate":0,"index":1477}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":332925,"byte_end":332929,"line_start":166,"line_end":166,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1574},{"krate":0,"index":1576},{"krate":0,"index":1577},{"krate":0,"index":1578}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":333296,"byte_end":333299,"line_start":182,"line_end":182,"column_start":44,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1581},{"krate":0,"index":1583},{"krate":0,"index":1584},{"krate":0,"index":1585}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":333774,"byte_end":333778,"line_start":198,"line_end":198,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1588},{"krate":0,"index":1590},{"krate":0,"index":1591},{"krate":0,"index":1592}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":360593,"byte_end":360596,"line_start":18,"line_end":18,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1661}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":360722,"byte_end":360726,"line_start":26,"line_end":26,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1665}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":360853,"byte_end":360856,"line_start":34,"line_end":34,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1669}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":360982,"byte_end":360986,"line_start":42,"line_end":42,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1673}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":361113,"byte_end":361117,"line_start":50,"line_end":50,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1677}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":361244,"byte_end":361249,"line_start":58,"line_end":58,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1681}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\point.rs","byte_start":391475,"byte_end":391480,"line_start":15,"line_end":15,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1861}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\point.rs","byte_start":391622,"byte_end":391627,"line_start":22,"line_end":22,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1864},{"krate":0,"index":1865}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\point.rs","byte_start":391804,"byte_end":391809,"line_start":30,"line_end":30,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1868}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\point.rs","byte_start":391953,"byte_end":391958,"line_start":37,"line_end":37,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1871},{"krate":0,"index":1872}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\point.rs","byte_start":392135,"byte_end":392140,"line_start":45,"line_end":45,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1875}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\point.rs","byte_start":392280,"byte_end":392285,"line_start":52,"line_end":52,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1878},{"krate":0,"index":1879}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\point.rs","byte_start":393339,"byte_end":393347,"line_start":84,"line_end":84,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1885}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\point.rs","byte_start":393580,"byte_end":393585,"line_start":95,"line_end":95,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1887},{"krate":0,"index":1888}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\point.rs","byte_start":394307,"byte_end":394311,"line_start":119,"line_end":119,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1890},{"krate":0,"index":1891}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":396503,"byte_end":396507,"line_start":38,"line_end":38,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1900},{"krate":0,"index":1901},{"krate":0,"index":1902},{"krate":0,"index":1903},{"krate":0,"index":1904},{"krate":0,"index":1905},{"krate":0,"index":1906},{"krate":0,"index":1907}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":399116,"byte_end":399120,"line_start":126,"line_end":126,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1909}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":399285,"byte_end":399289,"line_start":132,"line_end":132,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1911}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":399708,"byte_end":399720,"line_start":149,"line_end":149,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1913}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\union_find.rs","byte_start":452019,"byte_end":452036,"line_start":15,"line_end":15,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2109},{"krate":0,"index":2110},{"krate":0,"index":2112},{"krate":0,"index":2113},{"krate":0,"index":2114},{"krate":0,"index":2115}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":875,"byte_end":880,"line_start":33,"line_end":33,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":890,"byte_end":898,"line_start":34,"line_end":34,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":122}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":908,"byte_end":916,"line_start":35,"line_end":35,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":155}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":926,"byte_end":933,"line_start":36,"line_end":36,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":212}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":943,"byte_end":954,"line_start":37,"line_end":37,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":255}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":964,"byte_end":982,"line_start":38,"line_end":38,"column_start":9,"column_end":27},"ref_id":{"krate":0,"index":308}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":992,"byte_end":999,"line_start":39,"line_end":39,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":389}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":1009,"byte_end":1014,"line_start":40,"line_end":40,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":847}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":1024,"byte_end":1030,"line_start":41,"line_end":41,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":887}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":1040,"byte_end":1065,"line_start":42,"line_end":42,"column_start":9,"column_end":34},"ref_id":{"krate":0,"index":1069}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":1075,"byte_end":1083,"line_start":43,"line_end":43,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1198}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":1093,"byte_end":1102,"line_start":44,"line_end":44,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1253}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":1112,"byte_end":1116,"line_start":45,"line_end":45,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1311}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":1126,"byte_end":1129,"line_start":46,"line_end":46,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1371}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":1139,"byte_end":1144,"line_start":47,"line_end":47,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1481}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":1154,"byte_end":1168,"line_start":48,"line_end":48,"column_start":9,"column_end":23},"ref_id":{"krate":0,"index":1522}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":1178,"byte_end":1199,"line_start":49,"line_end":49,"column_start":9,"column_end":30},"ref_id":{"krate":0,"index":1598}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":1209,"byte_end":1212,"line_start":50,"line_end":50,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1617}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":1222,"byte_end":1226,"line_start":51,"line_end":51,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1731}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":1236,"byte_end":1246,"line_start":52,"line_end":52,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":1742}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":1256,"byte_end":1261,"line_start":53,"line_end":53,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1770}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":1271,"byte_end":1279,"line_start":54,"line_end":54,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1818}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":1289,"byte_end":1294,"line_start":55,"line_end":55,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1838}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":1378,"byte_end":1382,"line_start":58,"line_end":58,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1892}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":1392,"byte_end":1408,"line_start":59,"line_end":59,"column_start":9,"column_end":25},"ref_id":{"krate":0,"index":1914}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":1418,"byte_end":1430,"line_start":60,"line_end":60,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":1940}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":1440,"byte_end":1445,"line_start":61,"line_end":61,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1987}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":1455,"byte_end":1463,"line_start":62,"line_end":62,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":2036}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":1473,"byte_end":1490,"line_start":63,"line_end":63,"column_start":9,"column_end":26},"ref_id":{"krate":0,"index":2069}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\lib.rs","byte_start":1500,"byte_end":1510,"line_start":64,"line_end":64,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":2103}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\contours.rs","byte_start":24977,"byte_end":24984,"line_start":31,"line_end":31,"column_start":9,"column_end":16},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":2136},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":57743,"byte_end":57749,"line_start":19,"line_end":19,"column_start":6,"column_end":12},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":2144},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":57921,"byte_end":57927,"line_start":26,"line_end":26,"column_start":19,"column_end":25},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":2144},"to":{"krate":0,"index":298}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\corners.rs","byte_start":58113,"byte_end":58119,"line_start":38,"line_end":38,"column_start":16,"column_end":22},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":2144},"to":{"krate":0,"index":301}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":87950,"byte_end":87963,"line_start":227,"line_end":227,"column_start":6,"column_end":19},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":343},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":88422,"byte_end":88425,"line_start":251,"line_end":251,"column_start":19,"column_end":22},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":354},"to":{"krate":0,"index":348}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":88780,"byte_end":88789,"line_start":268,"line_end":268,"column_start":19,"column_end":28},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":362},"to":{"krate":0,"index":348}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":89066,"byte_end":89069,"line_start":280,"line_end":280,"column_start":17,"column_end":20},"kind":{"Impl":{"id":51}},"from":{"krate":5,"index":6772},"to":{"krate":0,"index":351}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\distance_transform.rs","byte_start":89433,"byte_end":89439,"line_start":303,"line_end":303,"column_start":21,"column_end":27},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":376},"to":{"krate":0,"index":351}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":106748,"byte_end":106749,"line_start":76,"line_end":76,"column_start":20,"column_end":21},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":445},"to":{"krate":0,"index":437}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\canvas.rs","byte_start":107318,"byte_end":107323,"line_start":101,"line_end":101,"column_start":34,"column_end":39},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":450},"to":{"krate":0,"index":437}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":122814,"byte_end":122831,"line_start":21,"line_end":21,"column_start":6,"column_end":23},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":594},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":123753,"byte_end":123770,"line_start":54,"line_end":54,"column_start":19,"column_end":36},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":594},"to":{"krate":2,"index":7240}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":124911,"byte_end":124933,"line_start":100,"line_end":100,"column_start":30,"column_end":52},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":611},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":125595,"byte_end":125617,"line_start":117,"line_end":117,"column_start":43,"column_end":65},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":611},"to":{"krate":2,"index":7240}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":126126,"byte_end":126151,"line_start":134,"line_end":134,"column_start":30,"column_end":55},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":626},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":127133,"byte_end":127158,"line_start":157,"line_end":157,"column_start":43,"column_end":68},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":626},"to":{"krate":2,"index":7240}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\drawing\\line.rs","byte_start":131646,"byte_end":131653,"line_start":310,"line_end":310,"column_start":19,"column_end":26},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\median.rs","byte_start":195360,"byte_end":195367,"line_start":250,"line_end":250,"column_start":6,"column_end":13},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":916},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\filter\\mod.rs","byte_start":162991,"byte_end":162997,"line_start":87,"line_end":87,"column_start":30,"column_end":36},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1031},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":203286,"byte_end":203296,"line_start":44,"line_end":44,"column_start":6,"column_end":16},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":2298},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":209059,"byte_end":209069,"line_start":226,"line_end":226,"column_start":26,"column_end":36},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":2298},"to":{"krate":2,"index":2909}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\geometric_transformations.rs","byte_start":209934,"byte_end":209944,"line_start":258,"line_end":258,"column_start":26,"column_end":36},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":2298},"to":{"krate":2,"index":2909}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":262381,"byte_end":262396,"line_start":84,"line_end":84,"column_start":6,"column_end":21},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":2396},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":262880,"byte_end":262891,"line_start":97,"line_end":97,"column_start":6,"column_end":17},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2362},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\haar.rs","byte_start":270438,"byte_end":270442,"line_start":318,"line_end":318,"column_start":9,"column_end":13},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":2465},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":286077,"byte_end":286087,"line_start":26,"line_end":26,"column_start":6,"column_end":16},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2493},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":287238,"byte_end":287245,"line_start":62,"line_end":62,"column_start":6,"column_end":13},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":2511},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":297433,"byte_end":297446,"line_start":338,"line_end":338,"column_start":6,"column_end":19},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":2529},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":301559,"byte_end":301566,"line_start":450,"line_end":450,"column_start":23,"column_end":30},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1452},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\hog.rs","byte_start":301947,"byte_end":301953,"line_start":463,"line_end":463,"column_start":13,"column_end":19},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1457},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":332925,"byte_end":332929,"line_start":166,"line_end":166,"column_start":44,"column_end":48},"kind":{"Impl":{"id":75}},"from":{"krate":14,"index":3213},"to":{"krate":0,"index":1567}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":333296,"byte_end":333299,"line_start":182,"line_end":182,"column_start":44,"column_end":47},"kind":{"Impl":{"id":76}},"from":{"krate":14,"index":3155},"to":{"krate":0,"index":1567}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\integral_image.rs","byte_start":333774,"byte_end":333778,"line_start":198,"line_end":198,"column_start":44,"column_end":48},"kind":{"Impl":{"id":77}},"from":{"krate":14,"index":3242},"to":{"krate":0,"index":1567}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":360344,"byte_end":360349,"line_start":10,"line_end":10,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":14,"index":2309},"to":{"krate":0,"index":1652}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":360593,"byte_end":360596,"line_start":18,"line_end":18,"column_start":31,"column_end":34},"kind":{"Impl":{"id":78}},"from":{"krate":14,"index":3155},"to":{"krate":0,"index":1652}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":360722,"byte_end":360726,"line_start":26,"line_end":26,"column_start":31,"column_end":35},"kind":{"Impl":{"id":79}},"from":{"krate":14,"index":3242},"to":{"krate":0,"index":1652}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":360853,"byte_end":360856,"line_start":34,"line_end":34,"column_start":31,"column_end":34},"kind":{"Impl":{"id":80}},"from":{"krate":14,"index":3184},"to":{"krate":0,"index":1652}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":360982,"byte_end":360986,"line_start":42,"line_end":42,"column_start":31,"column_end":35},"kind":{"Impl":{"id":81}},"from":{"krate":14,"index":3271},"to":{"krate":0,"index":1652}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":361113,"byte_end":361117,"line_start":50,"line_end":50,"column_start":31,"column_end":35},"kind":{"Impl":{"id":82}},"from":{"krate":14,"index":3213},"to":{"krate":0,"index":1652}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\map.rs","byte_start":361244,"byte_end":361249,"line_start":58,"line_end":58,"column_start":31,"column_end":36},"kind":{"Impl":{"id":83}},"from":{"krate":14,"index":3300},"to":{"krate":0,"index":1652}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\point.rs","byte_start":391475,"byte_end":391480,"line_start":15,"line_end":15,"column_start":9,"column_end":14},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":2572},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\point.rs","byte_start":391622,"byte_end":391627,"line_start":22,"line_end":22,"column_start":22,"column_end":27},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":2572},"to":{"krate":2,"index":2899}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\point.rs","byte_start":391804,"byte_end":391809,"line_start":30,"line_end":30,"column_start":35,"column_end":40},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":2572},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\point.rs","byte_start":391953,"byte_end":391958,"line_start":37,"line_end":37,"column_start":22,"column_end":27},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":2572},"to":{"krate":2,"index":2904}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\point.rs","byte_start":392135,"byte_end":392140,"line_start":45,"line_end":45,"column_start":35,"column_end":40},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":2572},"to":{"krate":2,"index":2934}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\point.rs","byte_start":392280,"byte_end":392285,"line_start":52,"line_end":52,"column_start":18,"column_end":23},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":2572},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\point.rs","byte_start":393339,"byte_end":393347,"line_start":84,"line_end":84,"column_start":6,"column_end":14},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":2595},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\point.rs","byte_start":393580,"byte_end":393585,"line_start":95,"line_end":95,"column_start":6,"column_end":11},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":2572},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\point.rs","byte_start":394307,"byte_end":394311,"line_start":119,"line_end":119,"column_start":6,"column_end":10},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":2607},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":396503,"byte_end":396507,"line_start":38,"line_end":38,"column_start":6,"column_end":10},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":2620},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":399116,"byte_end":399120,"line_start":126,"line_end":126,"column_start":22,"column_end":26},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":2620},"to":{"krate":0,"index":1896}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":399285,"byte_end":399289,"line_start":132,"line_end":132,"column_start":22,"column_end":26},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":2620},"to":{"krate":0,"index":1896}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\rect.rs","byte_start":399708,"byte_end":399720,"line_start":149,"line_end":149,"column_start":6,"column_end":18},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":2637},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\imageproc-0.22.0\\src\\union_find.rs","byte_start":452019,"byte_end":452036,"line_start":15,"line_end":15,"column_start":6,"column_end":23},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":2104},"to":{"krate":4294967295,"index":4294967295}}]}