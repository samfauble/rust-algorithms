{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2","program":"C:\\Users\\samfa\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","median","C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=0bf9ea4b97125ca4","-C","extra-filename=-0bf9ea4b97125ca4","--out-dir","c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps","--extern","generic_array=c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps\\libgeneric_array-09ba71fec5dc7679.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\samfa\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps\\libmedian-0bf9ea4b97125ca4.rmeta"},"prelude":{"crate_id":{"name":"median","disambiguator":[6894190146449816894,10293059555102336474]},"crate_root":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src","external_crates":[{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[3270634090130538391,14263718429753122316]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[5532051063976025760,2256364509988431667]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7281929168992546274,2424678954744988439]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[353429176083156877,8877241423562725442]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12196241746694410349,3365331946273478086]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[13433537899495627439,16859208643582984883]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8262757423788146228,17823423584984973278]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15770910386717746279,2673050061768012116]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[15973938195753786773,1947565178479551552]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1495831041033125177,733230368880816191]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[17679945988426249108,16004284943229030185]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[4674106540844190265,14311593861468432536]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[12112277384381649788,786361786206656603]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\lib.rs","num":14,"id":{"name":"generic_array","disambiguator":[48602434230641373,6361293643699311638]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\lib.rs","num":15,"id":{"name":"typenum","disambiguator":[8772819397860940348,11404433419137017990]}}],"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\lib.rs","byte_start":203,"byte_end":759,"line_start":5,"line_end":26,"column_start":1,"column_end":18}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\lib.rs","byte_start":710,"byte_end":711,"line_start":24,"line_end":24,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\lib.rs","byte_start":203,"byte_end":759,"line_start":5,"line_end":26,"column_start":1,"column_end":18},"name":"","qualname":"::","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":33},{"krate":0,"index":95}],"decl_id":null,"docs":" An implementation of an efficient O(n) median filter.\n","sig":null,"attributes":[{"value":"/ An implementation of an efficient O(n) median filter.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\lib.rs","byte_start":203,"byte_end":260,"line_start":5,"line_end":5,"column_start":1,"column_end":58}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\lib.rs","byte_start":492,"byte_end":514,"line_start":11,"line_end":11,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"heap","qualname":"::heap","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":96},{"krate":0,"index":101},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":8},{"krate":0,"index":115},{"krate":0,"index":121},{"krate":0,"index":124},{"krate":0,"index":11}],"decl_id":null,"docs":" An implementation of a heap-allocated, efficient O(n) median filter.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\lib.rs","byte_start":617,"byte_end":640,"line_start":18,"line_end":18,"column_start":1,"column_end":24}},{"value":"/ An implementation of a heap-allocated, efficient O(n) median filter.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":964,"byte_end":1036,"line_start":5,"line_end":5,"column_start":1,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":115},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":1738,"byte_end":1744,"line_start":32,"line_end":32,"column_start":12,"column_end":18},"name":"Filter","qualname":"::heap::Filter","value":"Filter {  }","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120}],"decl_id":null,"docs":" An implementation of a median filter with linear complexity.","sig":null,"attributes":[{"value":"/ An implementation of a median filter with linear complexity.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":1375,"byte_end":1439,"line_start":25,"line_end":25,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":1440,"byte_end":1443,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ While the common na√Øve implementation of a median filter","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":1444,"byte_end":1505,"line_start":27,"line_end":27,"column_start":1,"column_end":61}},{"value":"/ has a worst-case complexity of `O(n^2)` (due to having to sort the sliding window)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":1506,"byte_end":1592,"line_start":28,"line_end":28,"column_start":1,"column_end":87}},{"value":"/ the use of a combination of linked list and ring buffer allows for","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":1593,"byte_end":1663,"line_start":29,"line_end":29,"column_start":1,"column_end":71}},{"value":"/ a worst-case complexity of `O(n)`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":1664,"byte_end":1702,"line_start":30,"line_end":30,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":13},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":2124,"byte_end":2127,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<Filter<T>>::new","value":"pub fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new median filter with a given window size.\n","sig":null,"attributes":[{"value":"/ Creates a new median filter with a given window size.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":2055,"byte_end":2112,"line_start":47,"line_end":47,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":2599,"byte_end":2602,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"len","qualname":"<Filter<T>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the window size of the filter.\n","sig":null,"attributes":[{"value":"/ Returns the window size of the filter.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":2531,"byte_end":2573,"line_start":65,"line_end":65,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":2578,"byte_end":2587,"line_start":66,"line_end":66,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":2737,"byte_end":2745,"line_start":73,"line_end":73,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Filter<T>>::is_empty","value":"pub fn is_empty(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the filter has a length of `0`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the filter has a length of `0`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":2658,"byte_end":2711,"line_start":71,"line_end":71,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":2716,"byte_end":2725,"line_start":72,"line_end":72,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":2893,"byte_end":2899,"line_start":79,"line_end":79,"column_start":12,"column_end":18},"name":"median","qualname":"<Filter<T>>::median","value":"pub fn median(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the filter buffer's current median value, panicking if empty.\n","sig":null,"attributes":[{"value":"/ Returns the filter buffer's current median value, panicking if empty.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":2794,"byte_end":2867,"line_start":77,"line_end":77,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":2872,"byte_end":2881,"line_start":78,"line_end":78,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":3102,"byte_end":3105,"line_start":87,"line_end":87,"column_start":12,"column_end":15},"name":"min","qualname":"<Filter<T>>::min","value":"pub fn min(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the filter buffer's current min value, panicking if empty.\n","sig":null,"attributes":[{"value":"/ Returns the filter buffer's current min value, panicking if empty.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":3006,"byte_end":3076,"line_start":85,"line_end":85,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":3081,"byte_end":3090,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":3305,"byte_end":3308,"line_start":95,"line_end":95,"column_start":12,"column_end":15},"name":"max","qualname":"<Filter<T>>::max","value":"pub fn max(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the filter buffer's current max value, panicking if empty.\n","sig":null,"attributes":[{"value":"/ Returns the filter buffer's current max value, panicking if empty.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":3209,"byte_end":3279,"line_start":93,"line_end":93,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":3284,"byte_end":3293,"line_start":94,"line_end":94,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":5416,"byte_end":5423,"line_start":137,"line_end":137,"column_start":12,"column_end":19},"name":"consume","qualname":"<Filter<T>>::consume","value":"pub fn consume(&mut Self, T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Applies a median filter to the consumed value.","sig":null,"attributes":[{"value":"/ Applies a median filter to the consumed value.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":3412,"byte_end":3462,"line_start":101,"line_end":101,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":3467,"byte_end":3470,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ # Implementation","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":3475,"byte_end":3495,"line_start":103,"line_end":103,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":3500,"byte_end":3503,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ The algorithm makes use of a ring buffer of the same size as its filter window.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":3508,"byte_end":3591,"line_start":105,"line_end":105,"column_start":5,"column_end":88}},{"value":"/ Inserting values into the ring buffer appends them to a linked list that is *embedded*","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":3596,"byte_end":3686,"line_start":106,"line_end":106,"column_start":5,"column_end":95}},{"value":"/ inside said ring buffer (using relative integer jump offsets as links).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":3691,"byte_end":3766,"line_start":107,"line_end":107,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":3771,"byte_end":3774,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":3779,"byte_end":3792,"line_start":109,"line_end":109,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":3797,"byte_end":3800,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ Given a sequence of values `[3, 2, 4, 6, 5, 1]` and a buffer of size 5,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":3805,"byte_end":3880,"line_start":111,"line_end":111,"column_start":5,"column_end":80}},{"value":"/ the buffer would be filled like this:","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":3885,"byte_end":3926,"line_start":112,"line_end":112,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":3931,"byte_end":3934,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ ```plain","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":3939,"byte_end":3951,"line_start":114,"line_end":114,"column_start":5,"column_end":17}},{"value":"/ new(5)  consume(3)  consume(2)  consume(4)  consume(6)  consume(5)  consume(1)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":3956,"byte_end":4038,"line_start":115,"line_end":115,"column_start":5,"column_end":87}},{"value":"/ ‚ñ∂Ô∏é[ ]      ‚ñ∑[3]       ‚îå‚Üí[3]       ‚îå‚Üí[3]‚îÄ‚îê     ‚îå‚Üí[3]‚îÄ‚îê    ‚ñ∂Ô∏é‚îå‚Üí[3]‚îÄ‚îê      ‚ñ∑[1]‚îÄ‚îê","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":4043,"byte_end":4169,"line_start":116,"line_end":116,"column_start":5,"column_end":87}},{"value":"/  [ ]      ‚ñ∂Ô∏é[ ]      ‚ñ∑‚îî‚îÄ[2]      ‚ñ∑‚îî‚îÄ[2] ‚îÇ    ‚ñ∑‚îî‚îÄ[2] ‚îÇ    ‚ñ∑‚îî‚îÄ[2] ‚îÇ    ‚ñ∂Ô∏é‚îå‚îÄ[2]‚Üê‚îò","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":4174,"byte_end":4302,"line_start":117,"line_end":117,"column_start":5,"column_end":87}},{"value":"/  [ ]       [ ]        ‚ñ∂Ô∏é[ ]         [4]‚Üê‚îò     ‚îå‚îÄ[4]‚Üê‚îò     ‚îå‚îÄ[4]‚Üê‚îò     ‚îî‚Üí[4]‚îÄ‚îê","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":4307,"byte_end":4420,"line_start":118,"line_end":118,"column_start":5,"column_end":86}},{"value":"/  [ ]       [ ]         [ ]        ‚ñ∂Ô∏é[ ]       ‚îî‚Üí[6]       ‚îÇ [6]‚Üê‚îê     ‚îå‚Üí[6] ‚îÇ","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":4425,"byte_end":4526,"line_start":119,"line_end":119,"column_start":5,"column_end":86}},{"value":"/  [ ]       [ ]         [ ]         [ ]        ‚ñ∂Ô∏é[ ]       ‚îî‚Üí[5]‚îÄ‚îò     ‚îî‚îÄ[5]‚Üê‚îò","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":4531,"byte_end":4632,"line_start":120,"line_end":120,"column_start":5,"column_end":86}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":4637,"byte_end":4644,"line_start":121,"line_end":121,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":4649,"byte_end":4652,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ # Algorithm","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":4657,"byte_end":4672,"line_start":123,"line_end":123,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":4677,"byte_end":4680,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ 1. **Remove node** at current cursor (`‚ñ∂Ô∏é`) from linked list, if it exists.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":4685,"byte_end":4768,"line_start":125,"line_end":125,"column_start":5,"column_end":84}},{"value":"/    (by re-wiring its predecessor to its successor).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":4773,"byte_end":4828,"line_start":126,"line_end":126,"column_start":5,"column_end":60}},{"value":"/ 2. **Initialize** `current` and `median` index to first node of linked list (`‚ñ∑`).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":4833,"byte_end":4921,"line_start":127,"line_end":127,"column_start":5,"column_end":91}},{"value":"/ 3. **Walk through** linked list, **searching** for insertion point.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":4926,"byte_end":4997,"line_start":128,"line_end":128,"column_start":5,"column_end":76}},{"value":"/ 4. **Shift median index** on every other hop (thus ending up in the list's median).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":5002,"byte_end":5089,"line_start":129,"line_end":129,"column_start":5,"column_end":92}},{"value":"/ 5. **Insert value** into ring buffer and linked list respectively.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":5094,"byte_end":5164,"line_start":130,"line_end":130,"column_start":5,"column_end":75}},{"value":"/ 6. **Update index** to linked list's first node, if necessary.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":5169,"byte_end":5235,"line_start":131,"line_end":131,"column_start":5,"column_end":71}},{"value":"/ 7. **Update ring buffer**'s cursor.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":5240,"byte_end":5279,"line_start":132,"line_end":132,"column_start":5,"column_end":44}},{"value":"/ 8. **Return median value**.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":5284,"byte_end":5315,"line_start":133,"line_end":133,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":5320,"byte_end":5323,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ (_Based on Phil Ekstrom, Embedded Systems Programming, November 2000._)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":5328,"byte_end":5403,"line_start":135,"line_end":135,"column_start":5,"column_end":80}}]},{"kind":"Mod","id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stack","qualname":"::stack","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":127},{"krate":0,"index":132},{"krate":0,"index":135},{"krate":0,"index":137},{"krate":0,"index":141},{"krate":0,"index":143},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":60},{"krate":0,"index":64},{"krate":0,"index":68},{"krate":0,"index":91}],"decl_id":null,"docs":" An implementation of a stack-allocated, efficient O(n) median filter.\n","sig":null,"attributes":[{"value":"/ An implementation of a stack-allocated, efficient O(n) median filter.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":14621,"byte_end":14694,"line_start":5,"line_end":5,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":14933,"byte_end":14941,"line_start":15,"line_end":15,"column_start":12,"column_end":20},"name":"ListNode","qualname":"::stack::ListNode","value":"ListNode {  }","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131}],"decl_id":null,"docs":" Implementation detail.\n (Once we have value generics we will hopefully be able to un-leak it.)\n","sig":null,"attributes":[{"value":"/ Implementation detail.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":14788,"byte_end":14814,"line_start":12,"line_end":12,"column_start":1,"column_end":27}},{"value":"/ (Once we have value generics we will hopefully be able to un-leak it.)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":14815,"byte_end":14889,"line_start":13,"line_end":13,"column_start":1,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":53},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":15570,"byte_end":15576,"line_start":36,"line_end":36,"column_start":12,"column_end":18},"name":"Filter","qualname":"::stack::Filter","value":"Filter {  }","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59}],"decl_id":null,"docs":" An implementation of a median filter of fixed width with linear complexity.","sig":null,"attributes":[{"value":"/ An implementation of a median filter of fixed width with linear complexity.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":15216,"byte_end":15295,"line_start":30,"line_end":30,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":15296,"byte_end":15299,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ While the common na√Øve implementation of a median filter","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":15300,"byte_end":15361,"line_start":32,"line_end":32,"column_start":1,"column_end":61}},{"value":"/ has a worst-case complexity of `O(n^2)` (due to having to sort the sliding window)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":15362,"byte_end":15448,"line_start":33,"line_end":33,"column_start":1,"column_end":87}},{"value":"/ the use of a combination of linked list and ring buffer allows for","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":15449,"byte_end":15519,"line_start":34,"line_end":34,"column_start":1,"column_end":71}},{"value":"/ a worst-case complexity of `O(n)`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":15520,"byte_end":15558,"line_start":35,"line_end":35,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":16728,"byte_end":16731,"line_start":86,"line_end":86,"column_start":12,"column_end":15},"name":"new","qualname":"<Filter<T, N>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new median filter with a given window size.\n","sig":null,"attributes":[{"value":"/ Creates a new median filter with a given window size.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":16659,"byte_end":16716,"line_start":85,"line_end":85,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":17619,"byte_end":17622,"line_start":115,"line_end":115,"column_start":12,"column_end":15},"name":"len","qualname":"<Filter<T, N>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the window size of the filter.\n","sig":null,"attributes":[{"value":"/ Returns the window size of the filter.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":17551,"byte_end":17593,"line_start":113,"line_end":113,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":17598,"byte_end":17607,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":17757,"byte_end":17765,"line_start":121,"line_end":121,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Filter<T, N>>::is_empty","value":"pub fn is_empty(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the filter has a length of `0`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the filter has a length of `0`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":17678,"byte_end":17731,"line_start":119,"line_end":119,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":17736,"byte_end":17745,"line_start":120,"line_end":120,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":17913,"byte_end":17919,"line_start":127,"line_end":127,"column_start":12,"column_end":18},"name":"median","qualname":"<Filter<T, N>>::median","value":"pub fn median(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the filter buffer's current median value, panicking if empty.\n","sig":null,"attributes":[{"value":"/ Returns the filter buffer's current median value, panicking if empty.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":17814,"byte_end":17887,"line_start":125,"line_end":125,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":17892,"byte_end":17901,"line_start":126,"line_end":126,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":18122,"byte_end":18125,"line_start":135,"line_end":135,"column_start":12,"column_end":15},"name":"min","qualname":"<Filter<T, N>>::min","value":"pub fn min(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the filter buffer's current min value, panicking if empty.\n","sig":null,"attributes":[{"value":"/ Returns the filter buffer's current min value, panicking if empty.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":18026,"byte_end":18096,"line_start":133,"line_end":133,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":18101,"byte_end":18110,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":18325,"byte_end":18328,"line_start":143,"line_end":143,"column_start":12,"column_end":15},"name":"max","qualname":"<Filter<T, N>>::max","value":"pub fn max(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the filter buffer's current max value, panicking if empty.\n","sig":null,"attributes":[{"value":"/ Returns the filter buffer's current max value, panicking if empty.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":18229,"byte_end":18299,"line_start":141,"line_end":141,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":18304,"byte_end":18313,"line_start":142,"line_end":142,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":20435,"byte_end":20442,"line_start":184,"line_end":184,"column_start":12,"column_end":19},"name":"consume","qualname":"<Filter<T, N>>::consume","value":"pub fn consume(&mut Self, T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Applies a median filter to the consumed value.","sig":null,"attributes":[{"value":"/ Applies a median filter to the consumed value.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":18432,"byte_end":18482,"line_start":149,"line_end":149,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":18487,"byte_end":18490,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ # Implementation","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":18495,"byte_end":18515,"line_start":151,"line_end":151,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":18520,"byte_end":18523,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ The algorithm makes use of a ring buffer of the same size as its filter window.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":18528,"byte_end":18611,"line_start":153,"line_end":153,"column_start":5,"column_end":88}},{"value":"/ Inserting values into the ring buffer appends them to a linked list that is *embedded*","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":18616,"byte_end":18706,"line_start":154,"line_end":154,"column_start":5,"column_end":95}},{"value":"/ inside said ring buffer (using relative integer jump offsets as links).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":18711,"byte_end":18786,"line_start":155,"line_end":155,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":18791,"byte_end":18794,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":18799,"byte_end":18812,"line_start":157,"line_end":157,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":18817,"byte_end":18820,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ Given a sequence of values `[3, 2, 4, 6, 5, 1]` and a buffer of size 5,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":18825,"byte_end":18900,"line_start":159,"line_end":159,"column_start":5,"column_end":80}},{"value":"/ the buffer would be filled like this:","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":18905,"byte_end":18946,"line_start":160,"line_end":160,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":18951,"byte_end":18954,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ ```plain","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":18959,"byte_end":18971,"line_start":162,"line_end":162,"column_start":5,"column_end":17}},{"value":"/ new(5)  consume(3)  consume(2)  consume(4)  consume(6)  consume(5)  consume(1)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":18976,"byte_end":19058,"line_start":163,"line_end":163,"column_start":5,"column_end":87}},{"value":"/ ‚ñ∂Ô∏é[ ]      ‚ñ∑[3]       ‚îå‚Üí[3]       ‚îå‚Üí[3]‚îÄ‚îê     ‚îå‚Üí[3]‚îÄ‚îê    ‚ñ∂Ô∏é‚îå‚Üí[3]‚îÄ‚îê      ‚ñ∑[1]‚îÄ‚îê","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":19063,"byte_end":19189,"line_start":164,"line_end":164,"column_start":5,"column_end":87}},{"value":"/  [ ]      ‚ñ∂Ô∏é[ ]      ‚ñ∑‚îî‚îÄ[2]      ‚ñ∑‚îî‚îÄ[2] ‚îÇ    ‚ñ∑‚îî‚îÄ[2] ‚îÇ    ‚ñ∑‚îî‚îÄ[2] ‚îÇ    ‚ñ∂Ô∏é‚îå‚îÄ[2]‚Üê‚îò","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":19194,"byte_end":19322,"line_start":165,"line_end":165,"column_start":5,"column_end":87}},{"value":"/  [ ]       [ ]        ‚ñ∂Ô∏é[ ]         [4]‚Üê‚îò     ‚îå‚îÄ[4]‚Üê‚îò     ‚îå‚îÄ[4]‚Üê‚îò     ‚îî‚Üí[4]‚îÄ‚îê","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":19327,"byte_end":19440,"line_start":166,"line_end":166,"column_start":5,"column_end":86}},{"value":"/  [ ]       [ ]         [ ]        ‚ñ∂Ô∏é[ ]       ‚îî‚Üí[6]       ‚îÇ [6]‚Üê‚îê     ‚îå‚Üí[6] ‚îÇ","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":19445,"byte_end":19546,"line_start":167,"line_end":167,"column_start":5,"column_end":86}},{"value":"/  [ ]       [ ]         [ ]         [ ]        ‚ñ∂Ô∏é[ ]       ‚îî‚Üí[5]‚îÄ‚îò     ‚îî‚îÄ[5]‚Üê‚îò","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":19551,"byte_end":19652,"line_start":168,"line_end":168,"column_start":5,"column_end":86}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":19657,"byte_end":19664,"line_start":169,"line_end":169,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":19669,"byte_end":19672,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ # Algorithm","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":19677,"byte_end":19692,"line_start":171,"line_end":171,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":19697,"byte_end":19700,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ 1. **Remove node** at current cursor (`‚ñ∂Ô∏é`) from linked list, if it exists.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":19705,"byte_end":19788,"line_start":173,"line_end":173,"column_start":5,"column_end":84}},{"value":"/    (by re-wiring its predecessor to its successor).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":19793,"byte_end":19848,"line_start":174,"line_end":174,"column_start":5,"column_end":60}},{"value":"/ 2. **Initialize** `current` and `median` index to first node of linked list (`‚ñ∑`).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":19853,"byte_end":19941,"line_start":175,"line_end":175,"column_start":5,"column_end":91}},{"value":"/ 3. **Walk through** linked list, **searching** for insertion point.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":19946,"byte_end":20017,"line_start":176,"line_end":176,"column_start":5,"column_end":76}},{"value":"/ 4. **Shift median index** on every other hop (thus ending up in the list's median).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":20022,"byte_end":20109,"line_start":177,"line_end":177,"column_start":5,"column_end":92}},{"value":"/ 5. **Insert value** into ring buffer and linked list respectively.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":20114,"byte_end":20184,"line_start":178,"line_end":178,"column_start":5,"column_end":75}},{"value":"/ 6. **Update index** to linked list's first node, if necessary.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":20189,"byte_end":20255,"line_start":179,"line_end":179,"column_start":5,"column_end":71}},{"value":"/ 7. **Update ring buffer**'s cursor.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":20260,"byte_end":20299,"line_start":180,"line_end":180,"column_start":5,"column_end":44}},{"value":"/ 8. **Return median value**.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":20304,"byte_end":20335,"line_start":181,"line_end":181,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":20340,"byte_end":20343,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ (_Based on Phil Ekstrom, Embedded Systems Programming, November 2000._)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":20348,"byte_end":20423,"line_start":183,"line_end":183,"column_start":5,"column_end":80}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":1192,"byte_end":1200,"line_start":16,"line_end":16,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":10}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":2006,"byte_end":2012,"line_start":43,"line_end":43,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":15033,"byte_end":15041,"line_start":21,"line_end":21,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":15905,"byte_end":15911,"line_start":50,"line_end":50,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":16199,"byte_end":16205,"line_start":65,"line_end":65,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":16574,"byte_end":16580,"line_start":80,"line_end":80,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":25608,"byte_end":25614,"line_start":358,"line_end":358,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\lib.rs","byte_start":649,"byte_end":653,"line_start":19,"line_end":19,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\lib.rs","byte_start":664,"byte_end":669,"line_start":21,"line_end":21,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":33}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":1192,"byte_end":1200,"line_start":16,"line_end":16,"column_start":24,"column_end":32},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":96},"to":{"krate":2,"index":8812}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\heap.rs","byte_start":2006,"byte_end":2012,"line_start":43,"line_end":43,"column_start":9,"column_end":15},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":115},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":15033,"byte_end":15041,"line_start":21,"line_end":21,"column_start":24,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":127},"to":{"krate":2,"index":8812}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":15905,"byte_end":15911,"line_start":50,"line_end":50,"column_start":22,"column_end":28},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":53},"to":{"krate":2,"index":2457}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":16199,"byte_end":16205,"line_start":65,"line_end":65,"column_start":27,"column_end":33},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":53},"to":{"krate":2,"index":8812}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":16574,"byte_end":16580,"line_start":80,"line_end":80,"column_start":12,"column_end":18},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":53},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\median-0.3.2\\src\\stack.rs","byte_start":25608,"byte_end":25614,"line_start":358,"line_end":358,"column_start":24,"column_end":30},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":53},"to":{"krate":2,"index":2810}}]}