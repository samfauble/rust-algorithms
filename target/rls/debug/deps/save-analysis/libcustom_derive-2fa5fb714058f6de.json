{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\custom_derive-0.1.7","program":"C:\\Users\\samfa\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","custom_derive","C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\custom_derive-0.1.7\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"std\"","-C","metadata=2fa5fb714058f6de","-C","extra-filename=-2fa5fb714058f6de","--out-dir","c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\samfa\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps\\libcustom_derive-2fa5fb714058f6de.rmeta"},"prelude":{"crate_id":{"name":"custom_derive","disambiguator":[2741206187499138967,14482466239573803689]},"crate_root":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\custom_derive-0.1.7\\src","external_crates":[{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\custom_derive-0.1.7\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[3270634090130538391,14263718429753122316]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\custom_derive-0.1.7\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[5532051063976025760,2256364509988431667]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\custom_derive-0.1.7\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7281929168992546274,2424678954744988439]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\custom_derive-0.1.7\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[353429176083156877,8877241423562725442]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\custom_derive-0.1.7\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12196241746694410349,3365331946273478086]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\custom_derive-0.1.7\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[13433537899495627439,16859208643582984883]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\custom_derive-0.1.7\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8262757423788146228,17823423584984973278]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\custom_derive-0.1.7\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15770910386717746279,2673050061768012116]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\custom_derive-0.1.7\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[15973938195753786773,1947565178479551552]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\custom_derive-0.1.7\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1495831041033125177,733230368880816191]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\custom_derive-0.1.7\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[17679945988426249108,16004284943229030185]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\custom_derive-0.1.7\\src\\lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[4674106540844190265,14311593861468432536]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\custom_derive-0.1.7\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[12112277384381649788,786361786206656603]}}],"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\custom_derive-0.1.7\\src\\lib.rs","byte_start":382,"byte_end":12792,"line_start":10,"line_end":462,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\custom_derive-0.1.7\\src\\lib.rs","byte_start":382,"byte_end":12792,"line_start":10,"line_end":462,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\custom_derive-0.1.7\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2}],"decl_id":null,"docs":"**Note**: This crate has been superseded by `macro-attr`.","sig":null,"attributes":[{"value":"*\n**Note**: This crate has been superseded by `macro-attr`.\n\nThis crate provides a macro that enables the use of custom `derive` attributes.\n\nTo use it, make sure you link to the crate like so:\n\n```rust\n#[macro_use] extern crate custom_derive;\n# macro_rules! Dummy { (() struct $name:ident;) => {}; }\n# custom_derive! { #[derive(Clone, Dummy)] struct Foo; }\n# fn main() { let _ = Foo; }\n```\n\n> **Note**: the `custom_derive!` macro itself is not documented, as the automatic documentation for it would be uselessly huge and incomprehensible.\n\n<style type=\"text/css\">\n.link-block { font-family: \"Fira Sans\"; }\n.link-block > p { display: inline-block; }\n.link-block > p > strong { font-weight: 500; margin-right: 1em; }\n.link-block > ul { display: inline-block; padding: 0; list-style: none; }\n.link-block > ul > li {\n  font-size: 0.8em;\n  background-color: #eee;\n  border: 1px solid #ccc;\n  padding: 0.3em;\n  display: inline-block;\n}\n</style>\n<span></span><div class=\"link-block\">\n\n**Links**\n\n* [Latest Release](https://crates.io/crates/custom_derive/)\n* [Latest Docs](https://docs.rs/crate/custom_derive/)\n* [Repository](https://github.com/DanielKeep/rust-custom-derive/tree/custom_derive-master/)\n\n<span></span></div>\n\n# Usage\n\nThe macro should be used to wrap an entire *single* `enum` or `struct` declaration, including its attributes (both `derive` and others).  All derivation attributes which the macro does *not* recognise will be assumed to be custom, and treated accordingly.\n\n`custom_derive!` assumes that custom derivations are implemented as macros (of the same name).  For example, here is a simple derivation macro:\n\n```rust\n#[macro_use] extern crate custom_derive;\n\ntrait TypeName {\n    fn type_name() -> &'static str;\n}\n\ntrait ReprType {\n    type Repr;\n}\n\nmacro_rules! TypeName {\n    (() $(pub)* enum $name:ident $($tail:tt)*) => { TypeName! { @impl $name } };\n    (() $(pub)* struct $name:ident $($tail:tt)*) => { TypeName! { @impl $name } };\n\n    (@impl $name:ident) => {\n        impl TypeName for $name {\n            fn type_name() -> &'static str { stringify!($name) }\n        }\n    };\n}\n\nmacro_rules! TryFrom {\n    (($repr:ty) $(pub)* enum $name:ident $($tail:tt)*) => {\n        impl ReprType for $name {\n            type Repr = $repr;\n        }\n    };\n}\n\ncustom_derive! {\n    #[allow(dead_code)]\n    #[repr(u8)]\n    #[derive(Clone, Copy, Debug, TryFrom(u8), TypeName)]\n    enum Foo { A, B }\n}\n\nfn main() {\n    let foo = Foo::B;\n    let v = foo as <Foo as ReprType>::Repr;\n    let msg = format!(\"{}: {:?} ({:?})\", Foo::type_name(), foo, v);\n    assert_eq!(msg, \"Foo: B (1)\");\n}\n```\n\nFirst, note that `custom_derive!` passes any arguments on the derivation attribute to the macro.  In the case of attributes *without* any arguments, `()` is passed instead.\n\nSecondly, the macro is passed the entire item, *sans* attributes.  It is the derivation macro's job to parse the item correctly.\n\nThird, each derivation macro is expected to result in zero or more items, not including the item itself.  As a result, it is *not* possible to mutate the item in any way, or attach additional attributes to it.\n\nFinally, `@impl` is merely a trick to pack multiple, different functions into a single macro.  The sequence has no special meaning; it is simply *distinct* from the usual invocation syntax.\n*/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\custom_derive-0.1.7\\src\\lib.rs","byte_start":382,"byte_end":3694,"line_start":10,"line_end":107,"column_start":1,"column_end":3}}]}],"impls":[],"refs":[],"macro_refs":[],"relations":[]}