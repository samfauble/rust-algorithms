{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14","program":"C:\\Users\\samfa\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","image","--edition=2018","C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=ecc6a6b1b73f8b97","-C","extra-filename=-ecc6a6b1b73f8b97","--out-dir","c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps","--extern","bytemuck=c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps\\libbytemuck-b45c7ef4639239d4.rmeta","--extern","byteorder=c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps\\libbyteorder-d500ce98721fbcb6.rmeta","--extern","color_quant=c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps\\libcolor_quant-575c7ddfe37c189a.rmeta","--extern","num_iter=c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps\\libnum_iter-4346b931480cf59e.rmeta","--extern","num_rational=c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps\\libnum_rational-fa52054de45c4305.rmeta","--extern","num_traits=c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps\\libnum_traits-3e98add47b800aeb.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\samfa\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps\\libimage-ecc6a6b1b73f8b97.rmeta"},"prelude":{"crate_id":{"name":"image","disambiguator":[15288647372949103458,9293270725959563937]},"crate_root":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src","external_crates":[{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","num":1,"id":{"name":"std","disambiguator":[3270634090130538391,14263718429753122316]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5532051063976025760,2256364509988431667]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7281929168992546274,2424678954744988439]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[353429176083156877,8877241423562725442]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12196241746694410349,3365331946273478086]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[13433537899495627439,16859208643582984883]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8262757423788146228,17823423584984973278]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15770910386717746279,2673050061768012116]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[15973938195753786773,1947565178479551552]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1495831041033125177,733230368880816191]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[17679945988426249108,16004284943229030185]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[4674106540844190265,14311593861468432536]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[12112277384381649788,786361786206656603]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","num":14,"id":{"name":"num_traits","disambiguator":[4453721453643426444,5204455879344048998]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","num":15,"id":{"name":"num_rational","disambiguator":[11097481541191238817,6739968123774349388]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","num":16,"id":{"name":"num_bigint","disambiguator":[2858156354010232203,2525292268392833216]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","num":17,"id":{"name":"num_integer","disambiguator":[14944211420072738374,10475570320693077453]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","num":18,"id":{"name":"bytemuck","disambiguator":[17416722967539893986,13325586726212651376]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\utils\\mod.rs","num":19,"id":{"name":"num_iter","disambiguator":[9224019066167692980,16790804248219118945]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","num":20,"id":{"name":"color_quant","disambiguator":[15000818413689279554,17803015438202206150]}}],"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":0,"byte_end":12891,"line_start":1,"line_end":395,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":2748},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":3952,"byte_end":3961,"line_start":106,"line_end":106,"column_start":24,"column_end":33},"alias_span":null,"name":"ColorType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2787},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":3963,"byte_end":3980,"line_start":106,"line_end":106,"column_start":35,"column_end":52},"alias_span":null,"name":"ExtendedColorType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3213},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4007,"byte_end":4011,"line_start":108,"line_end":108,"column_start":24,"column_end":28},"alias_span":null,"name":"Luma","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3214},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4007,"byte_end":4011,"line_start":108,"line_end":108,"column_start":24,"column_end":28},"alias_span":null,"name":"Luma","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3300},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4013,"byte_end":4018,"line_start":108,"line_end":108,"column_start":30,"column_end":35},"alias_span":null,"name":"LumaA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3301},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4013,"byte_end":4018,"line_start":108,"line_end":108,"column_start":30,"column_end":35},"alias_span":null,"name":"LumaA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3155},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4020,"byte_end":4023,"line_start":108,"line_end":108,"column_start":37,"column_end":40},"alias_span":null,"name":"Rgb","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3156},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4020,"byte_end":4023,"line_start":108,"line_end":108,"column_start":37,"column_end":40},"alias_span":null,"name":"Rgb","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3242},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4025,"byte_end":4029,"line_start":108,"line_end":108,"column_start":42,"column_end":46},"alias_span":null,"name":"Rgba","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3243},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4025,"byte_end":4029,"line_start":108,"line_end":108,"column_start":42,"column_end":46},"alias_span":null,"name":"Rgba","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3184},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4031,"byte_end":4034,"line_start":108,"line_end":108,"column_start":48,"column_end":51},"alias_span":null,"name":"Bgr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3185},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4031,"byte_end":4034,"line_start":108,"line_end":108,"column_start":48,"column_end":51},"alias_span":null,"name":"Bgr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3271},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4036,"byte_end":4040,"line_start":108,"line_end":108,"column_start":53,"column_end":57},"alias_span":null,"name":"Bgra","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3272},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4036,"byte_end":4040,"line_start":108,"line_end":108,"column_start":53,"column_end":57},"alias_span":null,"name":"Bgra","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2376},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4067,"byte_end":4077,"line_start":110,"line_end":110,"column_start":24,"column_end":34},"alias_span":null,"name":"ImageError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4079,"byte_end":4090,"line_start":110,"line_end":110,"column_start":36,"column_end":47},"alias_span":null,"name":"ImageResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2164},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4117,"byte_end":4133,"line_start":112,"line_end":112,"column_start":24,"column_end":40},"alias_span":null,"name":"AnimationDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2190},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4151,"byte_end":4163,"line_start":113,"line_end":113,"column_start":17,"column_end":29},"alias_span":null,"name":"GenericImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2177},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4181,"byte_end":4197,"line_start":114,"line_end":114,"column_start":17,"column_end":33},"alias_span":null,"name":"GenericImageView","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2145},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4215,"byte_end":4227,"line_start":115,"line_end":115,"column_start":17,"column_end":29},"alias_span":null,"name":"ImageDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2158},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4245,"byte_end":4260,"line_start":116,"line_end":116,"column_start":17,"column_end":32},"alias_span":null,"name":"ImageDecoderExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2167},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4278,"byte_end":4290,"line_start":117,"line_end":117,"column_start":17,"column_end":29},"alias_span":null,"name":"ImageEncoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3425},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4308,"byte_end":4319,"line_start":118,"line_end":118,"column_start":17,"column_end":28},"alias_span":null,"name":"ImageFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3470},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4337,"byte_end":4354,"line_start":119,"line_end":119,"column_start":17,"column_end":34},"alias_span":null,"name":"ImageOutputFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3488},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4372,"byte_end":4380,"line_start":120,"line_end":120,"column_start":17,"column_end":25},"alias_span":null,"name":"Progress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3503},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4427,"byte_end":4433,"line_start":122,"line_end":122,"column_start":17,"column_end":23},"alias_span":null,"name":"Pixels","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2202},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4451,"byte_end":4459,"line_start":123,"line_end":123,"column_start":17,"column_end":25},"alias_span":null,"name":"SubImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1529},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4506,"byte_end":4520,"line_start":126,"line_end":126,"column_start":18,"column_end":32},"alias_span":null,"name":"GrayAlphaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1528},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4539,"byte_end":4548,"line_start":127,"line_end":127,"column_start":18,"column_end":27},"alias_span":null,"name":"GrayImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2717},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4599,"byte_end":4610,"line_start":129,"line_end":129,"column_start":18,"column_end":29},"alias_span":null,"name":"ImageBuffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1526},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4629,"byte_end":4637,"line_start":130,"line_end":130,"column_start":18,"column_end":26},"alias_span":null,"name":"RgbImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1527},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4656,"byte_end":4665,"line_start":131,"line_end":131,"column_start":18,"column_end":27},"alias_span":null,"name":"RgbaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2561},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4690,"byte_end":4701,"line_start":133,"line_end":133,"column_start":22,"column_end":33},"alias_span":null,"name":"FlatSamples","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2272},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4738,"byte_end":4753,"line_start":136,"line_end":136,"column_start":25,"column_end":40},"alias_span":null,"name":"EncodableLayout","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2278},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4755,"byte_end":4764,"line_start":136,"line_end":136,"column_start":42,"column_end":51},"alias_span":null,"name":"Primitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2309},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4766,"byte_end":4771,"line_start":136,"line_end":136,"column_start":53,"column_end":58},"alias_span":null,"name":"Pixel","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":851},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4841,"byte_end":4853,"line_start":139,"line_end":139,"column_start":37,"column_end":49},"alias_span":null,"name":"guess_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":842},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4855,"byte_end":4859,"line_start":139,"line_end":139,"column_start":51,"column_end":55},"alias_span":null,"name":"load","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2037},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4888,"byte_end":4904,"line_start":140,"line_end":140,"column_start":27,"column_end":43},"alias_span":null,"name":"load_from_memory","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2038},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4906,"byte_end":4934,"line_start":140,"line_end":140,"column_start":45,"column_end":73},"alias_span":null,"name":"load_from_memory_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2029},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4936,"byte_end":4940,"line_start":140,"line_end":140,"column_start":75,"column_end":79},"alias_span":null,"name":"open","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2033},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4961,"byte_end":4972,"line_start":141,"line_end":141,"column_start":20,"column_end":31},"alias_span":null,"name":"save_buffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2035},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4974,"byte_end":4997,"line_start":141,"line_end":141,"column_start":33,"column_end":56},"alias_span":null,"name":"save_buffer_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2031},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":4999,"byte_end":5015,"line_start":141,"line_end":141,"column_start":58,"column_end":74},"alias_span":null,"name":"image_dimensions","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3380},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":5044,"byte_end":5056,"line_start":143,"line_end":143,"column_start":26,"column_end":38},"alias_span":null,"name":"DynamicImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2701},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":5086,"byte_end":5091,"line_start":145,"line_end":145,"column_start":28,"column_end":33},"alias_span":null,"name":"Delay","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2694},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":5093,"byte_end":5098,"line_start":145,"line_end":145,"column_start":35,"column_end":40},"alias_span":null,"name":"Frame","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1094},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":5100,"byte_end":5106,"line_start":145,"line_end":145,"column_start":42,"column_end":48},"alias_span":null,"name":"Frames","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1513},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":5329,"byte_end":5342,"line_start":154,"line_end":154,"column_start":9,"column_end":22},"alias_span":null,"name":"ConvertBuffer","value":"","parent":{"krate":0,"index":215}},{"kind":"Use","ref_id":{"krate":0,"index":1327},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":5352,"byte_end":5367,"line_start":155,"line_end":155,"column_start":9,"column_end":24},"alias_span":null,"name":"EnumeratePixels","value":"","parent":{"krate":0,"index":215}},{"kind":"Use","ref_id":{"krate":0,"index":1372},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":5377,"byte_end":5395,"line_start":156,"line_end":156,"column_start":9,"column_end":27},"alias_span":null,"name":"EnumeratePixelsMut","value":"","parent":{"krate":0,"index":215}},{"kind":"Use","ref_id":{"krate":0,"index":1350},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":5405,"byte_end":5418,"line_start":157,"line_end":157,"column_start":9,"column_end":22},"alias_span":null,"name":"EnumerateRows","value":"","parent":{"krate":0,"index":215}},{"kind":"Use","ref_id":{"krate":0,"index":1392},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":5428,"byte_end":5444,"line_start":158,"line_end":158,"column_start":9,"column_end":25},"alias_span":null,"name":"EnumerateRowsMut","value":"","parent":{"krate":0,"index":215}},{"kind":"Use","ref_id":{"krate":0,"index":1229},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":5454,"byte_end":5460,"line_start":159,"line_end":159,"column_start":9,"column_end":15},"alias_span":null,"name":"Pixels","value":"","parent":{"krate":0,"index":215}},{"kind":"Use","ref_id":{"krate":0,"index":1254},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":5470,"byte_end":5479,"line_start":160,"line_end":160,"column_start":9,"column_end":18},"alias_span":null,"name":"PixelsMut","value":"","parent":{"krate":0,"index":215}},{"kind":"Use","ref_id":{"krate":0,"index":1276},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":5489,"byte_end":5493,"line_start":161,"line_end":161,"column_start":9,"column_end":13},"alias_span":null,"name":"Rows","value":"","parent":{"krate":0,"index":215}},{"kind":"Use","ref_id":{"krate":0,"index":1303},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":5503,"byte_end":5510,"line_start":162,"line_end":162,"column_start":9,"column_end":16},"alias_span":null,"name":"RowsMut","value":"","parent":{"krate":0,"index":215}},{"kind":"Use","ref_id":{"krate":0,"index":2517},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\mod.rs","byte_start":30681,"byte_end":30685,"line_start":6,"line_end":6,"column_start":21,"column_end":25},"alias_span":null,"name":"Rect","value":"","parent":{"krate":0,"index":244}},{"kind":"Use","ref_id":{"krate":0,"index":2542},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":39602,"byte_end":39612,"line_start":9,"line_end":9,"column_start":23,"column_end":33},"alias_span":null,"name":"FilterType","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":2547},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":39650,"byte_end":39660,"line_start":11,"line_end":11,"column_start":36,"column_end":46},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":2548},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":39650,"byte_end":39660,"line_start":11,"line_end":11,"column_start":36,"column_end":46},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":2549},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":39662,"byte_end":39670,"line_start":11,"line_end":11,"column_start":48,"column_end":56},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":2550},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":39662,"byte_end":39670,"line_start":11,"line_end":11,"column_start":48,"column_end":56},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":2551},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":39672,"byte_end":39680,"line_start":11,"line_end":11,"column_start":58,"column_end":66},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":2552},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":39672,"byte_end":39680,"line_start":11,"line_end":11,"column_start":58,"column_end":66},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":2543},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":39682,"byte_end":39689,"line_start":11,"line_end":11,"column_start":68,"column_end":75},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":2544},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":39682,"byte_end":39689,"line_start":11,"line_end":11,"column_start":68,"column_end":75},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":2545},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":39691,"byte_end":39699,"line_start":11,"line_end":11,"column_start":77,"column_end":85},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":2546},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":39691,"byte_end":39699,"line_start":11,"line_end":11,"column_start":77,"column_end":85},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":440},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":39758,"byte_end":39773,"line_start":15,"line_end":15,"column_start":5,"column_end":20},"alias_span":null,"name":"flip_horizontal","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":452},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":39775,"byte_end":39799,"line_start":15,"line_end":15,"column_start":22,"column_end":46},"alias_span":null,"name":"flip_horizontal_in_place","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":442},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":39801,"byte_end":39814,"line_start":15,"line_end":15,"column_start":48,"column_end":61},"alias_span":null,"name":"flip_vertical","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":454},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":39816,"byte_end":39838,"line_start":15,"line_end":15,"column_start":63,"column_end":85},"alias_span":null,"name":"flip_vertical_in_place","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":427},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":39840,"byte_end":39849,"line_start":15,"line_end":15,"column_start":87,"column_end":96},"alias_span":null,"name":"rotate180","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":450},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":39855,"byte_end":39873,"line_start":16,"line_end":16,"column_start":5,"column_end":23},"alias_span":null,"name":"rotate180_in_place","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":429},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":39875,"byte_end":39884,"line_start":16,"line_end":16,"column_start":25,"column_end":34},"alias_span":null,"name":"rotate270","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":425},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":39886,"byte_end":39894,"line_start":16,"line_end":16,"column_start":36,"column_end":44},"alias_span":null,"name":"rotate90","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":434},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":39896,"byte_end":39908,"line_start":16,"line_end":16,"column_start":46,"column_end":58},"alias_span":null,"name":"rotate180_in","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":431},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":39910,"byte_end":39921,"line_start":16,"line_end":16,"column_start":60,"column_end":71},"alias_span":null,"name":"rotate90_in","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":437},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":39923,"byte_end":39935,"line_start":16,"line_end":16,"column_start":73,"column_end":85},"alias_span":null,"name":"rotate270_in","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":444},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":39937,"byte_end":39955,"line_start":16,"line_end":16,"column_start":87,"column_end":105},"alias_span":null,"name":"flip_horizontal_in","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":447},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":39957,"byte_end":39973,"line_start":16,"line_end":16,"column_start":107,"column_end":123},"alias_span":null,"name":"flip_vertical_in","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":674},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":40020,"byte_end":40024,"line_start":20,"line_end":20,"column_start":24,"column_end":28},"alias_span":null,"name":"blur","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":667},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":40026,"byte_end":40035,"line_start":20,"line_end":20,"column_start":30,"column_end":39},"alias_span":null,"name":"filter3x3","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":672},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":40037,"byte_end":40043,"line_start":20,"line_end":20,"column_start":41,"column_end":47},"alias_span":null,"name":"resize","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":644},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":40045,"byte_end":40054,"line_start":20,"line_end":20,"column_start":49,"column_end":58},"alias_span":null,"name":"thumbnail","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":677},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":40056,"byte_end":40065,"line_start":20,"line_end":20,"column_start":60,"column_end":69},"alias_span":null,"name":"unsharpen","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":514},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":40115,"byte_end":40123,"line_start":23,"line_end":23,"column_start":26,"column_end":34},"alias_span":null,"name":"brighten","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":506},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":40125,"byte_end":40133,"line_start":23,"line_end":23,"column_start":36,"column_end":44},"alias_span":null,"name":"contrast","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":562},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":40135,"byte_end":40141,"line_start":23,"line_end":23,"column_start":46,"column_end":52},"alias_span":null,"name":"dither","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":502},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":40143,"byte_end":40152,"line_start":23,"line_end":23,"column_start":54,"column_end":63},"alias_span":null,"name":"grayscale","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":524},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":40154,"byte_end":40163,"line_start":23,"line_end":23,"column_start":65,"column_end":74},"alias_span":null,"name":"huerotate","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":567},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":40165,"byte_end":40177,"line_start":23,"line_end":23,"column_start":76,"column_end":88},"alias_span":null,"name":"index_colors","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":504},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":40179,"byte_end":40185,"line_start":23,"line_end":23,"column_start":90,"column_end":96},"alias_span":null,"name":"invert","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":2537},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":40212,"byte_end":40219,"line_start":24,"line_end":24,"column_start":26,"column_end":33},"alias_span":null,"name":"BiLevel","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":2538},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":40212,"byte_end":40219,"line_start":24,"line_end":24,"column_start":26,"column_end":33},"alias_span":null,"name":"BiLevel","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":532},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":40221,"byte_end":40229,"line_start":24,"line_end":24,"column_start":35,"column_end":43},"alias_span":null,"name":"ColorMap","value":"","parent":{"krate":0,"index":270}},{"kind":"Use","ref_id":{"krate":0,"index":764},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\mod.rs","byte_start":109866,"byte_end":109872,"line_start":5,"line_end":5,"column_start":23,"column_end":29},"alias_span":null,"name":"Reader","value":"","parent":{"krate":0,"index":708}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":0,"byte_end":12891,"line_start":1,"line_end":395,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":86},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":96},{"krate":0,"index":99},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":113},{"krate":0,"index":116},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":125},{"krate":0,"index":128},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":135},{"krate":0,"index":138},{"krate":0,"index":141},{"krate":0,"index":215},{"krate":0,"index":244},{"krate":0,"index":270},{"krate":0,"index":708},{"krate":0,"index":856},{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1131},{"krate":0,"index":1536},{"krate":0,"index":1788},{"krate":0,"index":2039},{"krate":0,"index":2235},{"krate":0,"index":2355},{"krate":0,"index":3555},{"krate":0,"index":2375}],"decl_id":null,"docs":" # Overview","sig":null,"attributes":[{"value":"/ # Overview","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":0,"byte_end":14,"line_start":1,"line_end":1,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":15,"byte_end":18,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate provides native rust implementations of image encoding and decoding as well as some","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":19,"byte_end":117,"line_start":3,"line_end":3,"column_start":1,"column_end":99}},{"value":"/ basic image manipulation functions. Additional documentation can currently also be found in the","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":118,"byte_end":217,"line_start":4,"line_end":4,"column_start":1,"column_end":100}},{"value":"/ [README.md file which is most easily viewed on","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":218,"byte_end":268,"line_start":5,"line_end":5,"column_start":1,"column_end":51}},{"value":"/ github](https://github.com/image-rs/image/blob/master/README.md).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":269,"byte_end":338,"line_start":6,"line_end":6,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":339,"byte_end":342,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ There are two core problems for which this library provides solutions: a unified interface for image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":343,"byte_end":447,"line_start":8,"line_end":8,"column_start":1,"column_end":105}},{"value":"/ encodings and simple generic buffers for their content. It's possible to use either feature","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":448,"byte_end":543,"line_start":9,"line_end":9,"column_start":1,"column_end":96}},{"value":"/ without the other. The focus is on a small and stable set of common operations that can be","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":544,"byte_end":638,"line_start":10,"line_end":10,"column_start":1,"column_end":95}},{"value":"/ supplemented by other specialized crates. The library also prefers safe solutions with few","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":639,"byte_end":733,"line_start":11,"line_end":11,"column_start":1,"column_end":95}},{"value":"/ dependencies.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":734,"byte_end":751,"line_start":12,"line_end":12,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":752,"byte_end":755,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # High level API","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":756,"byte_end":776,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":777,"byte_end":780,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Load images using [`io::Reader`]:","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":781,"byte_end":818,"line_start":16,"line_end":16,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":819,"byte_end":822,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":823,"byte_end":841,"line_start":18,"line_end":18,"column_start":1,"column_end":19}},{"value":"/ # use std::io::Cursor;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":842,"byte_end":868,"line_start":19,"line_end":19,"column_start":1,"column_end":27}},{"value":"/ use image::io::Reader as ImageReader;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":869,"byte_end":910,"line_start":20,"line_end":20,"column_start":1,"column_end":42}},{"value":"/ # fn main() -> Result<(), image::ImageError> {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":911,"byte_end":961,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"/ # let bytes = vec![0u8];","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":962,"byte_end":990,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":991,"byte_end":994,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ let img = ImageReader::open(\"myimage.png\")?.decode()?;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":995,"byte_end":1053,"line_start":24,"line_end":24,"column_start":1,"column_end":59}},{"value":"/ let img2 = ImageReader::new(Cursor::new(bytes)).decode()?;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1054,"byte_end":1116,"line_start":25,"line_end":25,"column_start":1,"column_end":63}},{"value":"/ # Ok(())","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1117,"byte_end":1129,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1130,"byte_end":1137,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1138,"byte_end":1145,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1146,"byte_end":1149,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ And save them using [`save`] or [`write_to`] methods:","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1150,"byte_end":1207,"line_start":30,"line_end":30,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1208,"byte_end":1211,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1212,"byte_end":1230,"line_start":32,"line_end":32,"column_start":1,"column_end":19}},{"value":"/ # use std::io::Write;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1231,"byte_end":1256,"line_start":33,"line_end":33,"column_start":1,"column_end":26}},{"value":"/ # use image::ImageOutputFormat;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1257,"byte_end":1292,"line_start":34,"line_end":34,"column_start":1,"column_end":36}},{"value":"/ # use image::DynamicImage;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1293,"byte_end":1323,"line_start":35,"line_end":35,"column_start":1,"column_end":31}},{"value":"/ # #[cfg(feature = \"png\")]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1324,"byte_end":1353,"line_start":36,"line_end":36,"column_start":1,"column_end":30}},{"value":"/ # fn main() -> Result<(), image::ImageError> {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1354,"byte_end":1404,"line_start":37,"line_end":37,"column_start":1,"column_end":51}},{"value":"/ # let img: DynamicImage = unimplemented!();","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1405,"byte_end":1452,"line_start":38,"line_end":38,"column_start":1,"column_end":48}},{"value":"/ # let img2: DynamicImage = unimplemented!();","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1453,"byte_end":1501,"line_start":39,"line_end":39,"column_start":1,"column_end":49}},{"value":"/ img.save(\"empty.jpg\")?;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1502,"byte_end":1529,"line_start":40,"line_end":40,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1530,"byte_end":1533,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ let mut bytes: Vec<u8> = Vec::new();","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1534,"byte_end":1574,"line_start":42,"line_end":42,"column_start":1,"column_end":41}},{"value":"/ img2.write_to(&mut bytes, image::ImageOutputFormat::Png)?;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1575,"byte_end":1637,"line_start":43,"line_end":43,"column_start":1,"column_end":63}},{"value":"/ # Ok(())","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1638,"byte_end":1650,"line_start":44,"line_end":44,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1651,"byte_end":1658,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(not(feature = \"png\"))] fn main() {}","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1659,"byte_end":1706,"line_start":46,"line_end":46,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1707,"byte_end":1714,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1715,"byte_end":1718,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ With default features, the crate includes support for [many common image formats](codecs/index.html#supported-formats).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1719,"byte_end":1842,"line_start":49,"line_end":49,"column_start":1,"column_end":124}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1843,"byte_end":1846,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ [`save`]: enum.DynamicImage.html#method.save","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1847,"byte_end":1895,"line_start":51,"line_end":51,"column_start":1,"column_end":49}},{"value":"/ [`write_to`]: enum.DynamicImage.html#method.write_to","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1896,"byte_end":1952,"line_start":52,"line_end":52,"column_start":1,"column_end":57}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1953,"byte_end":1994,"line_start":53,"line_end":53,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1995,"byte_end":1998,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ # Image buffers","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":1999,"byte_end":2018,"line_start":55,"line_end":55,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":2019,"byte_end":2022,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ The two main types for storing images:","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":2023,"byte_end":2065,"line_start":57,"line_end":57,"column_start":1,"column_end":43}},{"value":"/ * [`ImageBuffer`] which holds statically typed image contents.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":2066,"byte_end":2132,"line_start":58,"line_end":58,"column_start":1,"column_end":67}},{"value":"/ * [`DynamicImage`] which is an enum over the supported ImageBuffer formats","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":2133,"byte_end":2211,"line_start":59,"line_end":59,"column_start":1,"column_end":79}},{"value":"/     and supports conversions between them.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":2212,"byte_end":2258,"line_start":60,"line_end":60,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":2259,"byte_end":2262,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ As well as a few more specialized options:","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":2263,"byte_end":2309,"line_start":62,"line_end":62,"column_start":1,"column_end":47}},{"value":"/ * [`GenericImage`] trait for a mutable image buffer.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":2310,"byte_end":2366,"line_start":63,"line_end":63,"column_start":1,"column_end":57}},{"value":"/ * [`GenericImageView`] trait for read only references to a GenericImage.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":2367,"byte_end":2443,"line_start":64,"line_end":64,"column_start":1,"column_end":77}},{"value":"/ * [`flat`] module containing types for interoperability with generic channel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":2444,"byte_end":2524,"line_start":65,"line_end":65,"column_start":1,"column_end":81}},{"value":"/     matrices and foreign interfaces.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":2525,"byte_end":2565,"line_start":66,"line_end":66,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":2566,"byte_end":2569,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ [`GenericImageView`]: trait.GenericImageView.html","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":2570,"byte_end":2623,"line_start":68,"line_end":68,"column_start":1,"column_end":54}},{"value":"/ [`GenericImage`]: trait.GenericImage.html","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":2624,"byte_end":2669,"line_start":69,"line_end":69,"column_start":1,"column_end":46}},{"value":"/ [`ImageBuffer`]: struct.ImageBuffer.html","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":2670,"byte_end":2714,"line_start":70,"line_end":70,"column_start":1,"column_end":45}},{"value":"/ [`DynamicImage`]: enum.DynamicImage.html","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":2715,"byte_end":2759,"line_start":71,"line_end":71,"column_start":1,"column_end":45}},{"value":"/ [`flat`]: flat/index.html","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":2760,"byte_end":2789,"line_start":72,"line_end":72,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":2790,"byte_end":2793,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ # Low level encoding/decoding API","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":2794,"byte_end":2831,"line_start":74,"line_end":74,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":2832,"byte_end":2835,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ The [`ImageDecoder`] and [`ImageDecoderExt`] traits are implemented for many image file","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":2836,"byte_end":2927,"line_start":76,"line_end":76,"column_start":1,"column_end":92}},{"value":"/ formats. They decode image data by directly on raw byte slices. Given an ImageDecoder, you can","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":2928,"byte_end":3026,"line_start":77,"line_end":77,"column_start":1,"column_end":99}},{"value":"/ produce a DynamicImage via [`DynamicImage::from_decoder`].","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":3027,"byte_end":3089,"line_start":78,"line_end":78,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":3090,"byte_end":3093,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ [`ImageEncoder`] provides the analogous functionality for encoding image data.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":3094,"byte_end":3176,"line_start":80,"line_end":80,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":3177,"byte_end":3180,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ [`DynamicImage::from_decoder`]: enum.DynamicImage.html#method.from_decoder","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":3181,"byte_end":3259,"line_start":82,"line_end":82,"column_start":1,"column_end":79}},{"value":"/ [`ImageDecoderExt`]: trait.ImageDecoderExt.html","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":3260,"byte_end":3311,"line_start":83,"line_end":83,"column_start":1,"column_end":52}},{"value":"/ [`ImageDecoder`]: trait.ImageDecoder.html","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":3312,"byte_end":3357,"line_start":84,"line_end":84,"column_start":1,"column_end":46}},{"value":"/ [`ImageEncoder`]: trait.ImageEncoder.html","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":3358,"byte_end":3403,"line_start":85,"line_end":85,"column_start":1,"column_end":46}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":3404,"byte_end":3426,"line_start":86,"line_end":86,"column_start":1,"column_end":23}},{"value":"warn(unused_qualifications)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":3427,"byte_end":3458,"line_start":87,"line_end":87,"column_start":1,"column_end":32}},{"value":"deny(unreachable_pub)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":3459,"byte_end":3484,"line_start":88,"line_end":88,"column_start":1,"column_end":26}},{"value":"deny(deprecated)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":3485,"byte_end":3505,"line_start":89,"line_end":89,"column_start":1,"column_end":21}},{"value":"deny(missing_copy_implementations)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":3506,"byte_end":3544,"line_start":90,"line_end":90,"column_start":1,"column_end":39}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":3642,"byte_end":3683,"line_start":93,"line_end":93,"column_start":1,"column_end":42}},{"value":"allow(clippy :: wrong_self_convention, clippy :: enum_variant_names)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":3724,"byte_end":3792,"line_start":95,"line_end":95,"column_start":1,"column_end":69}}]},{"kind":"Mod","id":{"krate":0,"index":141},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::error","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":146},{"krate":0,"index":149},{"krate":0,"index":152},{"krate":0,"index":155},{"krate":0,"index":158},{"krate":0,"index":2376},{"krate":0,"index":2395},{"krate":0,"index":2397},{"krate":0,"index":2400},{"krate":0,"index":2402},{"krate":0,"index":2415},{"krate":0,"index":2417},{"krate":0,"index":2419},{"krate":0,"index":2422},{"krate":0,"index":2423},{"krate":0,"index":2426},{"krate":0,"index":2429},{"krate":0,"index":2431},{"krate":0,"index":2434},{"krate":0,"index":2436},{"krate":0,"index":2449},{"krate":0,"index":2451},{"krate":0,"index":2453},{"krate":0,"index":2456},{"krate":0,"index":2457},{"krate":0,"index":2460},{"krate":0,"index":2463},{"krate":0,"index":2465},{"krate":0,"index":2467},{"krate":0,"index":2469},{"krate":0,"index":2477},{"krate":0,"index":2479},{"krate":0,"index":2481},{"krate":0,"index":2484},{"krate":0,"index":2485},{"krate":0,"index":2488},{"krate":0,"index":2489},{"krate":0,"index":2491},{"krate":0,"index":2506},{"krate":0,"index":2508},{"krate":0,"index":2510},{"krate":0,"index":2513},{"krate":0,"index":2514},{"krate":0,"index":161},{"krate":0,"index":165},{"krate":0,"index":170},{"krate":0,"index":175},{"krate":0,"index":178},{"krate":0,"index":181},{"krate":0,"index":183},{"krate":0,"index":185},{"krate":0,"index":187},{"krate":0,"index":189},{"krate":0,"index":191},{"krate":0,"index":193},{"krate":0,"index":195},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":213}],"decl_id":null,"docs":" Contains detailed error representation.","sig":null,"attributes":[{"value":"/ Contains detailed error representation.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":12893,"byte_end":12936,"line_start":1,"line_end":1,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":12937,"byte_end":12940,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ See the main [`ImageError`] which contains a variant for each specialized error type. The","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":12941,"byte_end":13034,"line_start":3,"line_end":3,"column_start":1,"column_end":94}},{"value":"/ subtypes used in each variant are opaque by design. They can be roughly inspected through their","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":13035,"byte_end":13134,"line_start":4,"line_end":4,"column_start":1,"column_end":100}},{"value":"/ respective `kind` methods which work similar to `std::io::Error::kind`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":13135,"byte_end":13210,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":13211,"byte_end":13214,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ The error interface makes it possible to inspect the error of an underlying decoder or encoder,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":13215,"byte_end":13314,"line_start":7,"line_end":7,"column_start":1,"column_end":100}},{"value":"/ through the `Error::source` method. Note that this is not part of the stable interface and you","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":13315,"byte_end":13413,"line_start":8,"line_end":8,"column_start":1,"column_end":99}},{"value":"/ may not rely on a particular error value for a particular operation. This means mainly that","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":13414,"byte_end":13509,"line_start":9,"line_end":9,"column_start":1,"column_end":96}},{"value":"/ `image` does not promise to remain on a particular version of its underlying decoders but if","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":13510,"byte_end":13606,"line_start":10,"line_end":10,"column_start":1,"column_end":97}},{"value":"/ you ensure to use the same version of the dependency (or at least of the error type) through","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":13607,"byte_end":13703,"line_start":11,"line_end":11,"column_start":1,"column_end":97}},{"value":"/ external means then you could inspect the error type in slightly more detail.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":13704,"byte_end":13785,"line_start":12,"line_end":12,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":13786,"byte_end":13789,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ [`ImageError`]: enum.ImageError.html","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":13790,"byte_end":13830,"line_start":14,"line_end":14,"column_start":1,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2377},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":14542,"byte_end":14550,"line_start":34,"line_end":34,"column_start":5,"column_end":13},"name":"Decoding","qualname":"::error::ImageError::Decoding","value":"ImageError::Decoding(DecodingError)","parent":{"krate":0,"index":2376},"children":[],"decl_id":null,"docs":" An error was encountered while decoding.","sig":null,"attributes":[{"value":"/ An error was encountered while decoding.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":14259,"byte_end":14303,"line_start":29,"line_end":29,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":14308,"byte_end":14311,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ This means that the input data did not conform to the specification of some image format,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":14316,"byte_end":14409,"line_start":31,"line_end":31,"column_start":5,"column_end":98}},{"value":"/ or that no format could be determined, or that it did not match format specific","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":14414,"byte_end":14497,"line_start":32,"line_end":32,"column_start":5,"column_end":88}},{"value":"/ requirements set by the caller.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":14502,"byte_end":14537,"line_start":33,"line_end":33,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2380},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":14936,"byte_end":14944,"line_start":42,"line_end":42,"column_start":5,"column_end":13},"name":"Encoding","qualname":"::error::ImageError::Encoding","value":"ImageError::Encoding(EncodingError)","parent":{"krate":0,"index":2376},"children":[],"decl_id":null,"docs":" An error was encountered while encoding.","sig":null,"attributes":[{"value":"/ An error was encountered while encoding.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":14572,"byte_end":14616,"line_start":36,"line_end":36,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":14621,"byte_end":14624,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ The input image can not be encoded with the chosen format, for example because the","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":14629,"byte_end":14715,"line_start":38,"line_end":38,"column_start":5,"column_end":91}},{"value":"/ specification has no representation for its color space or because a necessary conversion","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":14720,"byte_end":14813,"line_start":39,"line_end":39,"column_start":5,"column_end":98}},{"value":"/ is ambiguous. In some cases it might also happen that the dimensions can not be used with","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":14818,"byte_end":14911,"line_start":40,"line_end":40,"column_start":5,"column_end":98}},{"value":"/ the format.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":14916,"byte_end":14931,"line_start":41,"line_end":41,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2383},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":15184,"byte_end":15193,"line_start":48,"line_end":48,"column_start":5,"column_end":14},"name":"Parameter","qualname":"::error::ImageError::Parameter","value":"ImageError::Parameter(ParameterError)","parent":{"krate":0,"index":2376},"children":[],"decl_id":null,"docs":" An error was encountered in input arguments.","sig":null,"attributes":[{"value":"/ An error was encountered in input arguments.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":14966,"byte_end":15014,"line_start":44,"line_end":44,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":15019,"byte_end":15022,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This is a catch-all case for strictly internal operations such as scaling, conversions,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":15027,"byte_end":15118,"line_start":46,"line_end":46,"column_start":5,"column_end":96}},{"value":"/ etc. that involve no external format specifications.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":15123,"byte_end":15179,"line_start":47,"line_end":47,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2386},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":15453,"byte_end":15459,"line_start":54,"line_end":54,"column_start":5,"column_end":11},"name":"Limits","qualname":"::error::ImageError::Limits","value":"ImageError::Limits(LimitError)","parent":{"krate":0,"index":2376},"children":[],"decl_id":null,"docs":" Completing the operation would have required more resources than allowed.","sig":null,"attributes":[{"value":"/ Completing the operation would have required more resources than allowed.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":15216,"byte_end":15293,"line_start":50,"line_end":50,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":15298,"byte_end":15301,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ Errors of this type are limits set by the user or environment, *not* inherent in a specific","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":15306,"byte_end":15401,"line_start":52,"line_end":52,"column_start":5,"column_end":100}},{"value":"/ format or operation that was executed.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":15406,"byte_end":15448,"line_start":53,"line_end":53,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2389},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":15797,"byte_end":15808,"line_start":62,"line_end":62,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::error::ImageError::Unsupported","value":"ImageError::Unsupported(UnsupportedError)","parent":{"krate":0,"index":2376},"children":[],"decl_id":null,"docs":" An operation can not be completed by the chosen abstraction.","sig":null,"attributes":[{"value":"/ An operation can not be completed by the chosen abstraction.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":15478,"byte_end":15542,"line_start":56,"line_end":56,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":15547,"byte_end":15550,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ This means that it might be possible for the operation to succeed in general but","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":15555,"byte_end":15639,"line_start":58,"line_end":58,"column_start":5,"column_end":89}},{"value":"/ * it requires a disabled feature,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":15644,"byte_end":15681,"line_start":59,"line_end":59,"column_start":5,"column_end":42}},{"value":"/ * the implementation does not yet exist, or","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":15686,"byte_end":15733,"line_start":60,"line_end":60,"column_start":5,"column_end":52}},{"value":"/ * no abstraction for a lower level could be found.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":15738,"byte_end":15792,"line_start":61,"line_end":61,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2392},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":15899,"byte_end":15906,"line_start":65,"line_end":65,"column_start":5,"column_end":12},"name":"IoError","qualname":"::error::ImageError::IoError","value":"ImageError::IoError(io::Error)","parent":{"krate":0,"index":2376},"children":[],"decl_id":null,"docs":" An error occurred while interacting with the environment.\n","sig":null,"attributes":[{"value":"/ An error occurred while interacting with the environment.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":15833,"byte_end":15894,"line_start":64,"line_end":64,"column_start":5,"column_end":66}}]},{"kind":"Enum","id":{"krate":0,"index":2376},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":14242,"byte_end":14252,"line_start":28,"line_end":28,"column_start":10,"column_end":20},"name":"ImageError","qualname":"::error::ImageError","value":"pub enum ImageError {\n    Decoding(DecodingError),\n    Encoding(EncodingError),\n    Parameter(ParameterError),\n    Limits(LimitError),\n    Unsupported(UnsupportedError),\n    IoError(io::Error),\n}","parent":null,"children":[{"krate":0,"index":2377},{"krate":0,"index":2380},{"krate":0,"index":2383},{"krate":0,"index":2386},{"krate":0,"index":2389},{"krate":0,"index":2392}],"decl_id":null,"docs":" The generic error type for image operations.","sig":null,"attributes":[{"value":"/ The generic error type for image operations.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":13984,"byte_end":14032,"line_start":23,"line_end":23,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":14033,"byte_end":14036,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This high level enum allows, by variant matching, a rough separation of concerns between","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":14037,"byte_end":14129,"line_start":25,"line_end":25,"column_start":1,"column_end":93}},{"value":"/ underlying IO, the caller, format specifications, and the `image` implementation.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":14130,"byte_end":14215,"line_start":26,"line_end":26,"column_start":1,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":2397},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":16138,"byte_end":16154,"line_start":74,"line_end":74,"column_start":12,"column_end":28},"name":"UnsupportedError","qualname":"::error::UnsupportedError","value":"UnsupportedError {  }","parent":null,"children":[{"krate":0,"index":2398},{"krate":0,"index":2399}],"decl_id":null,"docs":" The implementation for an operation was not provided.","sig":null,"attributes":[{"value":"/ The implementation for an operation was not provided.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":15922,"byte_end":15979,"line_start":68,"line_end":68,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":15980,"byte_end":15983,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ See the variant [`Unsupported`] for more documentation.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":15984,"byte_end":16043,"line_start":70,"line_end":70,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":16044,"byte_end":16047,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ [`Unsupported`]: enum.ImageError.html#variant.Unsupported","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":16048,"byte_end":16109,"line_start":72,"line_end":72,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2403},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":16393,"byte_end":16398,"line_start":83,"line_end":83,"column_start":5,"column_end":10},"name":"Color","qualname":"::error::UnsupportedErrorKind::Color","value":"UnsupportedErrorKind::Color(ExtendedColorType)","parent":{"krate":0,"index":2402},"children":[],"decl_id":null,"docs":" The required color type can not be handled.\n","sig":null,"attributes":[{"value":"/ The required color type can not be handled.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":16341,"byte_end":16388,"line_start":82,"line_end":82,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2406},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":16465,"byte_end":16471,"line_start":85,"line_end":85,"column_start":5,"column_end":11},"name":"Format","qualname":"::error::UnsupportedErrorKind::Format","value":"UnsupportedErrorKind::Format(ImageFormatHint)","parent":{"krate":0,"index":2402},"children":[],"decl_id":null,"docs":" An image format is not supported.\n","sig":null,"attributes":[{"value":"/ An image format is not supported.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":16423,"byte_end":16460,"line_start":84,"line_end":84,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2409},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":16615,"byte_end":16629,"line_start":88,"line_end":88,"column_start":5,"column_end":19},"name":"GenericFeature","qualname":"::error::UnsupportedErrorKind::GenericFeature","value":"UnsupportedErrorKind::GenericFeature(String)","parent":{"krate":0,"index":2402},"children":[],"decl_id":null,"docs":" Some feature specified by string.\n This is discouraged and is likely to get deprecated (but not removed).\n","sig":null,"attributes":[{"value":"/ Some feature specified by string.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":16494,"byte_end":16531,"line_start":86,"line_end":86,"column_start":5,"column_end":42}},{"value":"/ This is discouraged and is likely to get deprecated (but not removed).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":16536,"byte_end":16610,"line_start":87,"line_end":87,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2412},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":16662,"byte_end":16677,"line_start":90,"line_end":90,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::UnsupportedErrorKind::__NonExhaustive","value":"UnsupportedErrorKind::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":2402},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2402},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":16314,"byte_end":16334,"line_start":81,"line_end":81,"column_start":10,"column_end":30},"name":"UnsupportedErrorKind","qualname":"::error::UnsupportedErrorKind","value":"pub enum UnsupportedErrorKind {\n    Color(ExtendedColorType),\n    Format(ImageFormatHint),\n    GenericFeature(String),\n    __NonExhaustive(NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2403},{"krate":0,"index":2406},{"krate":0,"index":2409},{"krate":0,"index":2412}],"decl_id":null,"docs":" Details what feature is not supported.\n","sig":null,"attributes":[{"value":"/ Details what feature is not supported.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":16221,"byte_end":16263,"line_start":79,"line_end":79,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":2426},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":16996,"byte_end":17009,"line_start":100,"line_end":100,"column_start":12,"column_end":25},"name":"EncodingError","qualname":"::error::EncodingError","value":"EncodingError {  }","parent":null,"children":[{"krate":0,"index":2427},{"krate":0,"index":2428}],"decl_id":null,"docs":" An error was encountered while encoding an image.","sig":null,"attributes":[{"value":"/ An error was encountered while encoding an image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":16703,"byte_end":16756,"line_start":93,"line_end":93,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":16757,"byte_end":16760,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Encoding`] variant. See its","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":16761,"byte_end":16855,"line_start":95,"line_end":95,"column_start":1,"column_end":95}},{"value":"/ documentation for more information.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":16856,"byte_end":16895,"line_start":96,"line_end":96,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":16896,"byte_end":16899,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Encoding`]: enum.ImageError.html#variant.Encoding","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":16900,"byte_end":16967,"line_start":98,"line_end":98,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":2431},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":17391,"byte_end":17405,"line_start":113,"line_end":113,"column_start":12,"column_end":26},"name":"ParameterError","qualname":"::error::ParameterError","value":"ParameterError {  }","parent":null,"children":[{"krate":0,"index":2432},{"krate":0,"index":2433}],"decl_id":null,"docs":" An error was encountered in inputs arguments.","sig":null,"attributes":[{"value":"/ An error was encountered in inputs arguments.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":17099,"byte_end":17148,"line_start":106,"line_end":106,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":17149,"byte_end":17152,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Parameter`] variant. See its","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":17153,"byte_end":17248,"line_start":108,"line_end":108,"column_start":1,"column_end":96}},{"value":"/ documentation for more information.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":17249,"byte_end":17288,"line_start":109,"line_end":109,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":17289,"byte_end":17292,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Parameter`]: enum.ImageError.html#variant.Parameter","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":17293,"byte_end":17362,"line_start":111,"line_end":111,"column_start":1,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2437},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":17653,"byte_end":17670,"line_start":122,"line_end":122,"column_start":5,"column_end":22},"name":"DimensionMismatch","qualname":"::error::ParameterErrorKind::DimensionMismatch","value":"ParameterErrorKind::DimensionMismatch","parent":{"krate":0,"index":2436},"children":[],"decl_id":null,"docs":" The dimensions passed are wrong.\n","sig":null,"attributes":[{"value":"/ The dimensions passed are wrong.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":17612,"byte_end":17648,"line_start":121,"line_end":121,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2439},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":17768,"byte_end":17781,"line_start":124,"line_end":124,"column_start":5,"column_end":18},"name":"FailedAlready","qualname":"::error::ParameterErrorKind::FailedAlready","value":"ParameterErrorKind::FailedAlready","parent":{"krate":0,"index":2436},"children":[],"decl_id":null,"docs":" Repeated an operation for which error that could not be cloned was emitted already.\n","sig":null,"attributes":[{"value":"/ Repeated an operation for which error that could not be cloned was emitted already.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":17676,"byte_end":17763,"line_start":123,"line_end":123,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2441},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":17909,"byte_end":17916,"line_start":127,"line_end":127,"column_start":5,"column_end":12},"name":"Generic","qualname":"::error::ParameterErrorKind::Generic","value":"ParameterErrorKind::Generic(String)","parent":{"krate":0,"index":2436},"children":[],"decl_id":null,"docs":" A string describing the parameter.\n This is discouraged and is likely to get deprecated (but not removed).\n","sig":null,"attributes":[{"value":"/ A string describing the parameter.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":17787,"byte_end":17825,"line_start":125,"line_end":125,"column_start":5,"column_end":43}},{"value":"/ This is discouraged and is likely to get deprecated (but not removed).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":17830,"byte_end":17904,"line_start":126,"line_end":126,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2444},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":17977,"byte_end":17987,"line_start":129,"line_end":129,"column_start":5,"column_end":15},"name":"NoMoreData","qualname":"::error::ParameterErrorKind::NoMoreData","value":"ParameterErrorKind::NoMoreData","parent":{"krate":0,"index":2436},"children":[],"decl_id":null,"docs":" The end of the image has been reached.\n","sig":null,"attributes":[{"value":"/ The end of the image has been reached.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":17930,"byte_end":17972,"line_start":128,"line_end":128,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2446},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":18071,"byte_end":18086,"line_start":132,"line_end":132,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::ParameterErrorKind::__NonExhaustive","value":"ParameterErrorKind::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":2436},"children":[],"decl_id":null,"docs":" Do not use this, not part of stability guarantees.\n","sig":null,"attributes":[{"value":"/ Do not use this, not part of stability guarantees.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":18012,"byte_end":18066,"line_start":131,"line_end":131,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":2436},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":17587,"byte_end":17605,"line_start":120,"line_end":120,"column_start":10,"column_end":28},"name":"ParameterErrorKind","qualname":"::error::ParameterErrorKind","value":"pub enum ParameterErrorKind {\n    DimensionMismatch,\n    FailedAlready,\n    Generic(String),\n    NoMoreData,\n    __NonExhaustive(NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2437},{"krate":0,"index":2439},{"krate":0,"index":2441},{"krate":0,"index":2444},{"krate":0,"index":2446}],"decl_id":null,"docs":" Details how a parameter is malformed.\n","sig":null,"attributes":[{"value":"/ Details how a parameter is malformed.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":17495,"byte_end":17536,"line_start":118,"line_end":118,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":2460},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":18405,"byte_end":18418,"line_start":142,"line_end":142,"column_start":12,"column_end":25},"name":"DecodingError","qualname":"::error::DecodingError","value":"DecodingError {  }","parent":null,"children":[{"krate":0,"index":2461},{"krate":0,"index":2462}],"decl_id":null,"docs":" An error was encountered while decoding an image.","sig":null,"attributes":[{"value":"/ An error was encountered while decoding an image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":18112,"byte_end":18165,"line_start":135,"line_end":135,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":18166,"byte_end":18169,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Decoding`] variant. See its","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":18170,"byte_end":18264,"line_start":137,"line_end":137,"column_start":1,"column_end":95}},{"value":"/ documentation for more information.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":18265,"byte_end":18304,"line_start":138,"line_end":138,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":18305,"byte_end":18308,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Decoding`]: enum.ImageError.html#variant.Decoding","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":18309,"byte_end":18376,"line_start":140,"line_end":140,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":2465},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":18818,"byte_end":18828,"line_start":154,"line_end":154,"column_start":12,"column_end":22},"name":"LimitError","qualname":"::error::LimitError","value":"LimitError {  }","parent":null,"children":[{"krate":0,"index":2466}],"decl_id":null,"docs":" Completing the operation would have required more resources than allowed.","sig":null,"attributes":[{"value":"/ Completing the operation would have required more resources than allowed.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":18507,"byte_end":18584,"line_start":147,"line_end":147,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":18585,"byte_end":18588,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Limits`] variant. See its","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":18589,"byte_end":18681,"line_start":149,"line_end":149,"column_start":1,"column_end":93}},{"value":"/ documentation for more information.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":18682,"byte_end":18721,"line_start":150,"line_end":150,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":18722,"byte_end":18725,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Limits`]: enum.ImageError.html#variant.Limits","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":18726,"byte_end":18789,"line_start":152,"line_end":152,"column_start":1,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2470},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":19360,"byte_end":19374,"line_start":167,"line_end":167,"column_start":5,"column_end":19},"name":"DimensionError","qualname":"::error::LimitErrorKind::DimensionError","value":"LimitErrorKind::DimensionError","parent":{"krate":0,"index":2469},"children":[],"decl_id":null,"docs":" The resulting image exceed dimension limits in either direction.\n","sig":null,"attributes":[{"value":"/ The resulting image exceed dimension limits in either direction.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":19287,"byte_end":19355,"line_start":166,"line_end":166,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2472},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":19458,"byte_end":19476,"line_start":169,"line_end":169,"column_start":5,"column_end":23},"name":"InsufficientMemory","qualname":"::error::LimitErrorKind::InsufficientMemory","value":"LimitErrorKind::InsufficientMemory","parent":{"krate":0,"index":2469},"children":[],"decl_id":null,"docs":" The operation would have performed an allocation larger than allowed.\n","sig":null,"attributes":[{"value":"/ The operation would have performed an allocation larger than allowed.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":19380,"byte_end":19453,"line_start":168,"line_end":168,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2474},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":19560,"byte_end":19575,"line_start":172,"line_end":172,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::LimitErrorKind::__NonExhaustive","value":"LimitErrorKind::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":2469},"children":[],"decl_id":null,"docs":" Do not use this, not part of stability guarantees.\n","sig":null,"attributes":[{"value":"/ Do not use this, not part of stability guarantees.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":19501,"byte_end":19555,"line_start":171,"line_end":171,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":2469},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":19266,"byte_end":19280,"line_start":165,"line_end":165,"column_start":10,"column_end":24},"name":"LimitErrorKind","qualname":"::error::LimitErrorKind","value":"pub enum LimitErrorKind {\n    DimensionError,\n    InsufficientMemory,\n    __NonExhaustive(NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2470},{"krate":0,"index":2472},{"krate":0,"index":2474}],"decl_id":null,"docs":" Indicates the limit that prevented an operation from completing.","sig":null,"attributes":[{"value":"/ Indicates the limit that prevented an operation from completing.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":18899,"byte_end":18967,"line_start":159,"line_end":159,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":18968,"byte_end":18971,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ Note that this enumeration is not exhaustive and may in the future be extended to provide more","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":18972,"byte_end":19070,"line_start":161,"line_end":161,"column_start":1,"column_end":99}},{"value":"/ detailed information or to incorporate other resources types.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":19071,"byte_end":19136,"line_start":162,"line_end":162,"column_start":1,"column_end":66}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":19182,"byte_end":19220,"line_start":164,"line_end":164,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2492},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":19762,"byte_end":19767,"line_start":179,"line_end":179,"column_start":5,"column_end":10},"name":"Exact","qualname":"::error::ImageFormatHint::Exact","value":"ImageFormatHint::Exact(ImageFormat)","parent":{"krate":0,"index":2491},"children":[],"decl_id":null,"docs":" The format is known exactly.\n","sig":null,"attributes":[{"value":"/ The format is known exactly.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":19725,"byte_end":19757,"line_start":178,"line_end":178,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2495},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":19835,"byte_end":19839,"line_start":182,"line_end":182,"column_start":5,"column_end":9},"name":"Name","qualname":"::error::ImageFormatHint::Name","value":"ImageFormatHint::Name(String)","parent":{"krate":0,"index":2491},"children":[],"decl_id":null,"docs":" The format can be identified by a name.\n","sig":null,"attributes":[{"value":"/ The format can be identified by a name.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":19787,"byte_end":19830,"line_start":181,"line_end":181,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2498},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":19911,"byte_end":19924,"line_start":185,"line_end":185,"column_start":5,"column_end":18},"name":"PathExtension","qualname":"::error::ImageFormatHint::PathExtension","value":"ImageFormatHint::PathExtension(std::path::PathBuf)","parent":{"krate":0,"index":2491},"children":[],"decl_id":null,"docs":" A common path extension for the format is known.\n","sig":null,"attributes":[{"value":"/ A common path extension for the format is known.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":19854,"byte_end":19906,"line_start":184,"line_end":184,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2501},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":20011,"byte_end":20018,"line_start":188,"line_end":188,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::error::ImageFormatHint::Unknown","value":"ImageFormatHint::Unknown","parent":{"krate":0,"index":2491},"children":[],"decl_id":null,"docs":" The format is not known or could not be determined.\n","sig":null,"attributes":[{"value":"/ The format is not known or could not be determined.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":19951,"byte_end":20006,"line_start":187,"line_end":187,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2503},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":20044,"byte_end":20059,"line_start":191,"line_end":191,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::ImageFormatHint::__NonExhaustive","value":"ImageFormatHint::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":2491},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2491},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":19703,"byte_end":19718,"line_start":177,"line_end":177,"column_start":10,"column_end":25},"name":"ImageFormatHint","qualname":"::error::ImageFormatHint","value":"pub enum ImageFormatHint {\n    Exact(ImageFormat),\n    Name(String),\n    PathExtension(std::path::PathBuf),\n    Unknown,\n    __NonExhaustive(NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2492},{"krate":0,"index":2495},{"krate":0,"index":2498},{"krate":0,"index":2501},{"krate":0,"index":2503}],"decl_id":null,"docs":" A best effort representation for image formats.\n","sig":null,"attributes":[{"value":"/ A best effort representation for image formats.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":19601,"byte_end":19652,"line_start":175,"line_end":175,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":20331,"byte_end":20351,"line_start":199,"line_end":199,"column_start":12,"column_end":32},"name":"from_format_and_kind","qualname":"<UnsupportedError>::from_format_and_kind","value":"pub fn from_format_and_kind(ImageFormatHint, UnsupportedErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `UnsupportedError` for an image with details on the unsupported feature.","sig":null,"attributes":[{"value":"/ Create an `UnsupportedError` for an image with details on the unsupported feature.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":20113,"byte_end":20199,"line_start":195,"line_end":195,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":20204,"byte_end":20207,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ If the operation was not connected to a particular image format then the hint may be","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":20212,"byte_end":20300,"line_start":197,"line_end":197,"column_start":5,"column_end":93}},{"value":"/ `Unknown`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":20305,"byte_end":20319,"line_start":198,"line_end":198,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":20579,"byte_end":20583,"line_start":207,"line_end":207,"column_start":12,"column_end":16},"name":"kind","qualname":"<UnsupportedError>::kind","value":"pub fn kind(&Self) -> UnsupportedErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `UnsupportedErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `UnsupportedErrorKind` of the error.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":20501,"byte_end":20567,"line_start":206,"line_end":206,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":20722,"byte_end":20733,"line_start":212,"line_end":212,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<UnsupportedError>::format_hint","value":"pub fn format_hint(&Self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Returns the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Returns the image format associated with this error.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":20654,"byte_end":20710,"line_start":211,"line_end":211,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":20925,"byte_end":20928,"line_start":219,"line_end":219,"column_start":12,"column_end":15},"name":"new","qualname":"<DecodingError>::new","value":"pub fn new<impl Into<Box<dyn Error + Send + Sync>>: Into<Box<dyn Error +\n                                                             Send +\n                                                             Sync>>>(ImageFormatHint,\n                                                                     impl Into<Box<dyn Error + Send + Sync>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `DecodingError` that stems from an arbitrary error of an underlying decoder.\n","sig":null,"attributes":[{"value":"/ Create a `DecodingError` that stems from an arbitrary error of an underlying decoder.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":20824,"byte_end":20913,"line_start":218,"line_end":218,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":21296,"byte_end":21312,"line_start":232,"line_end":232,"column_start":12,"column_end":28},"name":"from_format_hint","qualname":"<DecodingError>::from_format_hint","value":"pub fn from_format_hint(ImageFormatHint) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `DecodingError` for an image format.","sig":null,"attributes":[{"value":"/ Create a `DecodingError` for an image format.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":21140,"byte_end":21189,"line_start":229,"line_end":229,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":21194,"byte_end":21197,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ The error will not contain any further information but is very easy to create.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":21202,"byte_end":21284,"line_start":231,"line_end":231,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":21511,"byte_end":21522,"line_start":240,"line_end":240,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<DecodingError>::format_hint","value":"pub fn format_hint(&Self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Returns the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Returns the image format associated with this error.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":21443,"byte_end":21499,"line_start":239,"line_end":239,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":21715,"byte_end":21718,"line_start":247,"line_end":247,"column_start":12,"column_end":15},"name":"new","qualname":"<EncodingError>::new","value":"pub fn new<impl Into<Box<dyn Error + Send + Sync>>: Into<Box<dyn Error +\n                                                             Send +\n                                                             Sync>>>(ImageFormatHint,\n                                                                     impl Into<Box<dyn Error + Send + Sync>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `EncodingError` that stems from an arbitrary error of an underlying encoder.\n","sig":null,"attributes":[{"value":"/ Create an `EncodingError` that stems from an arbitrary error of an underlying encoder.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":21613,"byte_end":21703,"line_start":246,"line_end":246,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":22087,"byte_end":22103,"line_start":260,"line_end":260,"column_start":12,"column_end":28},"name":"from_format_hint","qualname":"<EncodingError>::from_format_hint","value":"pub fn from_format_hint(ImageFormatHint) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `EncodingError` for an image format.","sig":null,"attributes":[{"value":"/ Create an `EncodingError` for an image format.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":21930,"byte_end":21980,"line_start":257,"line_end":257,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":21985,"byte_end":21988,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ The error will not contain any further information but is very easy to create.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":21993,"byte_end":22075,"line_start":259,"line_end":259,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":22301,"byte_end":22312,"line_start":268,"line_end":268,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<EncodingError>::format_hint","value":"pub fn format_hint(&Self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Return the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Return the image format associated with this error.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":22234,"byte_end":22289,"line_start":267,"line_end":267,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":22484,"byte_end":22493,"line_start":275,"line_end":275,"column_start":12,"column_end":21},"name":"from_kind","qualname":"<ParameterError>::from_kind","value":"pub fn from_kind(ParameterErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a `ParameterError` directly from a corresponding kind.\n","sig":null,"attributes":[{"value":"/ Construct a `ParameterError` directly from a corresponding kind.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":22404,"byte_end":22472,"line_start":274,"line_end":274,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":22700,"byte_end":22704,"line_start":283,"line_end":283,"column_start":12,"column_end":16},"name":"kind","qualname":"<ParameterError>::kind","value":"pub fn kind(&Self) -> ParameterErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `ParameterErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `ParameterErrorKind` of the error.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":22624,"byte_end":22688,"line_start":282,"line_end":282,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":22877,"byte_end":22886,"line_start":290,"line_end":290,"column_start":12,"column_end":21},"name":"from_kind","qualname":"<LimitError>::from_kind","value":"pub fn from_kind(LimitErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a generic `LimitError` directly from a corresponding kind.\n","sig":null,"attributes":[{"value":"/ Construct a generic `LimitError` directly from a corresponding kind.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":22793,"byte_end":22865,"line_start":289,"line_end":289,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":23051,"byte_end":23055,"line_start":297,"line_end":297,"column_start":12,"column_end":16},"name":"kind","qualname":"<LimitError>::kind","value":"pub fn kind(&Self) -> LimitErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `LimitErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `LimitErrorKind` of the error.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":22979,"byte_end":23039,"line_start":296,"line_end":296,"column_start":5,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":23934,"byte_end":23945,"line_start":333,"line_end":333,"column_start":10,"column_end":21},"name":"ImageResult","qualname":"::error::ImageResult","value":"Result<T, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Result of an image decoding/encoding process\n","sig":null,"attributes":[{"value":"/ Result of an image decoding/encoding process","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":23876,"byte_end":23924,"line_start":332,"line_end":332,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":215},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":5234,"byte_end":5240,"line_start":151,"line_end":151,"column_start":9,"column_end":15},"name":"buffer","qualname":"::buffer","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","parent":null,"children":[{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":220},{"krate":0,"index":223},{"krate":0,"index":226},{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":235},{"krate":0,"index":238},{"krate":0,"index":241}],"decl_id":null,"docs":" Iterators and other auxiliary structure for the `ImageBuffer` type.\n","sig":null,"attributes":[{"value":"/ Iterators and other auxiliary structure for the `ImageBuffer` type.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":5154,"byte_end":5225,"line_start":150,"line_end":150,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":244},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"math","qualname":"::math","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\mod.rs","parent":null,"children":[{"krate":0,"index":245},{"krate":0,"index":259},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":267}],"decl_id":null,"docs":" Mathematical helper functions and types.\n","sig":null,"attributes":[{"value":"/ Mathematical helper functions and types.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\mod.rs","byte_start":30578,"byte_end":30622,"line_start":1,"line_end":1,"column_start":1,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":245},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"nq","qualname":"::math::nq","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","parent":null,"children":[{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":255},{"krate":0,"index":257}],"decl_id":null,"docs":" NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\n See \"Kohonen neural networks for optimal colour quantization\"\n in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.\n for a discussion of the algorithm.\n See also <https://scientificgems.wordpress.com/stuff/neuquant-fast-high-quality-image-quantization/>\n","sig":null,"attributes":[{"value":"/ NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":30735,"byte_end":30806,"line_start":1,"line_end":1,"column_start":1,"column_end":72}},{"value":"/ See \"Kohonen neural networks for optimal colour quantization\"","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":30807,"byte_end":30872,"line_start":2,"line_end":2,"column_start":1,"column_end":66}},{"value":"/ in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":30873,"byte_end":30946,"line_start":3,"line_end":3,"column_start":1,"column_end":74}},{"value":"/ for a discussion of the algorithm.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":30947,"byte_end":30985,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/ See also <https://scientificgems.wordpress.com/stuff/neuquant-fast-high-quality-image-quantization/>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":30986,"byte_end":31090,"line_start":5,"line_end":5,"column_start":1,"column_end":105}}]},{"kind":"Struct","id":{"krate":0,"index":246},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":34033,"byte_end":34041,"line_start":73,"line_end":73,"column_start":12,"column_end":20},"name":"NeuQuant","qualname":"::math::nq::NeuQuant","value":"NeuQuant {  }","parent":null,"children":[{"krate":0,"index":247}],"decl_id":null,"docs":" Neural network color quantizer","sig":null,"attributes":[{"value":"/ Neural network color quantizer","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":32276,"byte_end":32310,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":32311,"byte_end":32314,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":32315,"byte_end":32329,"line_start":35,"line_end":35,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":32330,"byte_end":32337,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ use image::imageops::colorops::{index_colors, ColorMap};","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":32338,"byte_end":32398,"line_start":37,"line_end":37,"column_start":1,"column_end":61}},{"value":"/ use image::math::nq::NeuQuant;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":32399,"byte_end":32433,"line_start":38,"line_end":38,"column_start":1,"column_end":35}},{"value":"/ use image::{ImageBuffer, Rgba, RgbaImage};","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":32434,"byte_end":32480,"line_start":39,"line_end":39,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":32481,"byte_end":32484,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ // Create simple color image with RGBA pixels.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":32485,"byte_end":32535,"line_start":41,"line_end":41,"column_start":1,"column_end":51}},{"value":"/ let (w, h) = (2, 2);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":32536,"byte_end":32560,"line_start":42,"line_end":42,"column_start":1,"column_end":25}},{"value":"/ let red: Rgba<u8> = [255, 0, 0, 255].into();","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":32561,"byte_end":32609,"line_start":43,"line_end":43,"column_start":1,"column_end":49}},{"value":"/ let green: Rgba<u8> = [0, 255, 0, 255].into();","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":32610,"byte_end":32660,"line_start":44,"line_end":44,"column_start":1,"column_end":51}},{"value":"/ let blue: Rgba<u8> = [0, 0, 255, 255].into();","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":32661,"byte_end":32710,"line_start":45,"line_end":45,"column_start":1,"column_end":50}},{"value":"/ let white: Rgba<u8> = [255, 255, 255, 255].into();","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":32711,"byte_end":32765,"line_start":46,"line_end":46,"column_start":1,"column_end":55}},{"value":"/ let mut color_image = RgbaImage::new(w, h);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":32766,"byte_end":32813,"line_start":47,"line_end":47,"column_start":1,"column_end":48}},{"value":"/ color_image.put_pixel(0, 0, red);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":32814,"byte_end":32851,"line_start":48,"line_end":48,"column_start":1,"column_end":38}},{"value":"/ color_image.put_pixel(1, 0, green);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":32852,"byte_end":32891,"line_start":49,"line_end":49,"column_start":1,"column_end":40}},{"value":"/ color_image.put_pixel(0, 1, blue);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":32892,"byte_end":32930,"line_start":50,"line_end":50,"column_start":1,"column_end":39}},{"value":"/ color_image.put_pixel(1, 1, white);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":32931,"byte_end":32970,"line_start":51,"line_end":51,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":32971,"byte_end":32974,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ // Create a `NeuQuant` colormap that will build an approximate color palette that best matches","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":32975,"byte_end":33073,"line_start":53,"line_end":53,"column_start":1,"column_end":99}},{"value":"/ // the original image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":33074,"byte_end":33100,"line_start":54,"line_end":54,"column_start":1,"column_end":27}},{"value":"/ // Note, the NeuQuant algorithm is only designed to work with 6-8 bit output, so `colors`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":33101,"byte_end":33194,"line_start":55,"line_end":55,"column_start":1,"column_end":94}},{"value":"/ // should be a power of 2 in the range [64, 256].","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":33195,"byte_end":33248,"line_start":56,"line_end":56,"column_start":1,"column_end":54}},{"value":"/ let pixels = color_image.clone().into_raw();","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":33249,"byte_end":33297,"line_start":57,"line_end":57,"column_start":1,"column_end":49}},{"value":"/ let cmap = NeuQuant::new(1, 256, &pixels);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":33298,"byte_end":33344,"line_start":58,"line_end":58,"column_start":1,"column_end":47}},{"value":"/ // Map the original image through the color map to create an indexed image stored in a","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":33345,"byte_end":33435,"line_start":59,"line_end":59,"column_start":1,"column_end":91}},{"value":"/ // `GrayImage`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":33436,"byte_end":33455,"line_start":60,"line_end":60,"column_start":1,"column_end":20}},{"value":"/ let palletized = index_colors(&color_image, &cmap);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":33456,"byte_end":33511,"line_start":61,"line_end":61,"column_start":1,"column_end":56}},{"value":"/ // Map indexed image back `RgbaImage`.  Note the NeuQuant algorithm creates an approximation of","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":33512,"byte_end":33611,"line_start":62,"line_end":62,"column_start":1,"column_end":100}},{"value":"/ // the original colors, so even in this simple example the output is not pixel equivalent to","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":33612,"byte_end":33708,"line_start":63,"line_end":63,"column_start":1,"column_end":97}},{"value":"/ // the original.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":33709,"byte_end":33729,"line_start":64,"line_end":64,"column_start":1,"column_end":21}},{"value":"/ let mapped = ImageBuffer::from_fn(w, h, |x, y| -> Rgba<u8> {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":33730,"byte_end":33794,"line_start":65,"line_end":65,"column_start":1,"column_end":65}},{"value":"/     let p = palletized.get_pixel(x, y);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":33795,"byte_end":33838,"line_start":66,"line_end":66,"column_start":1,"column_end":44}},{"value":"/     cmap.lookup(p.0[0] as usize)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":33839,"byte_end":33875,"line_start":67,"line_end":67,"column_start":1,"column_end":37}},{"value":"/         .expect(\"indexed color out-of-range\")","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":33876,"byte_end":33925,"line_start":68,"line_end":68,"column_start":1,"column_end":50}},{"value":"/         .into()","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":33926,"byte_end":33945,"line_start":69,"line_end":69,"column_start":1,"column_end":20}},{"value":"/ });","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":33946,"byte_end":33953,"line_start":70,"line_end":70,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":33954,"byte_end":33961,"line_start":71,"line_end":71,"column_start":1,"column_end":8}},{"value":"deprecated(note = \"Use the `color_quant` crate instead\")","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":33962,"byte_end":34021,"line_start":72,"line_end":72,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":34560,"byte_end":34563,"line_start":87,"line_end":87,"column_start":12,"column_end":15},"name":"new","qualname":"<NeuQuant>::new","value":"pub fn new(i32, usize, &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":34706,"byte_end":34710,"line_start":90,"line_end":90,"column_start":12,"column_end":16},"name":"init","qualname":"<NeuQuant>::init","value":"pub fn init(&mut Self, &[u8])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":34788,"byte_end":34797,"line_start":93,"line_end":93,"column_start":12,"column_end":21},"name":"map_pixel","qualname":"<NeuQuant>::map_pixel","value":"pub fn map_pixel(&Self, &mut [u8])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":34878,"byte_end":34886,"line_start":96,"line_end":96,"column_start":12,"column_end":20},"name":"index_of","qualname":"<NeuQuant>::index_of","value":"pub fn index_of(&Self, &[u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":34971,"byte_end":34977,"line_start":99,"line_end":99,"column_start":12,"column_end":18},"name":"lookup","qualname":"<NeuQuant>::lookup","value":"pub fn lookup(&Self, usize) -> Option<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":259},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\utils.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utils","qualname":"::math::utils","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\utils.rs","parent":null,"children":[{"krate":0,"index":260},{"krate":0,"index":262}],"decl_id":null,"docs":" Shared mathematical utility functions.\n","sig":null,"attributes":[{"value":"/ Shared mathematical utility functions.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\utils.rs","byte_start":35350,"byte_end":35392,"line_start":1,"line_end":1,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":260},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\utils.rs","byte_start":35651,"byte_end":35656,"line_start":14,"line_end":14,"column_start":8,"column_end":13},"name":"clamp","qualname":"::math::utils::clamp","value":"pub fn clamp<N>(N, N, N) -> N where N: PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Cut value to be inside given range","sig":null,"attributes":[{"value":"/ Cut value to be inside given range","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\utils.rs","byte_start":35394,"byte_end":35432,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\utils.rs","byte_start":35433,"byte_end":35436,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\utils.rs","byte_start":35437,"byte_end":35444,"line_start":5,"line_end":5,"column_start":1,"column_end":8}},{"value":"/ use image::math::utils;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\utils.rs","byte_start":35445,"byte_end":35472,"line_start":6,"line_end":6,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\utils.rs","byte_start":35473,"byte_end":35476,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(utils::clamp(-5, 0, 10),  0);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\utils.rs","byte_start":35477,"byte_end":35521,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(utils::clamp( 6, 0, 10),  6);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\utils.rs","byte_start":35522,"byte_end":35566,"line_start":9,"line_end":9,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(utils::clamp(15, 0, 10), 10);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\utils.rs","byte_start":35567,"byte_end":35611,"line_start":10,"line_end":10,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\utils.rs","byte_start":35612,"byte_end":35619,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\utils.rs","byte_start":35620,"byte_end":35629,"line_start":12,"line_end":12,"column_start":1,"column_end":10}},{"value":"deprecated","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\utils.rs","byte_start":35630,"byte_end":35643,"line_start":13,"line_end":13,"column_start":1,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2517},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\rect.rs","byte_start":39154,"byte_end":39158,"line_start":3,"line_end":3,"column_start":12,"column_end":16},"name":"Rect","qualname":"::math::rect::Rect","value":"Rect { x, y, width, height }","parent":null,"children":[{"krate":0,"index":2518},{"krate":0,"index":2519},{"krate":0,"index":2520},{"krate":0,"index":2521}],"decl_id":null,"docs":" A Rectangle defined by its top left corner, width and height.\n","sig":null,"attributes":[{"value":"/ A Rectangle defined by its top left corner, width and height.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\rect.rs","byte_start":39026,"byte_end":39091,"line_start":1,"line_end":1,"column_start":1,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":2518},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\rect.rs","byte_start":39218,"byte_end":39219,"line_start":5,"line_end":5,"column_start":9,"column_end":10},"name":"x","qualname":"::math::rect::Rect::x","value":"u32","parent":{"krate":0,"index":2517},"children":[],"decl_id":null,"docs":" The x coordinate of the top left corner.\n","sig":null,"attributes":[{"value":"/ The x coordinate of the top left corner.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\rect.rs","byte_start":39165,"byte_end":39209,"line_start":4,"line_end":4,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":2519},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\rect.rs","byte_start":39283,"byte_end":39284,"line_start":7,"line_end":7,"column_start":9,"column_end":10},"name":"y","qualname":"::math::rect::Rect::y","value":"u32","parent":{"krate":0,"index":2517},"children":[],"decl_id":null,"docs":" The y coordinate of the top left corner.\n","sig":null,"attributes":[{"value":"/ The y coordinate of the top left corner.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\rect.rs","byte_start":39230,"byte_end":39274,"line_start":6,"line_end":6,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":2520},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\rect.rs","byte_start":39330,"byte_end":39335,"line_start":9,"line_end":9,"column_start":9,"column_end":14},"name":"width","qualname":"::math::rect::Rect::width","value":"u32","parent":{"krate":0,"index":2517},"children":[],"decl_id":null,"docs":" The rectangle's width.\n","sig":null,"attributes":[{"value":"/ The rectangle's width.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\rect.rs","byte_start":39295,"byte_end":39321,"line_start":8,"line_end":8,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":2521},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\rect.rs","byte_start":39382,"byte_end":39388,"line_start":11,"line_end":11,"column_start":9,"column_end":15},"name":"height","qualname":"::math::rect::Rect::height","value":"u32","parent":{"krate":0,"index":2517},"children":[],"decl_id":null,"docs":" The rectangle's height.\n","sig":null,"attributes":[{"value":"/ The rectangle's height.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\rect.rs","byte_start":39346,"byte_end":39373,"line_start":10,"line_end":10,"column_start":5,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":270},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"imageops","qualname":"::imageops","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","parent":null,"children":[{"krate":0,"index":271},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":282},{"krate":0,"index":285},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":292},{"krate":0,"index":295},{"krate":0,"index":298},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":321},{"krate":0,"index":324},{"krate":0,"index":327},{"krate":0,"index":330},{"krate":0,"index":333},{"krate":0,"index":336},{"krate":0,"index":339},{"krate":0,"index":342},{"krate":0,"index":345},{"krate":0,"index":348},{"krate":0,"index":351},{"krate":0,"index":354},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":361},{"krate":0,"index":364},{"krate":0,"index":367},{"krate":0,"index":370},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":377},{"krate":0,"index":380},{"krate":0,"index":383},{"krate":0,"index":386},{"krate":0,"index":389},{"krate":0,"index":392},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":398},{"krate":0,"index":401},{"krate":0,"index":456},{"krate":0,"index":570},{"krate":0,"index":682},{"krate":0,"index":684},{"krate":0,"index":686},{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":692},{"krate":0,"index":695},{"krate":0,"index":700},{"krate":0,"index":705}],"decl_id":null,"docs":" Image Processing Functions\n","sig":null,"attributes":[{"value":"/ Image Processing Functions","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":39398,"byte_end":39428,"line_start":1,"line_end":1,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":425},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\affine.rs","byte_start":51797,"byte_end":51805,"line_start":9,"line_end":9,"column_start":8,"column_end":16},"name":"rotate90","qualname":"::imageops::affine::rotate90","value":"pub fn rotate90<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 90 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 90 degrees clockwise.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\affine.rs","byte_start":51748,"byte_end":51789,"line_start":8,"line_end":8,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":427},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\affine.rs","byte_start":52137,"byte_end":52146,"line_start":21,"line_end":21,"column_start":8,"column_end":17},"name":"rotate180","qualname":"::imageops::affine::rotate180","value":"pub fn rotate180<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\affine.rs","byte_start":52087,"byte_end":52129,"line_start":20,"line_end":20,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":429},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\affine.rs","byte_start":52479,"byte_end":52488,"line_start":33,"line_end":33,"column_start":8,"column_end":17},"name":"rotate270","qualname":"::imageops::affine::rotate270","value":"pub fn rotate270<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 270 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 270 degrees clockwise.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\affine.rs","byte_start":52429,"byte_end":52471,"line_start":32,"line_end":32,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":431},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\affine.rs","byte_start":52876,"byte_end":52887,"line_start":45,"line_end":45,"column_start":8,"column_end":19},"name":"rotate90_in","qualname":"::imageops::affine::rotate90_in","value":"pub fn rotate90_in<I, Container>(&I, &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 90 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 90 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\affine.rs","byte_start":52771,"byte_end":52868,"line_start":44,"line_end":44,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":434},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\affine.rs","byte_start":53661,"byte_end":53673,"line_start":70,"line_end":70,"column_start":8,"column_end":20},"name":"rotate180_in","qualname":"::imageops::affine::rotate180_in","value":"pub fn rotate180_in<I, Container>(&I, &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\affine.rs","byte_start":53555,"byte_end":53653,"line_start":69,"line_end":69,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":437},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\affine.rs","byte_start":54456,"byte_end":54468,"line_start":95,"line_end":95,"column_start":8,"column_end":20},"name":"rotate270_in","qualname":"::imageops::affine::rotate270_in","value":"pub fn rotate270_in<I, Container>(&I, &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 270 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 270 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\affine.rs","byte_start":54350,"byte_end":54448,"line_start":94,"line_end":94,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":440},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\affine.rs","byte_start":55174,"byte_end":55189,"line_start":120,"line_end":120,"column_start":8,"column_end":23},"name":"flip_horizontal","qualname":"::imageops::affine::flip_horizontal","value":"pub fn flip_horizontal<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\affine.rs","byte_start":55136,"byte_end":55166,"line_start":119,"line_end":119,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":442},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\affine.rs","byte_start":55514,"byte_end":55527,"line_start":132,"line_end":132,"column_start":8,"column_end":21},"name":"flip_vertical","qualname":"::imageops::affine::flip_vertical","value":"pub fn flip_vertical<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically\n","sig":null,"attributes":[{"value":"/ Flip an image vertically","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\affine.rs","byte_start":55478,"byte_end":55506,"line_start":131,"line_end":131,"column_start":1,"column_end":29}}]},{"kind":"Function","id":{"krate":0,"index":444},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\affine.rs","byte_start":55909,"byte_end":55927,"line_start":144,"line_end":144,"column_start":8,"column_end":26},"name":"flip_horizontal_in","qualname":"::imageops::affine::flip_horizontal_in","value":"pub fn flip_horizontal_in<I,\n                          Container>(&I,\n                                     &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally and put the result into the destination [`ImageBuffer`].","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\affine.rs","byte_start":55814,"byte_end":55901,"line_start":143,"line_end":143,"column_start":1,"column_end":88}}]},{"kind":"Function","id":{"krate":0,"index":447},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\affine.rs","byte_start":56688,"byte_end":56704,"line_start":169,"line_end":169,"column_start":8,"column_end":24},"name":"flip_vertical_in","qualname":"::imageops::affine::flip_vertical_in","value":"pub fn flip_vertical_in<I,\n                        Container>(&I, &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Flip an image vertically and put the result into the destination [`ImageBuffer`].","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\affine.rs","byte_start":56595,"byte_end":56680,"line_start":168,"line_end":168,"column_start":1,"column_end":86}}]},{"kind":"Function","id":{"krate":0,"index":450},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\affine.rs","byte_start":57431,"byte_end":57449,"line_start":194,"line_end":194,"column_start":8,"column_end":26},"name":"rotate180_in_place","qualname":"::imageops::affine::rotate180_in_place","value":"pub fn rotate180_in_place<I: GenericImage>(&mut I)","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise in place.\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise in place.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\affine.rs","byte_start":57372,"byte_end":57423,"line_start":193,"line_end":193,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":452},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\affine.rs","byte_start":58229,"byte_end":58253,"line_start":225,"line_end":225,"column_start":8,"column_end":32},"name":"flip_horizontal_in_place","qualname":"::imageops::affine::flip_horizontal_in_place","value":"pub fn flip_horizontal_in_place<I: GenericImage>(&mut I)","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally in place.\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally in place.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\affine.rs","byte_start":58181,"byte_end":58221,"line_start":224,"line_end":224,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":454},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\affine.rs","byte_start":58659,"byte_end":58681,"line_start":240,"line_end":240,"column_start":8,"column_end":30},"name":"flip_vertical_in_place","qualname":"::imageops::affine::flip_vertical_in_place","value":"pub fn flip_vertical_in_place<I: GenericImage>(&mut I)","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically in place.\n","sig":null,"attributes":[{"value":"/ Flip an image vertically in place.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\affine.rs","byte_start":58613,"byte_end":58651,"line_start":239,"line_end":239,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":456},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"colorops","qualname":"::imageops::colorops","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","parent":null,"children":[{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":461},{"krate":0,"index":464},{"krate":0,"index":467},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":481},{"krate":0,"index":484},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":491},{"krate":0,"index":494},{"krate":0,"index":497},{"krate":0,"index":500},{"krate":0,"index":502},{"krate":0,"index":504},{"krate":0,"index":506},{"krate":0,"index":511},{"krate":0,"index":514},{"krate":0,"index":520},{"krate":0,"index":524},{"krate":0,"index":529},{"krate":0,"index":532},{"krate":0,"index":2537},{"krate":0,"index":2539},{"krate":0,"index":2541},{"krate":0,"index":538},{"krate":0,"index":544},{"krate":0,"index":551},{"krate":0,"index":558},{"krate":0,"index":562},{"krate":0,"index":567}],"decl_id":null,"docs":" Functions for altering and converting the color of pixelbufs\n","sig":null,"attributes":[{"value":"/ Functions for altering and converting the color of pixelbufs","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":63634,"byte_end":63698,"line_start":1,"line_end":1,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":502},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":64107,"byte_end":64116,"line_start":17,"line_end":17,"column_start":8,"column_end":17},"name":"grayscale","qualname":"::imageops::colorops::grayscale","value":"pub fn grayscale<I: GenericImageView>(&I)\n-> ImageBuffer<Luma<Subpixel<I>>, Vec<Subpixel<I>>> where\nSubpixel<I>: 'static, <Subpixel<I> as Num>::FromStrRadixErr: 'static","parent":null,"children":[],"decl_id":null,"docs":" Convert the supplied image to grayscale\n","sig":null,"attributes":[{"value":"/ Convert the supplied image to grayscale","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":64056,"byte_end":64099,"line_start":16,"line_end":16,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":504},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":64648,"byte_end":64654,"line_start":37,"line_end":37,"column_start":8,"column_end":14},"name":"invert","qualname":"::imageops::colorops::invert","value":"pub fn invert<I: GenericImage>(&mut I)","parent":null,"children":[],"decl_id":null,"docs":" Invert each pixel within the supplied image.\n This function operates in place.\n","sig":null,"attributes":[{"value":"/ Invert each pixel within the supplied image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":64555,"byte_end":64603,"line_start":35,"line_end":35,"column_start":1,"column_end":49}},{"value":"/ This function operates in place.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":64604,"byte_end":64640,"line_start":36,"line_end":36,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":506},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":65178,"byte_end":65186,"line_start":55,"line_end":55,"column_start":8,"column_end":16},"name":"contrast","qualname":"::imageops::colorops::contrast","value":"pub fn contrast<I, P, S>(&I, f32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of the supplied image.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.","sig":null,"attributes":[{"value":"/ Adjust the contrast of the supplied image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":64918,"byte_end":64964,"line_start":50,"line_end":50,"column_start":1,"column_end":47}},{"value":"/ ```contrast``` is the amount to adjust the contrast by.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":64965,"byte_end":65024,"line_start":51,"line_end":51,"column_start":1,"column_end":60}},{"value":"/ Negative values decrease the contrast and positive values increase the contrast.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":65025,"byte_end":65109,"line_start":52,"line_end":52,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":65110,"byte_end":65113,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ *[See also `contrast_in_place`.][contrast_in_place]*","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":65114,"byte_end":65170,"line_start":54,"line_end":54,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":511},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":66238,"byte_end":66255,"line_start":92,"line_end":92,"column_start":8,"column_end":25},"name":"contrast_in_place","qualname":"::imageops::colorops::contrast_in_place","value":"pub fn contrast_in_place<I>(&mut I, f32) where I: GenericImage","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of the supplied image in place.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.","sig":null,"attributes":[{"value":"/ Adjust the contrast of the supplied image in place.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":65987,"byte_end":66042,"line_start":87,"line_end":87,"column_start":1,"column_end":56}},{"value":"/ ```contrast``` is the amount to adjust the contrast by.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":66043,"byte_end":66102,"line_start":88,"line_end":88,"column_start":1,"column_end":60}},{"value":"/ Negative values decrease the contrast and positive values increase the contrast.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":66103,"byte_end":66187,"line_start":89,"line_end":89,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":66188,"byte_end":66191,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ *[See also `contrast`.][contrast]*","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":66192,"byte_end":66230,"line_start":91,"line_end":91,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":514},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":67165,"byte_end":67173,"line_start":124,"line_end":124,"column_start":8,"column_end":16},"name":"brighten","qualname":"::imageops::colorops::brighten","value":"pub fn brighten<I, P, S>(&I, i32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Brighten the supplied image.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.","sig":null,"attributes":[{"value":"/ Brighten the supplied image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":66930,"byte_end":66962,"line_start":119,"line_end":119,"column_start":1,"column_end":33}},{"value":"/ ```value``` is the amount to brighten each pixel by.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":66963,"byte_end":67019,"line_start":120,"line_end":120,"column_start":1,"column_end":57}},{"value":"/ Negative values decrease the brightness and positive values increase it.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":67020,"byte_end":67096,"line_start":121,"line_end":121,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":67097,"byte_end":67100,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ *[See also `brighten_in_place`.][brighten_in_place]*","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":67101,"byte_end":67157,"line_start":123,"line_end":123,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":520},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":68169,"byte_end":68186,"line_start":160,"line_end":160,"column_start":8,"column_end":25},"name":"brighten_in_place","qualname":"::imageops::colorops::brighten_in_place","value":"pub fn brighten_in_place<I>(&mut I, i32) where I: GenericImage","parent":null,"children":[],"decl_id":null,"docs":" Brighten the supplied image in place.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.","sig":null,"attributes":[{"value":"/ Brighten the supplied image in place.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":67943,"byte_end":67984,"line_start":155,"line_end":155,"column_start":1,"column_end":42}},{"value":"/ ```value``` is the amount to brighten each pixel by.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":67985,"byte_end":68041,"line_start":156,"line_end":156,"column_start":1,"column_end":57}},{"value":"/ Negative values decrease the brightness and positive values increase it.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":68042,"byte_end":68118,"line_start":157,"line_end":157,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":68119,"byte_end":68122,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ *[See also `brighten`.][brighten]*","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":68123,"byte_end":68161,"line_start":159,"line_end":159,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":524},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":69109,"byte_end":69118,"line_start":192,"line_end":192,"column_start":8,"column_end":17},"name":"huerotate","qualname":"::imageops::colorops::huerotate","value":"pub fn huerotate<I, P, S>(&I, i32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)","sig":null,"attributes":[{"value":"/ Hue rotate the supplied image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":68830,"byte_end":68864,"line_start":186,"line_end":186,"column_start":1,"column_end":35}},{"value":"/ `value` is the degrees to rotate each pixel by.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":68865,"byte_end":68916,"line_start":187,"line_end":187,"column_start":1,"column_end":52}},{"value":"/ 0 and 360 do nothing, the rest rotates by the given degree value.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":68917,"byte_end":68986,"line_start":188,"line_end":188,"column_start":1,"column_end":70}},{"value":"/ just like the css webkit filter hue-rotate(180)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":68987,"byte_end":69038,"line_start":189,"line_end":189,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":69039,"byte_end":69042,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ *[See also `huerotate_in_place`.][huerotate_in_place]*","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":69043,"byte_end":69101,"line_start":191,"line_end":191,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":529},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":71276,"byte_end":71294,"line_start":254,"line_end":254,"column_start":8,"column_end":26},"name":"huerotate_in_place","qualname":"::imageops::colorops::huerotate_in_place","value":"pub fn huerotate_in_place<I>(&mut I, i32) where I: GenericImage","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image in place.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)","sig":null,"attributes":[{"value":"/ Hue rotate the supplied image in place.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":71006,"byte_end":71049,"line_start":248,"line_end":248,"column_start":1,"column_end":44}},{"value":"/ `value` is the degrees to rotate each pixel by.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":71050,"byte_end":71101,"line_start":249,"line_end":249,"column_start":1,"column_end":52}},{"value":"/ 0 and 360 do nothing, the rest rotates by the given degree value.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":71102,"byte_end":71171,"line_start":250,"line_end":250,"column_start":1,"column_end":70}},{"value":"/ just like the css webkit filter hue-rotate(180)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":71172,"byte_end":71223,"line_start":251,"line_end":251,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":71224,"byte_end":71227,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ *[See also `huerotate`.][huerotate]*","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":71228,"byte_end":71268,"line_start":253,"line_end":253,"column_start":1,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":532},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":73160,"byte_end":73168,"line_start":310,"line_end":310,"column_start":11,"column_end":19},"name":"ColorMap","qualname":"::imageops::colorops::ColorMap","value":"ColorMap","parent":null,"children":[{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537}],"decl_id":null,"docs":" A color map\n","sig":null,"attributes":[{"value":"/ A color map","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":73134,"byte_end":73149,"line_start":309,"line_end":309,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":533},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":73232,"byte_end":73237,"line_start":312,"line_end":312,"column_start":10,"column_end":15},"name":"Color","qualname":"::imageops::colorops::ColorMap::Color","value":"type Color;","parent":{"krate":0,"index":532},"children":[],"decl_id":null,"docs":" The color type on which the map operates on\n","sig":null,"attributes":[{"value":"/ The color type on which the map operates on","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":73175,"byte_end":73222,"line_start":311,"line_end":311,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":73330,"byte_end":73338,"line_start":315,"line_end":315,"column_start":8,"column_end":16},"name":"index_of","qualname":"::imageops::colorops::ColorMap::index_of","value":"pub fn index_of(&Self, &Self::Color) -> usize","parent":{"krate":0,"index":532},"children":[],"decl_id":null,"docs":" Returns the index of the closest match of `color`\n in the color map.\n","sig":null,"attributes":[{"value":"/ Returns the index of the closest match of `color`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":73243,"byte_end":73296,"line_start":313,"line_end":313,"column_start":5,"column_end":58}},{"value":"/ in the color map.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":73301,"byte_end":73322,"line_start":314,"line_end":314,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":73546,"byte_end":73552,"line_start":318,"line_end":318,"column_start":8,"column_end":14},"name":"lookup","qualname":"::imageops::colorops::ColorMap::lookup","value":"pub fn lookup(&Self, usize) -> Option<Self::Color>","parent":{"krate":0,"index":532},"children":[],"decl_id":null,"docs":" Looks up color by index in the color map.  If `idx` is out of range for the color map, or\n ColorMap doesn't implement `lookup` `None` is returned.\n","sig":null,"attributes":[{"value":"/ Looks up color by index in the color map.  If `idx` is out of range for the color map, or","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":73381,"byte_end":73474,"line_start":316,"line_end":316,"column_start":5,"column_end":98}},{"value":"/ ColorMap doesn't implement `lookup` `None` is returned.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":73479,"byte_end":73538,"line_start":317,"line_end":317,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":73733,"byte_end":73743,"line_start":323,"line_end":323,"column_start":8,"column_end":18},"name":"has_lookup","qualname":"::imageops::colorops::ColorMap::has_lookup","value":"pub fn has_lookup(&Self) -> bool","parent":{"krate":0,"index":532},"children":[],"decl_id":null,"docs":" Determine if this implementation of ColorMap overrides the default `lookup`.\n","sig":null,"attributes":[{"value":"/ Determine if this implementation of ColorMap overrides the default `lookup`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":73645,"byte_end":73725,"line_start":322,"line_end":322,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":73848,"byte_end":73857,"line_start":327,"line_end":327,"column_start":8,"column_end":17},"name":"map_color","qualname":"::imageops::colorops::ColorMap::map_color","value":"pub fn map_color(&Self, &mut Self::Color)","parent":{"krate":0,"index":532},"children":[],"decl_id":null,"docs":" Maps `color` to the closest color in the color map.\n","sig":null,"attributes":[{"value":"/ Maps `color` to the closest color in the color map.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":73785,"byte_end":73840,"line_start":326,"line_end":326,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":2537},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":75002,"byte_end":75009,"line_start":360,"line_end":360,"column_start":12,"column_end":19},"name":"BiLevel","qualname":"::imageops::colorops::BiLevel","value":"","parent":null,"children":[],"decl_id":null,"docs":" A bi-level color map","sig":null,"attributes":[{"value":"/ A bi-level color map","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":73894,"byte_end":73918,"line_start":330,"line_end":330,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":73919,"byte_end":73922,"line_start":331,"line_end":331,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":73923,"byte_end":73937,"line_start":332,"line_end":332,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":73938,"byte_end":73945,"line_start":333,"line_end":333,"column_start":1,"column_end":8}},{"value":"/ use image::imageops::colorops::{index_colors, BiLevel, ColorMap};","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":73946,"byte_end":74015,"line_start":334,"line_end":334,"column_start":1,"column_end":70}},{"value":"/ use image::{ImageBuffer, Luma};","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":74016,"byte_end":74051,"line_start":335,"line_end":335,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":74052,"byte_end":74055,"line_start":336,"line_end":336,"column_start":1,"column_end":4}},{"value":"/ let (w, h) = (16, 16);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":74056,"byte_end":74082,"line_start":337,"line_end":337,"column_start":1,"column_end":27}},{"value":"/ // Create an image with a smooth horizontal gradient from black (0) to white (255).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":74083,"byte_end":74170,"line_start":338,"line_end":338,"column_start":1,"column_end":88}},{"value":"/ let gray = ImageBuffer::from_fn(w, h, |x, y| -> Luma<u8> { [(255 * x / w) as u8].into() });","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":74171,"byte_end":74266,"line_start":339,"line_end":339,"column_start":1,"column_end":96}},{"value":"/ // Mapping the gray image through the `BiLevel` filter should map gray pixels less than half","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":74267,"byte_end":74363,"line_start":340,"line_end":340,"column_start":1,"column_end":97}},{"value":"/ // intensity (127) to black (0), and anything greater to white (255).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":74364,"byte_end":74437,"line_start":341,"line_end":341,"column_start":1,"column_end":74}},{"value":"/ let cmap = BiLevel;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":74438,"byte_end":74461,"line_start":342,"line_end":342,"column_start":1,"column_end":24}},{"value":"/ let palletized = index_colors(&gray, &cmap);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":74462,"byte_end":74510,"line_start":343,"line_end":343,"column_start":1,"column_end":49}},{"value":"/ let mapped = ImageBuffer::from_fn(w, h, |x, y| {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":74511,"byte_end":74563,"line_start":344,"line_end":344,"column_start":1,"column_end":53}},{"value":"/     let p = palletized.get_pixel(x, y);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":74564,"byte_end":74607,"line_start":345,"line_end":345,"column_start":1,"column_end":44}},{"value":"/     cmap.lookup(p.0[0] as usize)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":74608,"byte_end":74644,"line_start":346,"line_end":346,"column_start":1,"column_end":37}},{"value":"/         .expect(\"indexed color out-of-range\")","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":74645,"byte_end":74694,"line_start":347,"line_end":347,"column_start":1,"column_end":50}},{"value":"/ });","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":74695,"byte_end":74702,"line_start":348,"line_end":348,"column_start":1,"column_end":8}},{"value":"/ // Create an black and white image of expected output.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":74703,"byte_end":74761,"line_start":349,"line_end":349,"column_start":1,"column_end":59}},{"value":"/ let bw = ImageBuffer::from_fn(w, h, |x, y| -> Luma<u8> {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":74762,"byte_end":74822,"line_start":350,"line_end":350,"column_start":1,"column_end":61}},{"value":"/     if x <= (w / 2) {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":74823,"byte_end":74848,"line_start":351,"line_end":351,"column_start":1,"column_end":26}},{"value":"/         [0].into()","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":74849,"byte_end":74871,"line_start":352,"line_end":352,"column_start":1,"column_end":23}},{"value":"/     } else {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":74872,"byte_end":74888,"line_start":353,"line_end":353,"column_start":1,"column_end":17}},{"value":"/         [255].into()","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":74889,"byte_end":74913,"line_start":354,"line_end":354,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":74914,"byte_end":74923,"line_start":355,"line_end":355,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":74924,"byte_end":74931,"line_start":356,"line_end":356,"column_start":1,"column_end":8}},{"value":"/ assert_eq!(mapped, bw);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":74932,"byte_end":74959,"line_start":357,"line_end":357,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":74960,"byte_end":74967,"line_start":358,"line_end":358,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":562},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":77982,"byte_end":77988,"line_start":475,"line_end":475,"column_start":8,"column_end":14},"name":"dither","qualname":"::imageops::colorops::dither","value":"pub fn dither<Pix, Map: ?Sized>(&mut ImageBuffer<Pix, Vec<u8>>, &Map) where\nMap: ColorMap<Color = Pix>, Pix: Pixel<Subpixel = u8> + 'static","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors of the image using the supplied `color_map` while applying\n Floyd-Steinberg dithering to improve the visual conception\n","sig":null,"attributes":[{"value":"/ Reduces the colors of the image using the supplied `color_map` while applying","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":77830,"byte_end":77911,"line_start":473,"line_end":473,"column_start":1,"column_end":82}},{"value":"/ Floyd-Steinberg dithering to improve the visual conception","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":77912,"byte_end":77974,"line_start":474,"line_end":474,"column_start":1,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":567},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":79542,"byte_end":79554,"line_start":513,"line_end":513,"column_start":8,"column_end":20},"name":"index_colors","qualname":"::imageops::colorops::index_colors","value":"pub fn index_colors<Pix, Map: ?Sized>(&ImageBuffer<Pix, Vec<u8>>, &Map)\n-> ImageBuffer<Luma<u8>, Vec<u8>> where Map: ColorMap<Color = Pix>,\nPix: Pixel<Subpixel = u8> + 'static","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors using the supplied `color_map` and returns an image of the indices\n","sig":null,"attributes":[{"value":"/ Reduces the colors using the supplied `color_map` and returns an image of the indices","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":79445,"byte_end":79534,"line_start":512,"line_end":512,"column_start":1,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2543},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":83240,"byte_end":83247,"line_start":84,"line_end":84,"column_start":5,"column_end":12},"name":"Nearest","qualname":"::imageops::sample::FilterType::Nearest","value":"FilterType::Nearest","parent":{"krate":0,"index":2542},"children":[],"decl_id":null,"docs":" Nearest Neighbor\n","sig":null,"attributes":[{"value":"/ Nearest Neighbor","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":83215,"byte_end":83235,"line_start":83,"line_end":83,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2545},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":83276,"byte_end":83284,"line_start":87,"line_end":87,"column_start":5,"column_end":13},"name":"Triangle","qualname":"::imageops::sample::FilterType::Triangle","value":"FilterType::Triangle","parent":{"krate":0,"index":2542},"children":[],"decl_id":null,"docs":" Linear Filter\n","sig":null,"attributes":[{"value":"/ Linear Filter","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":83254,"byte_end":83271,"line_start":86,"line_end":86,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2547},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":83312,"byte_end":83322,"line_start":90,"line_end":90,"column_start":5,"column_end":15},"name":"CatmullRom","qualname":"::imageops::sample::FilterType::CatmullRom","value":"FilterType::CatmullRom","parent":{"krate":0,"index":2542},"children":[],"decl_id":null,"docs":" Cubic Filter\n","sig":null,"attributes":[{"value":"/ Cubic Filter","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":83291,"byte_end":83307,"line_start":89,"line_end":89,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2549},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":83353,"byte_end":83361,"line_start":93,"line_end":93,"column_start":5,"column_end":13},"name":"Gaussian","qualname":"::imageops::sample::FilterType::Gaussian","value":"FilterType::Gaussian","parent":{"krate":0,"index":2542},"children":[],"decl_id":null,"docs":" Gaussian Filter\n","sig":null,"attributes":[{"value":"/ Gaussian Filter","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":83329,"byte_end":83348,"line_start":92,"line_end":92,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2551},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":83398,"byte_end":83406,"line_start":96,"line_end":96,"column_start":5,"column_end":13},"name":"Lanczos3","qualname":"::imageops::sample::FilterType::Lanczos3","value":"FilterType::Lanczos3","parent":{"krate":0,"index":2542},"children":[],"decl_id":null,"docs":" Lanczos with window 3\n","sig":null,"attributes":[{"value":"/ Lanczos with window 3","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":83368,"byte_end":83393,"line_start":95,"line_end":95,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":2542},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":83198,"byte_end":83208,"line_start":82,"line_end":82,"column_start":10,"column_end":20},"name":"FilterType","qualname":"::imageops::sample::FilterType","value":"pub enum FilterType { Nearest, Triangle, CatmullRom, Gaussian, Lanczos3, }","parent":null,"children":[{"krate":0,"index":2543},{"krate":0,"index":2545},{"krate":0,"index":2547},{"krate":0,"index":2549},{"krate":0,"index":2551}],"decl_id":null,"docs":" Available Sampling Filters.","sig":null,"attributes":[{"value":"/ Available Sampling Filters.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":80756,"byte_end":80787,"line_start":15,"line_end":15,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":80788,"byte_end":80791,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":80792,"byte_end":80807,"line_start":17,"line_end":17,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":80808,"byte_end":80811,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ To test the different sampling filters on a real example, you can find two","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":80812,"byte_end":80890,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ examples called","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":80891,"byte_end":80910,"line_start":20,"line_end":20,"column_start":1,"column_end":20}},{"value":"/ [`scaledown`](https://github.com/image-rs/image/tree/master/examples/scaledown)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":80911,"byte_end":80994,"line_start":21,"line_end":21,"column_start":1,"column_end":84}},{"value":"/ and","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":80995,"byte_end":81002,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ [`scaleup`](https://github.com/image-rs/image/tree/master/examples/scaleup)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":81003,"byte_end":81082,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ in the `examples` directory of the crate source code.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":81083,"byte_end":81140,"line_start":24,"line_end":24,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":81141,"byte_end":81144,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Here is a 3.58 MiB","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":81145,"byte_end":81167,"line_start":26,"line_end":26,"column_start":1,"column_end":23}},{"value":"/ [test image](https://github.com/image-rs/image/blob/master/examples/scaledown/test.jpg)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":81168,"byte_end":81259,"line_start":27,"line_end":27,"column_start":1,"column_end":92}},{"value":"/ that has been scaled down to 300x225 px:","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":81260,"byte_end":81304,"line_start":28,"line_end":28,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":81305,"byte_end":81308,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ <!-- NOTE: To test new test images locally, replace the GitHub path with `../../../docs/` -->","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":81309,"byte_end":81406,"line_start":30,"line_end":30,"column_start":1,"column_end":98}},{"value":"/ <div style=\"display: flex; flex-wrap: wrap; align-items: flex-start;\">","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":81407,"byte_end":81481,"line_start":31,"line_end":31,"column_start":1,"column_end":75}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":81482,"byte_end":81522,"line_start":32,"line_end":32,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-near.png\" title=\"Nearest\"><br>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":81523,"byte_end":81661,"line_start":33,"line_end":33,"column_start":1,"column_end":139}},{"value":"/     Nearest Neighbor","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":81662,"byte_end":81686,"line_start":34,"line_end":34,"column_start":1,"column_end":25}},{"value":"/   </div>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":81687,"byte_end":81699,"line_start":35,"line_end":35,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":81700,"byte_end":81740,"line_start":36,"line_end":36,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-tri.png\" title=\"Triangle\"><br>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":81741,"byte_end":81879,"line_start":37,"line_end":37,"column_start":1,"column_end":139}},{"value":"/     Linear: Triangle","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":81880,"byte_end":81904,"line_start":38,"line_end":38,"column_start":1,"column_end":25}},{"value":"/   </div>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":81905,"byte_end":81917,"line_start":39,"line_end":39,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":81918,"byte_end":81958,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-cmr.png\" title=\"CatmullRom\"><br>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":81959,"byte_end":82099,"line_start":41,"line_end":41,"column_start":1,"column_end":141}},{"value":"/     Cubic: Catmull-Rom","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82100,"byte_end":82126,"line_start":42,"line_end":42,"column_start":1,"column_end":27}},{"value":"/   </div>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82127,"byte_end":82139,"line_start":43,"line_end":43,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82140,"byte_end":82180,"line_start":44,"line_end":44,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-gauss.png\" title=\"Gaussian\"><br>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82181,"byte_end":82321,"line_start":45,"line_end":45,"column_start":1,"column_end":141}},{"value":"/     Gaussian","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82322,"byte_end":82338,"line_start":46,"line_end":46,"column_start":1,"column_end":17}},{"value":"/   </div>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82339,"byte_end":82351,"line_start":47,"line_end":47,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82352,"byte_end":82392,"line_start":48,"line_end":48,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-lcz2.png\" title=\"Lanczos3\"><br>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82393,"byte_end":82532,"line_start":49,"line_end":49,"column_start":1,"column_end":140}},{"value":"/     Lanczos with window 3","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82533,"byte_end":82562,"line_start":50,"line_end":50,"column_start":1,"column_end":30}},{"value":"/   </div>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82563,"byte_end":82575,"line_start":51,"line_end":51,"column_start":1,"column_end":13}},{"value":"/ </div>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82576,"byte_end":82586,"line_start":52,"line_end":52,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82587,"byte_end":82590,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ## Speed","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82591,"byte_end":82603,"line_start":54,"line_end":54,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82604,"byte_end":82607,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ Time required to create each of the examples above, tested on an Intel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82608,"byte_end":82682,"line_start":56,"line_end":56,"column_start":1,"column_end":75}},{"value":"/ i7-4770 CPU with Rust 1.37 in release mode:","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82683,"byte_end":82730,"line_start":57,"line_end":57,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82731,"byte_end":82734,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ <table style=\"width: auto;\">","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82735,"byte_end":82767,"line_start":59,"line_end":59,"column_start":1,"column_end":33}},{"value":"/   <tr>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82768,"byte_end":82778,"line_start":60,"line_end":60,"column_start":1,"column_end":11}},{"value":"/     <th>Nearest</th>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82779,"byte_end":82803,"line_start":61,"line_end":61,"column_start":1,"column_end":25}},{"value":"/     <td>31 ms</td>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82804,"byte_end":82826,"line_start":62,"line_end":62,"column_start":1,"column_end":23}},{"value":"/   </tr>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82827,"byte_end":82838,"line_start":63,"line_end":63,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82839,"byte_end":82849,"line_start":64,"line_end":64,"column_start":1,"column_end":11}},{"value":"/     <th>Triangle</th>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82850,"byte_end":82875,"line_start":65,"line_end":65,"column_start":1,"column_end":26}},{"value":"/     <td>414 ms</td>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82876,"byte_end":82899,"line_start":66,"line_end":66,"column_start":1,"column_end":24}},{"value":"/   </tr>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82900,"byte_end":82911,"line_start":67,"line_end":67,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82912,"byte_end":82922,"line_start":68,"line_end":68,"column_start":1,"column_end":11}},{"value":"/     <th>CatmullRom</th>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82923,"byte_end":82950,"line_start":69,"line_end":69,"column_start":1,"column_end":28}},{"value":"/     <td>817 ms</td>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82951,"byte_end":82974,"line_start":70,"line_end":70,"column_start":1,"column_end":24}},{"value":"/   </tr>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82975,"byte_end":82986,"line_start":71,"line_end":71,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82987,"byte_end":82997,"line_start":72,"line_end":72,"column_start":1,"column_end":11}},{"value":"/     <th>Gaussian</th>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":82998,"byte_end":83023,"line_start":73,"line_end":73,"column_start":1,"column_end":26}},{"value":"/     <td>1180 ms</td>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":83024,"byte_end":83048,"line_start":74,"line_end":74,"column_start":1,"column_end":25}},{"value":"/   </tr>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":83049,"byte_end":83060,"line_start":75,"line_end":75,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":83061,"byte_end":83071,"line_start":76,"line_end":76,"column_start":1,"column_end":11}},{"value":"/     <th>Lanczos3</th>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":83072,"byte_end":83097,"line_start":77,"line_end":77,"column_start":1,"column_end":26}},{"value":"/     <td>1170 ms</td>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":83098,"byte_end":83122,"line_start":78,"line_end":78,"column_start":1,"column_end":25}},{"value":"/   </tr>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":83123,"byte_end":83134,"line_start":79,"line_end":79,"column_start":1,"column_end":12}},{"value":"/ </table>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":83135,"byte_end":83147,"line_start":80,"line_end":80,"column_start":1,"column_end":13}}]},{"kind":"Function","id":{"krate":0,"index":644},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":93438,"byte_end":93447,"line_start":409,"line_end":409,"column_start":8,"column_end":17},"name":"thumbnail","qualname":"::imageops::sample::thumbnail","value":"pub fn thumbnail<I, P, S>(&I, u32, u32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + Enlargeable + 'static","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specific dimensions.","sig":null,"attributes":[{"value":"/ Resize the supplied image to the specific dimensions.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":92692,"byte_end":92749,"line_start":397,"line_end":397,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":92750,"byte_end":92753,"line_start":398,"line_end":398,"column_start":1,"column_end":4}},{"value":"/ For downscaling, this method uses a fast integer algorithm where each source pixel contributes","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":92754,"byte_end":92852,"line_start":399,"line_end":399,"column_start":1,"column_end":99}},{"value":"/ to exactly one target pixel.  May give aliasing artifacts if new size is close to old size.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":92853,"byte_end":92948,"line_start":400,"line_end":400,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":92949,"byte_end":92952,"line_start":401,"line_end":401,"column_start":1,"column_end":4}},{"value":"/ In case the current width is smaller than the new width or similar for the height, another","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":92953,"byte_end":93047,"line_start":402,"line_end":402,"column_start":1,"column_end":95}},{"value":"/ strategy is used instead.  For each pixel in the output, a rectangular region of the input is","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":93048,"byte_end":93145,"line_start":403,"line_end":403,"column_start":1,"column_end":98}},{"value":"/ determined, just as previously.  But when no input pixel is part of this region, the nearest","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":93146,"byte_end":93242,"line_start":404,"line_end":404,"column_start":1,"column_end":97}},{"value":"/ pixels are interpolated instead.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":93243,"byte_end":93279,"line_start":405,"line_end":405,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":93280,"byte_end":93283,"line_start":406,"line_end":406,"column_start":1,"column_end":4}},{"value":"/ For speed reasons, all interpolation is performed linearly over the colour values.  It will not","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":93284,"byte_end":93383,"line_start":407,"line_end":407,"column_start":1,"column_end":100}},{"value":"/ take the pixel colour spaces into account.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":93384,"byte_end":93430,"line_start":408,"line_end":408,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":667},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":101306,"byte_end":101315,"line_start":648,"line_end":648,"column_start":8,"column_end":17},"name":"filter3x3","qualname":"::imageops::sample::filter3x3","value":"pub fn filter3x3<I, P, S>(&I, &[f32]) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Perform a 3x3 box filter on the supplied image.\n ```kernel``` is an array of the filter weights of length 9.\n","sig":null,"attributes":[{"value":"/ Perform a 3x3 box filter on the supplied image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":101183,"byte_end":101234,"line_start":646,"line_end":646,"column_start":1,"column_end":52}},{"value":"/ ```kernel``` is an array of the filter weights of length 9.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":101235,"byte_end":101298,"line_start":647,"line_end":647,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":672},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":103742,"byte_end":103748,"line_start":728,"line_end":728,"column_start":8,"column_end":14},"name":"resize","qualname":"::imageops::sample::resize","value":"pub fn resize<I: GenericImageView>(&I, u32, u32, FilterType)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static, <I::Pixel as Pixel>::Subpixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specified dimensions.\n ```nwidth``` and ```nheight``` are the new dimensions.\n ```filter``` is the sampling filter to use.\n","sig":null,"attributes":[{"value":"/ Resize the supplied image to the specified dimensions.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":103569,"byte_end":103627,"line_start":725,"line_end":725,"column_start":1,"column_end":59}},{"value":"/ ```nwidth``` and ```nheight``` are the new dimensions.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":103628,"byte_end":103686,"line_start":726,"line_end":726,"column_start":1,"column_end":59}},{"value":"/ ```filter``` is the sampling filter to use.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":103687,"byte_end":103734,"line_start":727,"line_end":727,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":674},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":104874,"byte_end":104878,"line_start":767,"line_end":767,"column_start":8,"column_end":12},"name":"blur","qualname":"::imageops::sample::blur","value":"pub fn blur<I: GenericImageView>(&I, f32)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on the supplied image.\n ```sigma``` is a measure of how much to blur by.\n","sig":null,"attributes":[{"value":"/ Performs a Gaussian blur on the supplied image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":104762,"byte_end":104813,"line_start":765,"line_end":765,"column_start":1,"column_end":52}},{"value":"/ ```sigma``` is a measure of how much to blur by.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":104814,"byte_end":104866,"line_start":766,"line_end":766,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":677},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":105702,"byte_end":105711,"line_start":794,"line_end":794,"column_start":8,"column_end":17},"name":"unsharpen","qualname":"::imageops::sample::unsharpen","value":"pub fn unsharpen<I, P, S>(&I, f32, i32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on the supplied image.\n ```sigma``` is the amount to blur the image by.\n ```threshold``` is the threshold for the difference between","sig":null,"attributes":[{"value":"/ Performs an unsharpen mask on the supplied image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":105441,"byte_end":105494,"line_start":789,"line_end":789,"column_start":1,"column_end":54}},{"value":"/ ```sigma``` is the amount to blur the image by.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":105495,"byte_end":105546,"line_start":790,"line_end":790,"column_start":1,"column_end":52}},{"value":"/ ```threshold``` is the threshold for the difference between","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":105547,"byte_end":105610,"line_start":791,"line_end":791,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":105611,"byte_end":105614,"line_start":792,"line_end":792,"column_start":1,"column_end":4}},{"value":"/ See <https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":105615,"byte_end":105694,"line_start":793,"line_end":793,"column_start":1,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":682},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":40482,"byte_end":40486,"line_start":34,"line_end":34,"column_start":8,"column_end":12},"name":"crop","qualname":"::imageops::crop","value":"pub fn crop<I: GenericImageView>(&mut I, u32, u32, u32, u32)\n-> SubImage<&mut I>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable view into an image\n The coordinates set the position of the top left corner of the crop.\n","sig":null,"attributes":[{"value":"/ Return a mutable view into an image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":40362,"byte_end":40401,"line_start":32,"line_end":32,"column_start":1,"column_end":40}},{"value":"/ The coordinates set the position of the top left corner of the crop.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":40402,"byte_end":40474,"line_start":33,"line_end":33,"column_start":1,"column_end":73}}]},{"kind":"Function","id":{"krate":0,"index":684},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":40853,"byte_end":40861,"line_start":47,"line_end":47,"column_start":8,"column_end":16},"name":"crop_imm","qualname":"::imageops::crop_imm","value":"pub fn crop_imm<I: GenericImageView>(&I, u32, u32, u32, u32) -> SubImage<&I>","parent":null,"children":[],"decl_id":null,"docs":" Return an immutable view into an image\n The coordinates set the position of the top left corner of the crop.\n","sig":null,"attributes":[{"value":"/ Return an immutable view into an image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":40730,"byte_end":40772,"line_start":45,"line_end":45,"column_start":1,"column_end":43}},{"value":"/ The coordinates set the position of the top left corner of the crop.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":40773,"byte_end":40845,"line_start":46,"line_end":46,"column_start":1,"column_end":73}}]},{"kind":"Function","id":{"krate":0,"index":688},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":43645,"byte_end":43659,"line_start":131,"line_end":131,"column_start":8,"column_end":22},"name":"overlay_bounds","qualname":"::imageops::overlay_bounds","value":"pub fn overlay_bounds((u32, u32), (u32, u32), u32, u32) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Calculate the region that can be copied from top to bottom.","sig":null,"attributes":[{"value":"/ Calculate the region that can be copied from top to bottom.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":41473,"byte_end":41536,"line_start":76,"line_end":76,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":41537,"byte_end":41540,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ Given image size of bottom and top image, and a point at which we want to place the top image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":41541,"byte_end":41638,"line_start":78,"line_end":78,"column_start":1,"column_end":98}},{"value":"/ onto the bottom image, how large can we be? Have to wary of the following issues:","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":41639,"byte_end":41724,"line_start":79,"line_end":79,"column_start":1,"column_end":86}},{"value":"/ * Top might be larger than bottom","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":41725,"byte_end":41762,"line_start":80,"line_end":80,"column_start":1,"column_end":38}},{"value":"/ * Overflows in the computation","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":41763,"byte_end":41797,"line_start":81,"line_end":81,"column_start":1,"column_end":35}},{"value":"/ * Coordinates could be completely out of bounds","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":41798,"byte_end":41849,"line_start":82,"line_end":82,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":41850,"byte_end":41853,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ The main idea is to make use of inequalities provided by the nature of `saturing_add` and","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":41854,"byte_end":41947,"line_start":84,"line_end":84,"column_start":1,"column_end":94}},{"value":"/ `saturating_sub`. These intrinsically validate that all resulting coordinates will be in bounds","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":41948,"byte_end":42047,"line_start":85,"line_end":85,"column_start":1,"column_end":100}},{"value":"/ for both images.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":42048,"byte_end":42068,"line_start":86,"line_end":86,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":42069,"byte_end":42072,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ We want that all these coordinate accesses are safe:","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":42073,"byte_end":42129,"line_start":88,"line_end":88,"column_start":1,"column_end":57}},{"value":"/ 1. `bottom.get_pixel(x + [0..x_range), y + [0..y_range))`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":42130,"byte_end":42191,"line_start":89,"line_end":89,"column_start":1,"column_end":62}},{"value":"/ 2. `top.get_pixel([0..x_range), [0..y_range))`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":42192,"byte_end":42242,"line_start":90,"line_end":90,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":42243,"byte_end":42246,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ Proof that the function provides the necessary bounds for width. Note that all unaugmented math","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":42247,"byte_end":42346,"line_start":92,"line_end":92,"column_start":1,"column_end":100}},{"value":"/ operations are to be read in standard arithmetic, not integer arithmetic. Since no direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":42347,"byte_end":42440,"line_start":93,"line_end":93,"column_start":1,"column_end":94}},{"value":"/ integer arithmetic occurs in the implementation, this is unambiguous.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":42441,"byte_end":42514,"line_start":94,"line_end":94,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":42515,"byte_end":42518,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":42519,"byte_end":42530,"line_start":96,"line_end":96,"column_start":1,"column_end":12}},{"value":"/ Three short notes/lemmata:","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":42531,"byte_end":42561,"line_start":97,"line_end":97,"column_start":1,"column_end":31}},{"value":"/ - Iff `(a - b) <= 0` then `a.saturating_sub(b) = 0`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":42562,"byte_end":42617,"line_start":98,"line_end":98,"column_start":1,"column_end":56}},{"value":"/ - Iff `(a - b) >= 0` then `a.saturating_sub(b) = a - b`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":42618,"byte_end":42677,"line_start":99,"line_end":99,"column_start":1,"column_end":60}},{"value":"/ - If  `a <= c` then `a.saturating_sub(b) <= c.saturating_sub(b)`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":42678,"byte_end":42746,"line_start":100,"line_end":100,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":42747,"byte_end":42750,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ 1.1 We show that if `bottom_width <= x`, then `x_range = 0` therefore `x + [0..x_range)` is empty.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":42751,"byte_end":42853,"line_start":102,"line_end":102,"column_start":1,"column_end":103}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":42854,"byte_end":42857,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ x_range","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":42858,"byte_end":42869,"line_start":104,"line_end":104,"column_start":1,"column_end":12}},{"value":"/  = (top_width.saturating_add(x).min(bottom_width)).saturating_sub(x)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":42870,"byte_end":42942,"line_start":105,"line_end":105,"column_start":1,"column_end":73}},{"value":"/ <= bottom_width.saturating_sub(x)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":42943,"byte_end":42980,"line_start":106,"line_end":106,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":42981,"byte_end":42984,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ bottom_width <= x","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":42985,"byte_end":43006,"line_start":108,"line_end":108,"column_start":1,"column_end":22}},{"value":"/ <==> bottom_width - x <= 0","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":43007,"byte_end":43037,"line_start":109,"line_end":109,"column_start":1,"column_end":31}},{"value":"/ <==> bottom_width.saturating_sub(x) = 0","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":43038,"byte_end":43081,"line_start":110,"line_end":110,"column_start":1,"column_end":44}},{"value":"/  ==> x_range <= 0","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":43082,"byte_end":43103,"line_start":111,"line_end":111,"column_start":1,"column_end":22}},{"value":"/  ==> x_range  = 0","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":43104,"byte_end":43125,"line_start":112,"line_end":112,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":43126,"byte_end":43129,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ 1.2 If `x < bottom_width` then `x + x_range < bottom_width`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":43130,"byte_end":43193,"line_start":114,"line_end":114,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":43194,"byte_end":43197,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ x + x_range","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":43198,"byte_end":43213,"line_start":116,"line_end":116,"column_start":1,"column_end":16}},{"value":"/ <= x + bottom_width.saturating_sub(x)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":43214,"byte_end":43255,"line_start":117,"line_end":117,"column_start":1,"column_end":42}},{"value":"/  = x + (bottom_width - x)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":43256,"byte_end":43285,"line_start":118,"line_end":118,"column_start":1,"column_end":30}},{"value":"/  = bottom_width","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":43286,"byte_end":43305,"line_start":119,"line_end":119,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":43306,"byte_end":43309,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ 2. We show that `x_range <= top_width`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":43310,"byte_end":43352,"line_start":121,"line_end":121,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":43353,"byte_end":43356,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ x_range","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":43357,"byte_end":43368,"line_start":123,"line_end":123,"column_start":1,"column_end":12}},{"value":"/  = (top_width.saturating_add(x).min(bottom_width)).saturating_sub(x)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":43369,"byte_end":43441,"line_start":124,"line_end":124,"column_start":1,"column_end":73}},{"value":"/ <= top_width.saturating_add(x).saturating_sub(x)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":43442,"byte_end":43494,"line_start":125,"line_end":125,"column_start":1,"column_end":53}},{"value":"/ <= (top_wdith + x).saturating_sub(x)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":43495,"byte_end":43535,"line_start":126,"line_end":126,"column_start":1,"column_end":41}},{"value":"/  = top_width (due to `top_width >= 0` and `x >= 0`)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":43536,"byte_end":43591,"line_start":127,"line_end":127,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":43592,"byte_end":43599,"line_start":128,"line_end":128,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":43600,"byte_end":43603,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ Proof is the same for height.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":43604,"byte_end":43637,"line_start":130,"line_end":130,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":689},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":44173,"byte_end":44180,"line_start":149,"line_end":149,"column_start":8,"column_end":15},"name":"overlay","qualname":"::imageops::overlay","value":"pub fn overlay<I, J>(&mut I, &J, u32, u32) where I: GenericImage,\nJ: GenericImageView<Pixel = I::Pixel>","parent":null,"children":[],"decl_id":null,"docs":" Overlay an image at a given coordinate (x, y)\n","sig":null,"attributes":[{"value":"/ Overlay an image at a given coordinate (x, y)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":44116,"byte_end":44165,"line_start":148,"line_end":148,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":692},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":45157,"byte_end":45161,"line_start":183,"line_end":183,"column_start":8,"column_end":12},"name":"tile","qualname":"::imageops::tile","value":"pub fn tile<I, J>(&mut I, &J) where I: GenericImage, J: GenericImageView<Pixel\n= I::Pixel>","parent":null,"children":[],"decl_id":null,"docs":" Tile an image by repeating it multiple times","sig":null,"attributes":[{"value":"/ Tile an image by repeating it multiple times","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":44839,"byte_end":44887,"line_start":171,"line_end":171,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":44888,"byte_end":44891,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":44892,"byte_end":44906,"line_start":173,"line_end":173,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":44907,"byte_end":44920,"line_start":174,"line_end":174,"column_start":1,"column_end":14}},{"value":"/ use image::{RgbaImage};","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":44921,"byte_end":44948,"line_start":175,"line_end":175,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":44949,"byte_end":44952,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ let mut img = RgbaImage::new(1920, 1080);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":44953,"byte_end":44998,"line_start":177,"line_end":177,"column_start":1,"column_end":46}},{"value":"/ let tile = image::open(\"tile.png\").unwrap();","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":44999,"byte_end":45047,"line_start":178,"line_end":178,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":45048,"byte_end":45051,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ image::imageops::tile(&mut img, &tile);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":45052,"byte_end":45095,"line_start":180,"line_end":180,"column_start":1,"column_end":44}},{"value":"/ img.save(\"tiled_wallpaper.png\").unwrap();","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":45096,"byte_end":45141,"line_start":181,"line_end":181,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":45142,"byte_end":45149,"line_start":182,"line_end":182,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":695},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":45916,"byte_end":45933,"line_start":209,"line_end":209,"column_start":8,"column_end":25},"name":"vertical_gradient","qualname":"::imageops::vertical_gradient","value":"pub fn vertical_gradient<S, P, I>(&mut I, &P, &P) where I: GenericImage<Pixel\n= P>, P: Pixel<Subpixel = S> + 'static, S: Primitive + Lerp + 'static","parent":null,"children":[],"decl_id":null,"docs":" Fill the image with a linear vertical gradient\n \n This function assumes a linear color space.\n \n # Examples\n ```no_run\n use image::{Rgba, RgbaImage, Pixel};\n \n let mut img = RgbaImage::new(100, 100);\n let start = Rgba::from_slice(&[0, 128, 0, 0]);\n let end = Rgba::from_slice(&[255, 255, 255, 255]);\n \n image::imageops::vertical_gradient(&mut img, start, end);\n img.save(\"vertical_gradient.png\").unwrap();\n","sig":null,"attributes":[{"value":"/ Fill the image with a linear vertical gradient","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":45460,"byte_end":45510,"line_start":195,"line_end":195,"column_start":1,"column_end":51}},{"value":"/ ","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":45511,"byte_end":45515,"line_start":196,"line_end":196,"column_start":1,"column_end":5}},{"value":"/ This function assumes a linear color space.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":45516,"byte_end":45563,"line_start":197,"line_end":197,"column_start":1,"column_end":48}},{"value":"/ ","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":45564,"byte_end":45568,"line_start":198,"line_end":198,"column_start":1,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":45569,"byte_end":45583,"line_start":199,"line_end":199,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":45584,"byte_end":45597,"line_start":200,"line_end":200,"column_start":1,"column_end":14}},{"value":"/ use image::{Rgba, RgbaImage, Pixel};","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":45598,"byte_end":45638,"line_start":201,"line_end":201,"column_start":1,"column_end":41}},{"value":"/ ","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":45639,"byte_end":45643,"line_start":202,"line_end":202,"column_start":1,"column_end":5}},{"value":"/ let mut img = RgbaImage::new(100, 100);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":45644,"byte_end":45687,"line_start":203,"line_end":203,"column_start":1,"column_end":44}},{"value":"/ let start = Rgba::from_slice(&[0, 128, 0, 0]);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":45688,"byte_end":45738,"line_start":204,"line_end":204,"column_start":1,"column_end":51}},{"value":"/ let end = Rgba::from_slice(&[255, 255, 255, 255]);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":45739,"byte_end":45793,"line_start":205,"line_end":205,"column_start":1,"column_end":55}},{"value":"/ ","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":45794,"byte_end":45798,"line_start":206,"line_end":206,"column_start":1,"column_end":5}},{"value":"/ image::imageops::vertical_gradient(&mut img, start, end);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":45799,"byte_end":45860,"line_start":207,"line_end":207,"column_start":1,"column_end":62}},{"value":"/ img.save(\"vertical_gradient.png\").unwrap();","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":45861,"byte_end":45908,"line_start":208,"line_end":208,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":700},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":46921,"byte_end":46940,"line_start":242,"line_end":242,"column_start":8,"column_end":27},"name":"horizontal_gradient","qualname":"::imageops::horizontal_gradient","value":"pub fn horizontal_gradient<S, P, I>(&mut I, &P, &P) where\nI: GenericImage<Pixel = P>, P: Pixel<Subpixel = S> + 'static, S: Primitive +\nLerp + 'static","parent":null,"children":[],"decl_id":null,"docs":" Fill the image with a linear horizontal gradient\n \n This function assumes a linear color space.","sig":null,"attributes":[{"value":"/ Fill the image with a linear horizontal gradient","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":46460,"byte_end":46512,"line_start":228,"line_end":228,"column_start":1,"column_end":53}},{"value":"/ ","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":46513,"byte_end":46517,"line_start":229,"line_end":229,"column_start":1,"column_end":5}},{"value":"/ This function assumes a linear color space.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":46518,"byte_end":46565,"line_start":230,"line_end":230,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":46566,"byte_end":46569,"line_start":231,"line_end":231,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":46570,"byte_end":46584,"line_start":232,"line_end":232,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":46585,"byte_end":46598,"line_start":233,"line_end":233,"column_start":1,"column_end":14}},{"value":"/ use image::{Rgba, RgbaImage, Pixel};","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":46599,"byte_end":46639,"line_start":234,"line_end":234,"column_start":1,"column_end":41}},{"value":"/ ","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":46640,"byte_end":46644,"line_start":235,"line_end":235,"column_start":1,"column_end":5}},{"value":"/ let mut img = RgbaImage::new(100, 100);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":46645,"byte_end":46688,"line_start":236,"line_end":236,"column_start":1,"column_end":44}},{"value":"/ let start = Rgba::from_slice(&[0, 128, 0, 0]);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":46689,"byte_end":46739,"line_start":237,"line_end":237,"column_start":1,"column_end":51}},{"value":"/ let end = Rgba::from_slice(&[255, 255, 255, 255]);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":46740,"byte_end":46794,"line_start":238,"line_end":238,"column_start":1,"column_end":55}},{"value":"/ ","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":46795,"byte_end":46799,"line_start":239,"line_end":239,"column_start":1,"column_end":5}},{"value":"/ image::imageops::horizontal_gradient(&mut img, start, end);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":46800,"byte_end":46863,"line_start":240,"line_end":240,"column_start":1,"column_end":64}},{"value":"/ img.save(\"horizontal_gradient.png\").unwrap();","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":46864,"byte_end":46913,"line_start":241,"line_end":241,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":705},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":47537,"byte_end":47544,"line_start":262,"line_end":262,"column_start":8,"column_end":15},"name":"replace","qualname":"::imageops::replace","value":"pub fn replace<I, J>(&mut I, &J, u32, u32) where I: GenericImage,\nJ: GenericImageView<Pixel = I::Pixel>","parent":null,"children":[],"decl_id":null,"docs":" Replace the contents of an image at a given coordinate (x, y)\n","sig":null,"attributes":[{"value":"/ Replace the contents of an image at a given coordinate (x, y)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":47464,"byte_end":47529,"line_start":261,"line_end":261,"column_start":1,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":708},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"io","qualname":"::io","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\mod.rs","parent":null,"children":[{"krate":0,"index":709},{"krate":0,"index":789},{"krate":0,"index":853}],"decl_id":null,"docs":" Input and output of images.\n","sig":null,"attributes":[{"value":"/ Input and output of images.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\mod.rs","byte_start":109768,"byte_end":109799,"line_start":1,"line_end":1,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":764},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":111996,"byte_end":112002,"line_start":61,"line_end":61,"column_start":12,"column_end":18},"name":"Reader","qualname":"::io::reader::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":766},{"krate":0,"index":767}],"decl_id":null,"docs":" A multi-format image reader.","sig":null,"attributes":[{"value":"/ A multi-format image reader.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":110197,"byte_end":110229,"line_start":12,"line_end":12,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":110230,"byte_end":110233,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Wraps an input reader to facilitate automatic detection of an image's format, appropriate","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":110234,"byte_end":110327,"line_start":14,"line_end":14,"column_start":1,"column_end":94}},{"value":"/ decoding method, and dispatches into the set of supported [`ImageDecoder`] implementations.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":110328,"byte_end":110423,"line_start":15,"line_end":15,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":110424,"byte_end":110427,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":110428,"byte_end":110440,"line_start":17,"line_end":17,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":110441,"byte_end":110444,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Opening a file, deducing the format based on the file path automatically, and trying to decode","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":110445,"byte_end":110543,"line_start":19,"line_end":19,"column_start":1,"column_end":99}},{"value":"/ the image contained can be performed by constructing the reader and immediately consuming it.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":110544,"byte_end":110641,"line_start":20,"line_end":20,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":110642,"byte_end":110645,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":110646,"byte_end":110659,"line_start":22,"line_end":22,"column_start":1,"column_end":14}},{"value":"/ # use image::ImageError;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":110660,"byte_end":110688,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/ # use image::io::Reader;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":110689,"byte_end":110717,"line_start":24,"line_end":24,"column_start":1,"column_end":29}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":110718,"byte_end":110761,"line_start":25,"line_end":25,"column_start":1,"column_end":44}},{"value":"/ let image = Reader::open(\"path/to/image.png\")?","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":110762,"byte_end":110812,"line_start":26,"line_end":26,"column_start":1,"column_end":51}},{"value":"/     .decode()?;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":110813,"byte_end":110832,"line_start":27,"line_end":27,"column_start":1,"column_end":20}},{"value":"/ # Ok(()) }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":110833,"byte_end":110847,"line_start":28,"line_end":28,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":110848,"byte_end":110855,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":110856,"byte_end":110859,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ It is also possible to make a guess based on the content. This is especially handy if the","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":110860,"byte_end":110953,"line_start":31,"line_end":31,"column_start":1,"column_end":94}},{"value":"/ source is some blob in memory and you have constructed the reader in another way. Here is an","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":110954,"byte_end":111050,"line_start":32,"line_end":32,"column_start":1,"column_end":97}},{"value":"/ example with a `pnm` black-and-white subformat that encodes its pixel matrix with ascii values.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":111051,"byte_end":111150,"line_start":33,"line_end":33,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":111151,"byte_end":111154,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # use image::ImageError;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":111250,"byte_end":111278,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/ # use image::io::Reader;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":111279,"byte_end":111307,"line_start":38,"line_end":38,"column_start":1,"column_end":29}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":111308,"byte_end":111351,"line_start":39,"line_end":39,"column_start":1,"column_end":44}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":111352,"byte_end":111376,"line_start":40,"line_end":40,"column_start":1,"column_end":25}},{"value":"/ use image::ImageFormat;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":111377,"byte_end":111404,"line_start":41,"line_end":41,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":111405,"byte_end":111408,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ let raw_data = b\"P1 2 2\\n\\","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":111409,"byte_end":111439,"line_start":43,"line_end":43,"column_start":1,"column_end":31}},{"value":"/     0 1\\n\\","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":111440,"byte_end":111454,"line_start":44,"line_end":44,"column_start":1,"column_end":15}},{"value":"/     1 0\\n\";","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":111455,"byte_end":111470,"line_start":45,"line_end":45,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":111471,"byte_end":111474,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ let mut reader = Reader::new(Cursor::new(raw_data))","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":111475,"byte_end":111530,"line_start":47,"line_end":47,"column_start":1,"column_end":56}},{"value":"/     .with_guessed_format()","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":111531,"byte_end":111561,"line_start":48,"line_end":48,"column_start":1,"column_end":31}},{"value":"/     .expect(\"Cursor io never fails\");","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":111562,"byte_end":111603,"line_start":49,"line_end":49,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(reader.format(), Some(ImageFormat::Pnm));","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":111604,"byte_end":111660,"line_start":50,"line_end":50,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":111661,"byte_end":111664,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ let image = reader.decode()?;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":111665,"byte_end":111698,"line_start":52,"line_end":52,"column_start":1,"column_end":34}},{"value":"/ # Ok(()) }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":111699,"byte_end":111713,"line_start":53,"line_end":53,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":111714,"byte_end":111721,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":111722,"byte_end":111725,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ As a final fallback or if only a specific format must be used, the reader always allows manual","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":111726,"byte_end":111824,"line_start":56,"line_end":56,"column_start":1,"column_end":99}},{"value":"/ specification of the supposed image format with [`set_format`].","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":111825,"byte_end":111892,"line_start":57,"line_end":57,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":111893,"byte_end":111896,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ [`set_format`]: #method.set_format","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":111897,"byte_end":111935,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/ [`ImageDecoder`]: ../trait.ImageDecoder.html","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":111936,"byte_end":111984,"line_start":60,"line_end":60,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":112523,"byte_end":112526,"line_start":76,"line_end":76,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader<R>>::new","value":"pub fn new(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new image reader without a preset format.","sig":null,"attributes":[{"value":"/ Create a new image reader without a preset format.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":112166,"byte_end":112220,"line_start":69,"line_end":69,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":112225,"byte_end":112228,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ It is possible to guess the format based on the content of the read object with","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":112233,"byte_end":112316,"line_start":71,"line_end":71,"column_start":5,"column_end":88}},{"value":"/ [`with_guessed_format`], or to set the format directly with [`set_format`].","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":112321,"byte_end":112400,"line_start":72,"line_end":72,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":112405,"byte_end":112408,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ [`with_guessed_format`]: #method.with_guessed_format","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":112413,"byte_end":112469,"line_start":74,"line_end":74,"column_start":5,"column_end":61}},{"value":"/ [`set_format`]: method.set_format","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":112474,"byte_end":112511,"line_start":75,"line_end":75,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":771},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":112696,"byte_end":112707,"line_start":84,"line_end":84,"column_start":12,"column_end":23},"name":"with_format","qualname":"<Reader<R>>::with_format","value":"pub fn with_format(R, ImageFormat) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a reader with specified format.\n","sig":null,"attributes":[{"value":"/ Construct a reader with specified format.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":112639,"byte_end":112684,"line_start":83,"line_end":83,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":112901,"byte_end":112907,"line_start":92,"line_end":92,"column_start":12,"column_end":18},"name":"format","qualname":"<Reader<R>>::format","value":"pub fn format(&Self) -> Option<ImageFormat>","parent":null,"children":[],"decl_id":null,"docs":" Get the currently determined format.\n","sig":null,"attributes":[{"value":"/ Get the currently determined format.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":112849,"byte_end":112889,"line_start":91,"line_end":91,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":773},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":113042,"byte_end":113052,"line_start":97,"line_end":97,"column_start":12,"column_end":22},"name":"set_format","qualname":"<Reader<R>>::set_format","value":"pub fn set_format(&mut Self, ImageFormat)","parent":null,"children":[],"decl_id":null,"docs":" Supply the format as which to interpret the read image.\n","sig":null,"attributes":[{"value":"/ Supply the format as which to interpret the read image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":112971,"byte_end":113030,"line_start":96,"line_end":96,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":113382,"byte_end":113394,"line_start":105,"line_end":105,"column_start":12,"column_end":24},"name":"clear_format","qualname":"<Reader<R>>::clear_format","value":"pub fn clear_format(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove the current information on the image format.","sig":null,"attributes":[{"value":"/ Remove the current information on the image format.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":113134,"byte_end":113189,"line_start":101,"line_end":101,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":113194,"byte_end":113197,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ Note that many operations require format information to be present and will return e.g. an","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":113202,"byte_end":113296,"line_start":103,"line_end":103,"column_start":5,"column_end":99}},{"value":"/ `ImageError::Unsupported` when the image format has not been set.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":113301,"byte_end":113370,"line_start":104,"line_end":104,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":775},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":113481,"byte_end":113491,"line_start":110,"line_end":110,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Reader<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the reader.\n","sig":null,"attributes":[{"value":"/ Unwrap the reader.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":113447,"byte_end":113469,"line_start":109,"line_end":109,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":777},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":113974,"byte_end":113978,"line_start":124,"line_end":124,"column_start":12,"column_end":16},"name":"open","qualname":"<Reader<BufReader<File>>>::open","value":"pub fn open<P>(P) -> io::Result<Self> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Open a file to read, format will be guessed from path.","sig":null,"attributes":[{"value":"/ Open a file to read, format will be guessed from path.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":113568,"byte_end":113626,"line_start":116,"line_end":116,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":113631,"byte_end":113634,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ This will not attempt any io operation on the opened file.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":113639,"byte_end":113701,"line_start":118,"line_end":118,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":113706,"byte_end":113709,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ If you want to inspect the content for a better guess on the format, which does not depend","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":113714,"byte_end":113808,"line_start":120,"line_end":120,"column_start":5,"column_end":99}},{"value":"/ on file extensions, follow this call with a call to [`with_guessed_format`].","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":113813,"byte_end":113893,"line_start":121,"line_end":121,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":113898,"byte_end":113901,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ [`with_guessed_format`]: #method.with_guessed_format","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":113906,"byte_end":113962,"line_start":123,"line_end":123,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":115620,"byte_end":115639,"line_start":166,"line_end":166,"column_start":12,"column_end":31},"name":"with_guessed_format","qualname":"<Reader<R>>::with_guessed_format","value":"pub fn with_guessed_format(Self) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Make a format guess based on the content, replacing it on success.","sig":null,"attributes":[{"value":"/ Make a format guess based on the content, replacing it on success.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":114346,"byte_end":114416,"line_start":138,"line_end":138,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":114421,"byte_end":114424,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok` with the guess if no io error occurs. Additionally, replaces the current","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":114429,"byte_end":114518,"line_start":140,"line_end":140,"column_start":5,"column_end":94}},{"value":"/ format if the guess was successful. If the guess was unable to determine a format then","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":114523,"byte_end":114613,"line_start":141,"line_end":141,"column_start":5,"column_end":95}},{"value":"/ the current format of the reader is unchanged.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":114618,"byte_end":114668,"line_start":142,"line_end":142,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":114673,"byte_end":114676,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the underlying reader fails. The format is unchanged. The error is a","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":114681,"byte_end":114773,"line_start":144,"line_end":144,"column_start":5,"column_end":97}},{"value":"/ `std::io::Error` and not `ImageError` since the only error case is an error when the","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":114778,"byte_end":114866,"line_start":145,"line_end":145,"column_start":5,"column_end":93}},{"value":"/ underlying reader seeks.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":114871,"byte_end":114899,"line_start":146,"line_end":146,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":114904,"byte_end":114907,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ When an error occurs, the reader may not have been properly reset and it is potentially","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":114912,"byte_end":115003,"line_start":148,"line_end":148,"column_start":5,"column_end":96}},{"value":"/ hazardous to continue with more io.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":115008,"byte_end":115047,"line_start":149,"line_end":149,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":115052,"byte_end":115055,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ ## Usage","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":115060,"byte_end":115072,"line_start":151,"line_end":151,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":115077,"byte_end":115080,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ This supplements the path based type deduction from [`open`](Reader::open) with content based deduction.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":115085,"byte_end":115193,"line_start":153,"line_end":153,"column_start":5,"column_end":113}},{"value":"/ This is more common in Linux and UNIX operating systems and also helpful if the path can","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":115198,"byte_end":115290,"line_start":154,"line_end":154,"column_start":5,"column_end":97}},{"value":"/ not be directly controlled.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":115295,"byte_end":115326,"line_start":155,"line_end":155,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":115331,"byte_end":115334,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":115339,"byte_end":115352,"line_start":157,"line_end":157,"column_start":5,"column_end":18}},{"value":"/ # use image::ImageError;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":115357,"byte_end":115385,"line_start":158,"line_end":158,"column_start":5,"column_end":33}},{"value":"/ # use image::io::Reader;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":115390,"byte_end":115418,"line_start":159,"line_end":159,"column_start":5,"column_end":33}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":115423,"byte_end":115466,"line_start":160,"line_end":160,"column_start":5,"column_end":48}},{"value":"/ let image = Reader::open(\"image.unknown\")?","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":115471,"byte_end":115517,"line_start":161,"line_end":161,"column_start":5,"column_end":51}},{"value":"/     .with_guessed_format()?","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":115522,"byte_end":115553,"line_start":162,"line_end":162,"column_start":5,"column_end":36}},{"value":"/     .decode()?;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":115558,"byte_end":115577,"line_start":163,"line_end":163,"column_start":5,"column_end":24}},{"value":"/ # Ok(()) }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":115582,"byte_end":115596,"line_start":164,"line_end":164,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":115601,"byte_end":115608,"line_start":165,"line_end":165,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":785},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":116597,"byte_end":116612,"line_start":192,"line_end":192,"column_start":12,"column_end":27},"name":"into_dimensions","qualname":"<Reader<R>>::into_dimensions","value":"pub fn into_dimensions(Self) -> ImageResult<(u32, u32)>","parent":null,"children":[],"decl_id":null,"docs":" Read the image dimensions.","sig":null,"attributes":[{"value":"/ Read the image dimensions.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":116384,"byte_end":116414,"line_start":187,"line_end":187,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":116419,"byte_end":116422,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ Uses the current format to construct the correct reader for the format.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":116427,"byte_end":116502,"line_start":189,"line_end":189,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":116507,"byte_end":116510,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ If no format was determined, returns an `ImageError::Unsupported`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":116515,"byte_end":116585,"line_start":191,"line_end":191,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":786},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":117006,"byte_end":117012,"line_start":202,"line_end":202,"column_start":12,"column_end":18},"name":"decode","qualname":"<Reader<R>>::decode","value":"pub fn decode(Self) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Read the image (replaces `load`).","sig":null,"attributes":[{"value":"/ Read the image (replaces `load`).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":116786,"byte_end":116823,"line_start":197,"line_end":197,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":116828,"byte_end":116831,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ Uses the current format to construct the correct reader for the format.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":116836,"byte_end":116911,"line_start":199,"line_end":199,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":116916,"byte_end":116919,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ If no format was determined, returns an `ImageError::Unsupported`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":116924,"byte_end":116994,"line_start":201,"line_end":201,"column_start":5,"column_end":75}}]},{"kind":"Function","id":{"krate":0,"index":842},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\free_functions.rs","byte_start":119004,"byte_end":119008,"line_start":58,"line_end":58,"column_start":8,"column_end":12},"name":"load","qualname":"::io::free_functions::load","value":"pub fn load<R: BufRead + Seek>(R, ImageFormat) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a Reader","sig":null,"attributes":[{"value":"/ Create a new image from a Reader","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\free_functions.rs","byte_start":118791,"byte_end":118827,"line_start":51,"line_end":51,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\free_functions.rs","byte_start":118828,"byte_end":118831,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\free_functions.rs","byte_start":118832,"byte_end":118878,"line_start":53,"line_end":53,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\free_functions.rs","byte_start":118879,"byte_end":118882,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\free_functions.rs","byte_start":118883,"byte_end":118924,"line_start":55,"line_end":55,"column_start":1,"column_end":42}},{"value":"allow(unused_variables)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\free_functions.rs","byte_start":118925,"byte_end":118951,"line_start":56,"line_end":56,"column_start":1,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":851},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\free_functions.rs","byte_start":127478,"byte_end":127490,"line_start":239,"line_end":239,"column_start":8,"column_end":20},"name":"guess_format","qualname":"::io::free_functions::guess_format","value":"pub fn guess_format(&[u8]) -> ImageResult<ImageFormat>","parent":null,"children":[],"decl_id":null,"docs":" Guess image format from memory block","sig":null,"attributes":[{"value":"/ Guess image format from memory block","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\free_functions.rs","byte_start":127217,"byte_end":127257,"line_start":234,"line_end":234,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\free_functions.rs","byte_start":127258,"byte_end":127261,"line_start":235,"line_end":235,"column_start":1,"column_end":4}},{"value":"/ Makes an educated guess about the image format based on the Magic Bytes at the beginning.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\free_functions.rs","byte_start":127262,"byte_end":127355,"line_start":236,"line_end":236,"column_start":1,"column_end":94}},{"value":"/ TGA is not supported by this function.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\free_functions.rs","byte_start":127356,"byte_end":127398,"line_start":237,"line_end":237,"column_start":1,"column_end":43}},{"value":"/ This is not to be trusted on the validity of the whole memory block","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\free_functions.rs","byte_start":127399,"byte_end":127470,"line_start":238,"line_end":238,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":856},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"flat","qualname":"::flat","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","parent":null,"children":[{"krate":0,"index":857},{"krate":0,"index":858},{"krate":0,"index":861},{"krate":0,"index":864},{"krate":0,"index":867},{"krate":0,"index":868},{"krate":0,"index":871},{"krate":0,"index":874},{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":880},{"krate":0,"index":883},{"krate":0,"index":886},{"krate":0,"index":889},{"krate":0,"index":890},{"krate":0,"index":893},{"krate":0,"index":896},{"krate":0,"index":899},{"krate":0,"index":902},{"krate":0,"index":905},{"krate":0,"index":908},{"krate":0,"index":911},{"krate":0,"index":912},{"krate":0,"index":915},{"krate":0,"index":918},{"krate":0,"index":919},{"krate":0,"index":922},{"krate":0,"index":2561},{"krate":0,"index":2566},{"krate":0,"index":2569},{"krate":0,"index":2572},{"krate":0,"index":2579},{"krate":0,"index":2581},{"krate":0,"index":2582},{"krate":0,"index":2584},{"krate":0,"index":2585},{"krate":0,"index":2588},{"krate":0,"index":2589},{"krate":0,"index":2591},{"krate":0,"index":2594},{"krate":0,"index":2598},{"krate":0,"index":2600},{"krate":0,"index":2601},{"krate":0,"index":2603},{"krate":0,"index":2604},{"krate":0,"index":2607},{"krate":0,"index":2608},{"krate":0,"index":2610},{"krate":0,"index":2612},{"krate":0,"index":925},{"krate":0,"index":948},{"krate":0,"index":952},{"krate":0,"index":994},{"krate":0,"index":2614},{"krate":0,"index":2619},{"krate":0,"index":2623},{"krate":0,"index":2627},{"krate":0,"index":2632},{"krate":0,"index":2636},{"krate":0,"index":2640},{"krate":0,"index":2649},{"krate":0,"index":2651},{"krate":0,"index":2652},{"krate":0,"index":2654},{"krate":0,"index":2655},{"krate":0,"index":2658},{"krate":0,"index":2659},{"krate":0,"index":2661},{"krate":0,"index":2664},{"krate":0,"index":2675},{"krate":0,"index":2677},{"krate":0,"index":2678},{"krate":0,"index":2680},{"krate":0,"index":2681},{"krate":0,"index":2683},{"krate":0,"index":2684},{"krate":0,"index":2686},{"krate":0,"index":999},{"krate":0,"index":1012},{"krate":0,"index":1024},{"krate":0,"index":1025},{"krate":0,"index":1026},{"krate":0,"index":1031},{"krate":0,"index":1035},{"krate":0,"index":1047},{"krate":0,"index":1059},{"krate":0,"index":1067},{"krate":0,"index":1072},{"krate":0,"index":1074},{"krate":0,"index":1075}],"decl_id":null,"docs":" Image representations for ffi.","sig":null,"attributes":[{"value":"/ Image representations for ffi.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":127922,"byte_end":127956,"line_start":1,"line_end":1,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":127957,"byte_end":127960,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ # Usage","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":127961,"byte_end":127972,"line_start":3,"line_end":3,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":127973,"byte_end":127976,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Imagine you want to offer a very simple ffi interface: The caller provides an image buffer and","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":127977,"byte_end":128075,"line_start":5,"line_end":5,"column_start":1,"column_end":99}},{"value":"/ your program creates a thumbnail from it and dumps that image as `png`. This module is designed","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128076,"byte_end":128175,"line_start":6,"line_end":6,"column_start":1,"column_end":100}},{"value":"/ to help you transition from raw memory data to Rust representation.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128176,"byte_end":128247,"line_start":7,"line_end":7,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128248,"byte_end":128251,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128252,"byte_end":128265,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/ use std::ptr;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128266,"byte_end":128283,"line_start":10,"line_end":10,"column_start":1,"column_end":18}},{"value":"/ use std::slice;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128284,"byte_end":128303,"line_start":11,"line_end":11,"column_start":1,"column_end":20}},{"value":"/ use image::Rgb;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128304,"byte_end":128323,"line_start":12,"line_end":12,"column_start":1,"column_end":20}},{"value":"/ use image::flat::{FlatSamples, SampleLayout};","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128324,"byte_end":128373,"line_start":13,"line_end":13,"column_start":1,"column_end":50}},{"value":"/ use image::imageops::thumbnail;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128374,"byte_end":128409,"line_start":14,"line_end":14,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128410,"byte_end":128413,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ #[no_mangle]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128414,"byte_end":128430,"line_start":16,"line_end":16,"column_start":1,"column_end":17}},{"value":"/ pub extern \"C\" fn store_rgb8_compressed(","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128431,"byte_end":128475,"line_start":17,"line_end":17,"column_start":1,"column_end":45}},{"value":"/     data: *const u8, len: usize,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128476,"byte_end":128512,"line_start":18,"line_end":18,"column_start":1,"column_end":37}},{"value":"/     layout: *const SampleLayout","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128513,"byte_end":128548,"line_start":19,"line_end":19,"column_start":1,"column_end":36}},{"value":"/ )","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128549,"byte_end":128554,"line_start":20,"line_end":20,"column_start":1,"column_end":6}},{"value":"/     -> bool","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128555,"byte_end":128570,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/ {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128571,"byte_end":128576,"line_start":22,"line_end":22,"column_start":1,"column_end":6}},{"value":"/     let samples = unsafe { slice::from_raw_parts(data, len) };","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128577,"byte_end":128643,"line_start":23,"line_end":23,"column_start":1,"column_end":67}},{"value":"/     let layout = unsafe { ptr::read(layout) };","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128644,"byte_end":128694,"line_start":24,"line_end":24,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128695,"byte_end":128698,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/     let buffer = FlatSamples {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128699,"byte_end":128733,"line_start":26,"line_end":26,"column_start":1,"column_end":35}},{"value":"/         samples,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128734,"byte_end":128754,"line_start":27,"line_end":27,"column_start":1,"column_end":21}},{"value":"/         layout,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128755,"byte_end":128774,"line_start":28,"line_end":28,"column_start":1,"column_end":20}},{"value":"/         color_hint: None,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128775,"byte_end":128804,"line_start":29,"line_end":29,"column_start":1,"column_end":30}},{"value":"/     };","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128805,"byte_end":128815,"line_start":30,"line_end":30,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128816,"byte_end":128819,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/     let view = match buffer.as_view::<Rgb<u8>>() {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128820,"byte_end":128874,"line_start":32,"line_end":32,"column_start":1,"column_end":55}},{"value":"/         Err(_) => return false, // Invalid layout.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128875,"byte_end":128929,"line_start":33,"line_end":33,"column_start":1,"column_end":55}},{"value":"/         Ok(view) => view,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128930,"byte_end":128959,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"/     };","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128960,"byte_end":128970,"line_start":35,"line_end":35,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128971,"byte_end":128974,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/     thumbnail(&view, 64, 64)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":128975,"byte_end":129007,"line_start":37,"line_end":37,"column_start":1,"column_end":33}},{"value":"/         .save(\"output.png\")","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":129008,"byte_end":129039,"line_start":38,"line_end":38,"column_start":1,"column_end":32}},{"value":"/         .map(|_| true)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":129040,"byte_end":129066,"line_start":39,"line_end":39,"column_start":1,"column_end":27}},{"value":"/         .unwrap_or_else(|_| false)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":129067,"byte_end":129105,"line_start":40,"line_end":40,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":129106,"byte_end":129111,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":129112,"byte_end":129119,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":129120,"byte_end":129123,"line_start":43,"line_end":43,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2561},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":131114,"byte_end":131125,"line_start":81,"line_end":81,"column_start":12,"column_end":23},"name":"FlatSamples","qualname":"::flat::FlatSamples","value":"FlatSamples { samples, layout, color_hint }","parent":null,"children":[{"krate":0,"index":2563},{"krate":0,"index":2564},{"krate":0,"index":2565}],"decl_id":null,"docs":" A flat buffer over a (multi channel) image.","sig":null,"attributes":[{"value":"/ A flat buffer over a (multi channel) image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":129531,"byte_end":129578,"line_start":56,"line_end":56,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":129579,"byte_end":129582,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ In contrast to `ImageBuffer`, this representation of a sample collection is much more lenient","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":129583,"byte_end":129680,"line_start":58,"line_end":58,"column_start":1,"column_end":98}},{"value":"/ in the layout thereof. It also allows grouping by color planes instead of by pixel as long as","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":129681,"byte_end":129778,"line_start":59,"line_end":59,"column_start":1,"column_end":98}},{"value":"/ the strides of each extent are constant. This struct itself has no invariants on the strides","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":129779,"byte_end":129875,"line_start":60,"line_end":60,"column_start":1,"column_end":97}},{"value":"/ but not every possible configuration can be interpreted as a [`GenericImageView`] or","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":129876,"byte_end":129964,"line_start":61,"line_end":61,"column_start":1,"column_end":89}},{"value":"/ [`GenericImage`]. The methods [`as_view`] and [`as_view_mut`] construct the actual implementors","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":129965,"byte_end":130064,"line_start":62,"line_end":62,"column_start":1,"column_end":100}},{"value":"/ of these traits and perform necessary checks. To manually perform this and other layout checks","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":130065,"byte_end":130163,"line_start":63,"line_end":63,"column_start":1,"column_end":99}},{"value":"/ use [`is_normal`] or [`has_aliased_samples`].","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":130164,"byte_end":130213,"line_start":64,"line_end":64,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":130214,"byte_end":130217,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ Instances can be constructed not only by hand. The buffer instances returned by library","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":130218,"byte_end":130309,"line_start":66,"line_end":66,"column_start":1,"column_end":92}},{"value":"/ functions such as [`ImageBuffer::as_flat_samples`] guarantee that the conversion to a generic","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":130310,"byte_end":130407,"line_start":67,"line_end":67,"column_start":1,"column_end":98}},{"value":"/ image or generic view succeeds. A very different constructor is [`with_monocolor`]. It uses a","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":130408,"byte_end":130505,"line_start":68,"line_end":68,"column_start":1,"column_end":98}},{"value":"/ single pixel as the backing storage for an arbitrarily sized read-only raster by mapping each","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":130506,"byte_end":130603,"line_start":69,"line_end":69,"column_start":1,"column_end":98}},{"value":"/ pixel to the same samples by setting some strides to `0`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":130604,"byte_end":130665,"line_start":70,"line_end":70,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":130666,"byte_end":130669,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ [`GenericImage`]: ../trait.GenericImage.html","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":130670,"byte_end":130718,"line_start":72,"line_end":72,"column_start":1,"column_end":49}},{"value":"/ [`GenericImageView`]: ../trait.GenericImageView.html","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":130719,"byte_end":130775,"line_start":73,"line_end":73,"column_start":1,"column_end":57}},{"value":"/ [`ImageBuffer::as_flat_samples`]: ../struct.ImageBuffer.html#method.as_flat_samples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":130776,"byte_end":130863,"line_start":74,"line_end":74,"column_start":1,"column_end":88}},{"value":"/ [`is_normal`]: #method.is_normal","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":130864,"byte_end":130900,"line_start":75,"line_end":75,"column_start":1,"column_end":37}},{"value":"/ [`has_aliased_samples`]: #method.has_aliased_samples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":130901,"byte_end":130957,"line_start":76,"line_end":76,"column_start":1,"column_end":57}},{"value":"/ [`as_view`]: #method.as_view","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":130958,"byte_end":130990,"line_start":77,"line_end":77,"column_start":1,"column_end":33}},{"value":"/ [`as_view_mut`]: #method.as_view_mut","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":130991,"byte_end":131031,"line_start":78,"line_end":78,"column_start":1,"column_end":41}},{"value":"/ [`with_monocolor`]: #method.with_monocolor","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":131032,"byte_end":131078,"line_start":79,"line_end":79,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":2563},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":131203,"byte_end":131210,"line_start":83,"line_end":83,"column_start":9,"column_end":16},"name":"samples","qualname":"::flat::FlatSamples::samples","value":"Buffer","parent":{"krate":0,"index":2561},"children":[],"decl_id":null,"docs":" Underlying linear container holding sample values.\n","sig":null,"attributes":[{"value":"/ Underlying linear container holding sample values.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":131140,"byte_end":131194,"line_start":82,"line_end":82,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":2564},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":131294,"byte_end":131300,"line_start":86,"line_end":86,"column_start":9,"column_end":15},"name":"layout","qualname":"::flat::FlatSamples::layout","value":"flat::SampleLayout","parent":{"krate":0,"index":2561},"children":[],"decl_id":null,"docs":" A `repr(C)` description of the layout of buffer samples.\n","sig":null,"attributes":[{"value":"/ A `repr(C)` description of the layout of buffer samples.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":131225,"byte_end":131285,"line_start":85,"line_end":85,"column_start":5,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":2565},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":131755,"byte_end":131765,"line_start":94,"line_end":94,"column_start":9,"column_end":19},"name":"color_hint","qualname":"::flat::FlatSamples::color_hint","value":"std::option::Option<color::ColorType>","parent":{"krate":0,"index":2561},"children":[],"decl_id":null,"docs":" Supplementary color information.","sig":null,"attributes":[{"value":"/ Supplementary color information.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":131321,"byte_end":131357,"line_start":88,"line_end":88,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":131362,"byte_end":131365,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ You may keep this as `None` in most cases. This is NOT checked in `View` or other","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":131370,"byte_end":131455,"line_start":90,"line_end":90,"column_start":5,"column_end":90}},{"value":"/ converters. It is intended mainly as a way for types that convert to this buffer type to","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":131460,"byte_end":131552,"line_start":91,"line_end":91,"column_start":5,"column_end":97}},{"value":"/ attach their otherwise static color information. A dynamic image representation could","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":131557,"byte_end":131646,"line_start":92,"line_end":92,"column_start":5,"column_end":94}},{"value":"/ however use this to resolve representational ambiguities such as the order of RGB channels.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":131651,"byte_end":131746,"line_start":93,"line_end":93,"column_start":5,"column_end":100}}]},{"kind":"Struct","id":{"krate":0,"index":2572},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":131915,"byte_end":131927,"line_start":100,"line_end":100,"column_start":12,"column_end":24},"name":"SampleLayout","qualname":"::flat::SampleLayout","value":"SampleLayout { channels, channel_stride, width, width_stride, height, height_stride }","parent":null,"children":[{"krate":0,"index":2573},{"krate":0,"index":2574},{"krate":0,"index":2575},{"krate":0,"index":2576},{"krate":0,"index":2577},{"krate":0,"index":2578}],"decl_id":null,"docs":" A ffi compatible description of a sample buffer.\n","sig":null,"attributes":[{"value":"/ A ffi compatible description of a sample buffer.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":131789,"byte_end":131841,"line_start":97,"line_end":97,"column_start":1,"column_end":53}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":131842,"byte_end":131852,"line_start":98,"line_end":98,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2573},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":132011,"byte_end":132019,"line_start":102,"line_end":102,"column_start":9,"column_end":17},"name":"channels","qualname":"::flat::SampleLayout::channels","value":"u8","parent":{"krate":0,"index":2572},"children":[],"decl_id":null,"docs":" The number of channels in the color representation of the image.\n","sig":null,"attributes":[{"value":"/ The number of channels in the color representation of the image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":131934,"byte_end":132002,"line_start":101,"line_end":101,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":2574},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":132105,"byte_end":132119,"line_start":105,"line_end":105,"column_start":9,"column_end":23},"name":"channel_stride","qualname":"::flat::SampleLayout::channel_stride","value":"usize","parent":{"krate":0,"index":2572},"children":[],"decl_id":null,"docs":" Add this to an index to get to the sample in the next channel.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the sample in the next channel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":132030,"byte_end":132096,"line_start":104,"line_end":104,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":2575},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":132181,"byte_end":132186,"line_start":108,"line_end":108,"column_start":9,"column_end":14},"name":"width","qualname":"::flat::SampleLayout::width","value":"u32","parent":{"krate":0,"index":2572},"children":[],"decl_id":null,"docs":" The width of the represented image.\n","sig":null,"attributes":[{"value":"/ The width of the represented image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":132133,"byte_end":132172,"line_start":107,"line_end":107,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":2576},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":132273,"byte_end":132285,"line_start":111,"line_end":111,"column_start":9,"column_end":21},"name":"width_stride","qualname":"::flat::SampleLayout::width_stride","value":"usize","parent":{"krate":0,"index":2572},"children":[],"decl_id":null,"docs":" Add this to an index to get to the next sample in x-direction.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the next sample in x-direction.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":132198,"byte_end":132264,"line_start":110,"line_end":110,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":2577},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":132348,"byte_end":132354,"line_start":114,"line_end":114,"column_start":9,"column_end":15},"name":"height","qualname":"::flat::SampleLayout::height","value":"u32","parent":{"krate":0,"index":2572},"children":[],"decl_id":null,"docs":" The height of the represented image.\n","sig":null,"attributes":[{"value":"/ The height of the represented image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":132299,"byte_end":132339,"line_start":113,"line_end":113,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":2578},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":132441,"byte_end":132454,"line_start":117,"line_end":117,"column_start":9,"column_end":22},"name":"height_stride","qualname":"::flat::SampleLayout::height_stride","value":"usize","parent":{"krate":0,"index":2572},"children":[],"decl_id":null,"docs":" Add this to an index to get to the next sample in y-direction.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the next sample in y-direction.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":132366,"byte_end":132432,"line_start":116,"line_end":116,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":926},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":133429,"byte_end":133445,"line_start":141,"line_end":141,"column_start":12,"column_end":28},"name":"row_major_packed","qualname":"<SampleLayout>::row_major_packed","value":"pub fn row_major_packed(u8, u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Describe a row-major image packed in all directions.","sig":null,"attributes":[{"value":"/ Describe a row-major image packed in all directions.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":132635,"byte_end":132691,"line_start":125,"line_end":125,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":132696,"byte_end":132699,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ The resulting will surely be `NormalForm::RowMajorPacked`. It can therefore be converted to","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":132704,"byte_end":132799,"line_start":127,"line_end":127,"column_start":5,"column_end":100}},{"value":"/ safely to an `ImageBuffer` with a large enough underlying buffer.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":132804,"byte_end":132873,"line_start":128,"line_end":128,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":132878,"byte_end":132881,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":132886,"byte_end":132893,"line_start":130,"line_end":130,"column_start":5,"column_end":12}},{"value":"/ # use image::flat::{NormalForm, SampleLayout};","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":132898,"byte_end":132948,"line_start":131,"line_end":131,"column_start":5,"column_end":55}},{"value":"/ let layout = SampleLayout::row_major_packed(3, 640, 480);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":132953,"byte_end":133014,"line_start":132,"line_end":132,"column_start":5,"column_end":66}},{"value":"/ assert!(layout.is_normal(NormalForm::RowMajorPacked));","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":133019,"byte_end":133077,"line_start":133,"line_end":133,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":133082,"byte_end":133089,"line_start":134,"line_end":134,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":133094,"byte_end":133097,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":133102,"byte_end":133114,"line_start":136,"line_end":136,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":133119,"byte_end":133122,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ On platforms where `usize` has the same size as `u32` this panics when the resulting stride","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":133127,"byte_end":133222,"line_start":138,"line_end":138,"column_start":5,"column_end":100}},{"value":"/ in the `height` direction would be larger than `usize::max_value()`. On other platforms","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":133227,"byte_end":133318,"line_start":139,"line_end":139,"column_start":5,"column_end":96}},{"value":"/ where it can surely accomodate `u8::max_value() * u32::max_value(), this can never happen.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":133323,"byte_end":133417,"line_start":140,"line_end":140,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":927},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":134696,"byte_end":134715,"line_start":170,"line_end":170,"column_start":12,"column_end":31},"name":"column_major_packed","qualname":"<SampleLayout>::column_major_packed","value":"pub fn column_major_packed(u8, u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Describe a column-major image packed in all directions.","sig":null,"attributes":[{"value":"/ Describe a column-major image packed in all directions.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":133883,"byte_end":133942,"line_start":154,"line_end":154,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":133947,"byte_end":133950,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ The resulting will surely be `NormalForm::ColumnMajorPacked`. This is not particularly","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":133955,"byte_end":134045,"line_start":156,"line_end":156,"column_start":5,"column_end":95}},{"value":"/ useful for conversion but can be used to describe such a buffer without pitfalls.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":134050,"byte_end":134135,"line_start":157,"line_end":157,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":134140,"byte_end":134143,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":134148,"byte_end":134155,"line_start":159,"line_end":159,"column_start":5,"column_end":12}},{"value":"/ # use image::flat::{NormalForm, SampleLayout};","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":134160,"byte_end":134210,"line_start":160,"line_end":160,"column_start":5,"column_end":55}},{"value":"/ let layout = SampleLayout::column_major_packed(3, 640, 480);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":134215,"byte_end":134279,"line_start":161,"line_end":161,"column_start":5,"column_end":69}},{"value":"/ assert!(layout.is_normal(NormalForm::ColumnMajorPacked));","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":134284,"byte_end":134345,"line_start":162,"line_end":162,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":134350,"byte_end":134357,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":134362,"byte_end":134365,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":134370,"byte_end":134382,"line_start":165,"line_end":165,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":134387,"byte_end":134390,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ On platforms where `usize` has the same size as `u32` this panics when the resulting stride","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":134395,"byte_end":134490,"line_start":167,"line_end":167,"column_start":5,"column_end":100}},{"value":"/ in the `width` direction would be larger than `usize::max_value()`. On other platforms","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":134495,"byte_end":134585,"line_start":168,"line_end":168,"column_start":5,"column_end":95}},{"value":"/ where it can surely accomodate `u8::max_value() * u32::max_value(), this can never happen.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":134590,"byte_end":134684,"line_start":169,"line_end":169,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":928},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":135331,"byte_end":135342,"line_start":187,"line_end":187,"column_start":12,"column_end":23},"name":"strides_cwh","qualname":"<SampleLayout>::strides_cwh","value":"pub fn strides_cwh(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the strides for indexing matrix-like `[(c, w, h)]`.","sig":null,"attributes":[{"value":"/ Get the strides for indexing matrix-like `[(c, w, h)]`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":135156,"byte_end":135215,"line_start":183,"line_end":183,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":135220,"byte_end":135223,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ For a row-major layout with grouped samples, this tuple is strictly","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":135228,"byte_end":135299,"line_start":185,"line_end":185,"column_start":5,"column_end":76}},{"value":"/ increasing.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":135304,"byte_end":135319,"line_start":186,"line_end":186,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":929},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":135659,"byte_end":135666,"line_start":195,"line_end":195,"column_start":12,"column_end":19},"name":"extents","qualname":"<SampleLayout>::extents","value":"pub fn extents(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the dimensions `(channels, width, height)`.","sig":null,"attributes":[{"value":"/ Get the dimensions `(channels, width, height)`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":135457,"byte_end":135508,"line_start":191,"line_end":191,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":135513,"byte_end":135516,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ The interface is optimized for use with `strides_cwh` instead. The channel extent will be","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":135521,"byte_end":135614,"line_start":193,"line_end":193,"column_start":5,"column_end":98}},{"value":"/ before width and height.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":135619,"byte_end":135647,"line_start":194,"line_end":194,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":930},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":136040,"byte_end":136046,"line_start":203,"line_end":203,"column_start":12,"column_end":18},"name":"bounds","qualname":"<SampleLayout>::bounds","value":"pub fn bounds(&Self) -> (u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Tuple of bounds in the order of coordinate inputs.","sig":null,"attributes":[{"value":"/ Tuple of bounds in the order of coordinate inputs.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":135788,"byte_end":135842,"line_start":199,"line_end":199,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":135847,"byte_end":135850,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ This function should be used whenever working with image coordinates opposed to buffer","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":135855,"byte_end":135945,"line_start":201,"line_end":201,"column_start":5,"column_end":95}},{"value":"/ coordinates. The only difference compared to `extents` is the output type.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":135950,"byte_end":136028,"line_start":202,"line_end":202,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":931},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":138199,"byte_end":138209,"line_start":258,"line_end":258,"column_start":12,"column_end":22},"name":"min_length","qualname":"<SampleLayout>::min_length","value":"pub fn min_length(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":136134,"byte_end":136224,"line_start":207,"line_end":207,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":136229,"byte_end":136232,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ This method will allow zero strides, allowing compact representations of monochrome images.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":136237,"byte_end":136332,"line_start":209,"line_end":209,"column_start":5,"column_end":100}},{"value":"/ To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":136337,"byte_end":136427,"line_start":210,"line_end":210,"column_start":5,"column_end":95}},{"value":"/ aliasing and no unindexed samples) this is `width*height*channels`. But for both of the","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":136432,"byte_end":136523,"line_start":211,"line_end":211,"column_start":5,"column_end":96}},{"value":"/ other cases, the reasoning is slightly more involved.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":136528,"byte_end":136585,"line_start":212,"line_end":212,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":136590,"byte_end":136593,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ # Explanation","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":136598,"byte_end":136615,"line_start":214,"line_end":214,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":136620,"byte_end":136623,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ Note that there is a difference between `min_length` and the index of the sample","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":136628,"byte_end":136712,"line_start":216,"line_end":216,"column_start":5,"column_end":89}},{"value":"/ 'one-past-the-end`. This is due to strides that may be larger than the dimension below.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":136717,"byte_end":136808,"line_start":217,"line_end":217,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":136813,"byte_end":136816,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ ## Example with holes","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":136821,"byte_end":136846,"line_start":219,"line_end":219,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":136851,"byte_end":136854,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ Let's look at an example of a grayscale image with","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":136859,"byte_end":136913,"line_start":221,"line_end":221,"column_start":5,"column_end":59}},{"value":"/ * `width_stride = 1`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":136918,"byte_end":136942,"line_start":222,"line_end":222,"column_start":5,"column_end":29}},{"value":"/ * `width = 2`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":136947,"byte_end":136964,"line_start":223,"line_end":223,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 3`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":136969,"byte_end":136994,"line_start":224,"line_end":224,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":136999,"byte_end":137017,"line_start":225,"line_end":225,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":137022,"byte_end":137025,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":137030,"byte_end":137041,"line_start":227,"line_end":227,"column_start":5,"column_end":16}},{"value":"/ | x x   | x x m | $","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":137046,"byte_end":137069,"line_start":228,"line_end":228,"column_start":5,"column_end":28}},{"value":"/  min_length m ^","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":137074,"byte_end":137093,"line_start":229,"line_end":229,"column_start":5,"column_end":24}},{"value":"/                   ^ one-past-the-end $","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":137098,"byte_end":137140,"line_start":230,"line_end":230,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":137145,"byte_end":137152,"line_start":231,"line_end":231,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":137157,"byte_end":137160,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ The difference is also extreme for empty images with large strides. The one-past-the-end","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":137165,"byte_end":137257,"line_start":233,"line_end":233,"column_start":5,"column_end":97}},{"value":"/ sample index is still as large as the largest of these strides while `min_length = 0`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":137262,"byte_end":137352,"line_start":234,"line_end":234,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":137357,"byte_end":137360,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ ## Example with aliasing","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":137365,"byte_end":137393,"line_start":236,"line_end":236,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":137398,"byte_end":137401,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ The concept gets even more important when you allow samples to alias each other. Here we","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":137406,"byte_end":137498,"line_start":238,"line_end":238,"column_start":5,"column_end":97}},{"value":"/ have the buffer of a small grayscale image where this is the case, this time we will first","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":137503,"byte_end":137597,"line_start":239,"line_end":239,"column_start":5,"column_end":99}},{"value":"/ show the buffer and then the individual rows below.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":137602,"byte_end":137657,"line_start":240,"line_end":240,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":137662,"byte_end":137665,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ * `width_stride = 1`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":137670,"byte_end":137694,"line_start":242,"line_end":242,"column_start":5,"column_end":29}},{"value":"/ * `width = 3`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":137699,"byte_end":137716,"line_start":243,"line_end":243,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 2`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":137721,"byte_end":137746,"line_start":244,"line_end":244,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":137751,"byte_end":137769,"line_start":245,"line_end":245,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":137774,"byte_end":137777,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":137782,"byte_end":137793,"line_start":247,"line_end":247,"column_start":5,"column_end":16}},{"value":"/  1 2 3 4 5 m","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":137798,"byte_end":137814,"line_start":248,"line_end":248,"column_start":5,"column_end":21}},{"value":"/ |1 2 3| row one","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":137819,"byte_end":137838,"line_start":249,"line_end":249,"column_start":5,"column_end":24}},{"value":"/     |3 4 5| row two","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":137843,"byte_end":137866,"line_start":250,"line_end":250,"column_start":5,"column_end":28}},{"value":"/            ^ m min_length","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":137871,"byte_end":137900,"line_start":251,"line_end":251,"column_start":5,"column_end":34}},{"value":"/          ^ ??? one-past-the-end","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":137905,"byte_end":137940,"line_start":252,"line_end":252,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":137945,"byte_end":137952,"line_start":253,"line_end":253,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":137957,"byte_end":137960,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ This time 'one-past-the-end' is not even simply the largest stride times the extent of its","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":137965,"byte_end":138059,"line_start":255,"line_end":255,"column_start":5,"column_end":99}},{"value":"/ dimension. That still points inside the image because `height*height_stride = 4` but also","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":138064,"byte_end":138157,"line_start":256,"line_end":256,"column_start":5,"column_end":98}},{"value":"/ `index_of(1, 2) = 4`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":138162,"byte_end":138187,"line_start":257,"line_end":257,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":933},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":138541,"byte_end":138545,"line_start":268,"line_end":268,"column_start":12,"column_end":16},"name":"fits","qualname":"<SampleLayout>::fits","value":"pub fn fits(&Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer of length `len` is large enough.\n","sig":null,"attributes":[{"value":"/ Check if a buffer of length `len` is large enough.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":138475,"byte_end":138529,"line_start":267,"line_end":267,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":139655,"byte_end":139674,"line_start":293,"line_end":293,"column_start":12,"column_end":31},"name":"has_aliased_samples","qualname":"<SampleLayout>::has_aliased_samples","value":"pub fn has_aliased_samples(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any samples aliasing each other.","sig":null,"attributes":[{"value":"/ If there are any samples aliasing each other.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":139305,"byte_end":139354,"line_start":288,"line_end":288,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":139359,"byte_end":139362,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ If this is not the case, it would always be safe to allow mutable access to two different","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":139367,"byte_end":139460,"line_start":290,"line_end":290,"column_start":5,"column_end":98}},{"value":"/ samples at the same time. Otherwise, this operation would need additional checks. When one","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":139465,"byte_end":139559,"line_start":291,"line_end":291,"column_start":5,"column_end":99}},{"value":"/ dimension overflows `usize` with its stride we also consider this aliasing.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":139564,"byte_end":139643,"line_start":292,"line_end":292,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":939},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":140919,"byte_end":140928,"line_start":323,"line_end":323,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<SampleLayout>::is_normal","value":"pub fn is_normal(&Self, NormalForm) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer fulfills the requirements of a normal form.","sig":null,"attributes":[{"value":"/ Check if a buffer fulfills the requirements of a normal form.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":140409,"byte_end":140474,"line_start":316,"line_end":316,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":140479,"byte_end":140482,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ Certain conversions have preconditions on the structure of the sample buffer that are not","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":140487,"byte_end":140580,"line_start":318,"line_end":318,"column_start":5,"column_end":98}},{"value":"/ captured (by design) by the type system. These are then checked before the conversion. Such","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":140585,"byte_end":140680,"line_start":319,"line_end":319,"column_start":5,"column_end":100}},{"value":"/ checks can all be done in constant time and will not inspect the buffer content. You can","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":140685,"byte_end":140777,"line_start":320,"line_end":320,"column_start":5,"column_end":97}},{"value":"/ perform these checks yourself when the conversion is not required at this moment but maybe","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":140782,"byte_end":140876,"line_start":321,"line_end":321,"column_start":5,"column_end":99}},{"value":"/ still performed later.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":140881,"byte_end":140907,"line_start":322,"line_end":322,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":940},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":142626,"byte_end":142635,"line_start":378,"line_end":378,"column_start":12,"column_end":21},"name":"in_bounds","qualname":"<SampleLayout>::in_bounds","value":"pub fn in_bounds(&Self, u8, u32, u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the pixel and the channel index are in bounds.","sig":null,"attributes":[{"value":"/ Check that the pixel and the channel index are in bounds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":142284,"byte_end":142345,"line_start":373,"line_end":373,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":142350,"byte_end":142353,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ An in-bound coordinate does not yet guarantee that the corresponding calculation of a","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":142358,"byte_end":142447,"line_start":375,"line_end":375,"column_start":5,"column_end":94}},{"value":"/ buffer index does not overflow. However, if such a buffer large enough to hold all samples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":142452,"byte_end":142546,"line_start":376,"line_end":376,"column_start":5,"column_end":99}},{"value":"/ actually exists in memory, this porperty of course follows.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":142551,"byte_end":142614,"line_start":377,"line_end":377,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":941},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":142909,"byte_end":142914,"line_start":385,"line_end":385,"column_start":12,"column_end":17},"name":"index","qualname":"<SampleLayout>::index","value":"pub fn index(&Self, u8, u32, u32) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the index of a particular sample.","sig":null,"attributes":[{"value":"/ Resolve the index of a particular sample.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":142762,"byte_end":142807,"line_start":382,"line_end":382,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":142812,"byte_end":142815,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ `None` if the index is outside the bounds or does not fit into a `usize`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":142820,"byte_end":142897,"line_start":384,"line_end":384,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":942},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":143508,"byte_end":143529,"line_start":398,"line_end":398,"column_start":12,"column_end":33},"name":"index_ignoring_bounds","qualname":"<SampleLayout>::index_ignoring_bounds","value":"pub fn index_ignoring_bounds(&Self, usize, usize, usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the theoretical position of sample (channel, x, y).","sig":null,"attributes":[{"value":"/ Get the theoretical position of sample (channel, x, y).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":143137,"byte_end":143196,"line_start":393,"line_end":393,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":143201,"byte_end":143204,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ The 'check' is for overflow during index calculation, not that it is contained in the","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":143209,"byte_end":143298,"line_start":395,"line_end":395,"column_start":5,"column_end":94}},{"value":"/ image. Two samples may return the same index, even when one of them is out of bounds. This","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":143303,"byte_end":143397,"line_start":396,"line_end":396,"column_start":5,"column_end":99}},{"value":"/ happens when all strides are `0`, i.e. the image is an arbitrarily large monochrome image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":143402,"byte_end":143496,"line_start":397,"line_end":397,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":946},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":144460,"byte_end":144475,"line_start":419,"line_end":419,"column_start":12,"column_end":27},"name":"in_bounds_index","qualname":"<SampleLayout>::in_bounds_index","value":"pub fn in_bounds_index(&Self, u8, u32, u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an index provided it is inbouds.","sig":null,"attributes":[{"value":"/ Get an index provided it is inbouds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":144159,"byte_end":144199,"line_start":414,"line_end":414,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":144204,"byte_end":144207,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ Assumes that the image is backed by some sufficiently large buffer. Then computation can","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":144212,"byte_end":144304,"line_start":416,"line_end":416,"column_start":5,"column_end":97}},{"value":"/ not overflow as we could represent the maximum coordinate. Since overflow is defined either","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":144309,"byte_end":144404,"line_start":417,"line_end":417,"column_start":5,"column_end":100}},{"value":"/ way, this method can not be unsafe.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":144409,"byte_end":144448,"line_start":418,"line_end":418,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":947},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":145003,"byte_end":145012,"line_start":430,"line_end":430,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<SampleLayout>::shrink_to","value":"pub fn shrink_to(&mut Self, u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the image to the minimum of current and given extents.","sig":null,"attributes":[{"value":"/ Shrink the image to the minimum of current and given extents.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":144678,"byte_end":144743,"line_start":425,"line_end":425,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":144748,"byte_end":144751,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ This does not modify the strides, so that the resulting sample buffer may have holes","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":144756,"byte_end":144844,"line_start":427,"line_end":427,"column_start":5,"column_end":93}},{"value":"/ created by the shrinking operation. Shrinking could also lead to an non-aliasing image when","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":144849,"byte_end":144944,"line_start":428,"line_end":428,"column_start":5,"column_end":100}},{"value":"/ samples had aliased each other before.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":144949,"byte_end":144991,"line_start":429,"line_end":429,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":954},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":145685,"byte_end":145696,"line_start":457,"line_end":457,"column_start":12,"column_end":23},"name":"strides_cwh","qualname":"<FlatSamples<Buffer>>::strides_cwh","value":"pub fn strides_cwh(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the strides for indexing matrix-like `[(c, w, h)]`.","sig":null,"attributes":[{"value":"/ Get the strides for indexing matrix-like `[(c, w, h)]`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":145510,"byte_end":145569,"line_start":453,"line_end":453,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":145574,"byte_end":145577,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ For a row-major layout with grouped samples, this tuple is strictly","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":145582,"byte_end":145653,"line_start":455,"line_end":455,"column_start":5,"column_end":76}},{"value":"/ increasing.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":145658,"byte_end":145673,"line_start":456,"line_end":456,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":955},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":145978,"byte_end":145985,"line_start":465,"line_end":465,"column_start":12,"column_end":19},"name":"extents","qualname":"<FlatSamples<Buffer>>::extents","value":"pub fn extents(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the dimensions `(channels, width, height)`.","sig":null,"attributes":[{"value":"/ Get the dimensions `(channels, width, height)`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":145776,"byte_end":145827,"line_start":461,"line_end":461,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":145832,"byte_end":145835,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ The interface is optimized for use with `strides_cwh` instead. The channel extent will be","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":145840,"byte_end":145933,"line_start":463,"line_end":463,"column_start":5,"column_end":98}},{"value":"/ before width and height.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":145938,"byte_end":145966,"line_start":464,"line_end":464,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":956},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":146313,"byte_end":146319,"line_start":473,"line_end":473,"column_start":12,"column_end":18},"name":"bounds","qualname":"<FlatSamples<Buffer>>::bounds","value":"pub fn bounds(&Self) -> (u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Tuple of bounds in the order of coordinate inputs.","sig":null,"attributes":[{"value":"/ Tuple of bounds in the order of coordinate inputs.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":146061,"byte_end":146115,"line_start":469,"line_end":469,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":146120,"byte_end":146123,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ This function should be used whenever working with image coordinates opposed to buffer","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":146128,"byte_end":146218,"line_start":471,"line_end":471,"column_start":5,"column_end":95}},{"value":"/ coordinates. The only difference compared to `extents` is the output type.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":146223,"byte_end":146301,"line_start":472,"line_end":472,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":957},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":146433,"byte_end":146439,"line_start":478,"line_end":478,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<FlatSamples<Buffer>>::as_ref","value":"pub fn as_ref<T>(&Self) -> FlatSamples<&[T]> where Buffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference based version.\n","sig":null,"attributes":[{"value":"/ Get a reference based version.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":146387,"byte_end":146421,"line_start":477,"line_end":477,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":959},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":146713,"byte_end":146719,"line_start":487,"line_end":487,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<FlatSamples<Buffer>>::as_mut","value":"pub fn as_mut<T>(&mut Self) -> FlatSamples<&mut [T]> where Buffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference based version.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference based version.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":146659,"byte_end":146701,"line_start":486,"line_end":486,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":961},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":146998,"byte_end":147004,"line_start":496,"line_end":496,"column_start":12,"column_end":18},"name":"to_vec","qualname":"<FlatSamples<Buffer>>::to_vec","value":"pub fn to_vec<T>(&Self) -> FlatSamples<Vec<T>> where T: Clone,\nBuffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Copy the data into an owned vector.\n","sig":null,"attributes":[{"value":"/ Copy the data into an owned vector.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":146947,"byte_end":146986,"line_start":495,"line_end":495,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":963},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":148277,"byte_end":148287,"line_start":527,"line_end":527,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<FlatSamples<Buffer>>::get_sample","value":"pub fn get_sample<T>(&Self, u8, u32, u32) -> Option<&T> where\nBuffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a single sample.","sig":null,"attributes":[{"value":"/ Get a reference to a single sample.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":147257,"byte_end":147296,"line_start":506,"line_end":506,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":147301,"byte_end":147304,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ This more restrictive than the method based on `std::ops::Index` but guarantees to properly","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":147309,"byte_end":147404,"line_start":508,"line_end":508,"column_start":5,"column_end":100}},{"value":"/ check all bounds and not panic as long as `Buffer::as_ref` does not do so.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":147409,"byte_end":147487,"line_start":509,"line_end":509,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":147492,"byte_end":147495,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":147500,"byte_end":147507,"line_start":511,"line_end":511,"column_start":5,"column_end":12}},{"value":"/ # use image::{RgbImage};","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":147512,"byte_end":147540,"line_start":512,"line_end":512,"column_start":5,"column_end":33}},{"value":"/ let flat = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":147545,"byte_end":147604,"line_start":513,"line_end":513,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":147609,"byte_end":147612,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ // Get the blue channel at (10, 10).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":147617,"byte_end":147657,"line_start":515,"line_end":515,"column_start":5,"column_end":45}},{"value":"/ assert!(flat.get_sample(1, 10, 10).is_some());","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":147662,"byte_end":147712,"line_start":516,"line_end":516,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":147717,"byte_end":147720,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ // There is no alpha channel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":147725,"byte_end":147758,"line_start":518,"line_end":518,"column_start":5,"column_end":38}},{"value":"/ assert!(flat.get_sample(3, 10, 10).is_none());","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":147763,"byte_end":147813,"line_start":519,"line_end":519,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":147818,"byte_end":147825,"line_start":520,"line_end":520,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":147830,"byte_end":147833,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ For cases where a special buffer does not provide `AsRef<[T]>`, consider encapsulating","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":147838,"byte_end":147928,"line_start":522,"line_end":522,"column_start":5,"column_end":95}},{"value":"/ bounds checks with `min_length` in a type similar to `View`. Then you may use","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":147933,"byte_end":148014,"line_start":523,"line_end":523,"column_start":5,"column_end":86}},{"value":"/ `in_bounds_index` as a small speedup over the index calculation of this method which relies","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":148019,"byte_end":148114,"line_start":524,"line_end":524,"column_start":5,"column_end":100}},{"value":"/ on `index_ignoring_bounds` since it can not have a-priori knowledge that the sample","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":148119,"byte_end":148206,"line_start":525,"line_end":525,"column_start":5,"column_end":92}},{"value":"/ coordinate is in fact backed by any memory buffer.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":148211,"byte_end":148265,"line_start":526,"line_end":526,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":966},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":149884,"byte_end":149898,"line_start":560,"line_end":560,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<FlatSamples<Buffer>>::get_mut_sample","value":"pub fn get_mut_sample<T>(&mut Self, u8, u32, u32) -> Option<&mut T> where\nBuffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a single sample.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a single sample.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":148474,"byte_end":148521,"line_start":534,"line_end":534,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":148526,"byte_end":148529,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ This more restrictive than the method based on `std::ops::IndexMut` but guarantees to","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":148534,"byte_end":148623,"line_start":536,"line_end":536,"column_start":5,"column_end":94}},{"value":"/ properly check all bounds and not panic as long as `Buffer::as_ref` does not do so.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":148628,"byte_end":148715,"line_start":537,"line_end":537,"column_start":5,"column_end":92}},{"value":"/ Contrary to conversion to `ViewMut`, this does not require that samples are packed since it","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":148720,"byte_end":148815,"line_start":538,"line_end":538,"column_start":5,"column_end":100}},{"value":"/ does not need to convert samples to a color representation.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":148820,"byte_end":148883,"line_start":539,"line_end":539,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":148888,"byte_end":148891,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":148896,"byte_end":148990,"line_start":541,"line_end":541,"column_start":5,"column_end":99}},{"value":"/ here can in fact modify more than the coordinate in the argument.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":148995,"byte_end":149064,"line_start":542,"line_end":542,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":149069,"byte_end":149072,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":149077,"byte_end":149084,"line_start":544,"line_end":544,"column_start":5,"column_end":12}},{"value":"/ # use image::{RgbImage};","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":149089,"byte_end":149117,"line_start":545,"line_end":545,"column_start":5,"column_end":33}},{"value":"/ let mut flat = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":149122,"byte_end":149185,"line_start":546,"line_end":546,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":149190,"byte_end":149193,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ // Assign some new color to the blue channel at (10, 10).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":149198,"byte_end":149259,"line_start":548,"line_end":548,"column_start":5,"column_end":66}},{"value":"/ *flat.get_mut_sample(1, 10, 10).unwrap() = 255;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":149264,"byte_end":149315,"line_start":549,"line_end":549,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":149320,"byte_end":149323,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ // There is no alpha channel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":149328,"byte_end":149361,"line_start":551,"line_end":551,"column_start":5,"column_end":38}},{"value":"/ assert!(flat.get_mut_sample(3, 10, 10).is_none());","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":149366,"byte_end":149420,"line_start":552,"line_end":552,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":149425,"byte_end":149432,"line_start":553,"line_end":553,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":149437,"byte_end":149440,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ For cases where a special buffer does not provide `AsRef<[T]>`, consider encapsulating","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":149445,"byte_end":149535,"line_start":555,"line_end":555,"column_start":5,"column_end":95}},{"value":"/ bounds checks with `min_length` in a type similar to `View`. Then you may use","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":149540,"byte_end":149621,"line_start":556,"line_end":556,"column_start":5,"column_end":86}},{"value":"/ `in_bounds_index` as a small speedup over the index calculation of this method which relies","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":149626,"byte_end":149721,"line_start":557,"line_end":557,"column_start":5,"column_end":100}},{"value":"/ on `index_ignoring_bounds` since it can not have a-priori knowledge that the sample","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":149726,"byte_end":149813,"line_start":558,"line_end":558,"column_start":5,"column_end":92}},{"value":"/ coordinate is in fact backed by any memory buffer.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":149818,"byte_end":149872,"line_start":559,"line_end":559,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":150562,"byte_end":150569,"line_start":575,"line_end":575,"column_start":12,"column_end":19},"name":"as_view","qualname":"<FlatSamples<Buffer>>::as_view","value":"pub fn as_view<P>(&Self) -> Result<View<&[P::Subpixel], P>, Error> where\nP: Pixel, Buffer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" View this buffer as an image over some type of pixel.","sig":null,"attributes":[{"value":"/ View this buffer as an image over some type of pixel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":150150,"byte_end":150207,"line_start":569,"line_end":569,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":150212,"byte_end":150215,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ This first ensures that all in-bounds coordinates refer to valid indices in the sample","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":150220,"byte_end":150310,"line_start":571,"line_end":571,"column_start":5,"column_end":95}},{"value":"/ buffer. It also checks that the specified pixel format expects the same number of channels","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":150315,"byte_end":150409,"line_start":572,"line_end":572,"column_start":5,"column_end":99}},{"value":"/ that are present in this buffer. Neither are larger nor a smaller number will be accepted.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":150414,"byte_end":150508,"line_start":573,"line_end":573,"column_start":5,"column_end":99}},{"value":"/ There is no automatic conversion.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":150513,"byte_end":150550,"line_start":574,"line_end":574,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":970},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":152146,"byte_end":152170,"line_start":612,"line_end":612,"column_start":12,"column_end":36},"name":"as_view_with_mut_samples","qualname":"<FlatSamples<Buffer>>::as_view_with_mut_samples","value":"pub fn as_view_with_mut_samples<P>(&mut Self)\n-> Result<View<&mut [P::Subpixel], P>, Error> where P: Pixel,\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" View this buffer but keep mutability at a sample level.","sig":null,"attributes":[{"value":"/ View this buffer but keep mutability at a sample level.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":151181,"byte_end":151240,"line_start":597,"line_end":597,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":151245,"byte_end":151248,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ This is similar to `as_view` but subtly different from `as_view_mut`. The resulting type","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":151253,"byte_end":151345,"line_start":599,"line_end":599,"column_start":5,"column_end":97}},{"value":"/ can be used as a `GenericImage` with the same prior invariants needed as for `as_view`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":151350,"byte_end":151441,"line_start":600,"line_end":600,"column_start":5,"column_end":96}},{"value":"/ It can not be used as a mutable `GenericImage` but does not need channels to be packed in","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":151446,"byte_end":151539,"line_start":601,"line_end":601,"column_start":5,"column_end":98}},{"value":"/ their pixel representation.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":151544,"byte_end":151575,"line_start":602,"line_end":602,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":151580,"byte_end":151583,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ This first ensures that all in-bounds coordinates refer to valid indices in the sample","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":151588,"byte_end":151678,"line_start":604,"line_end":604,"column_start":5,"column_end":95}},{"value":"/ buffer. It also checks that the specified pixel format expects the same number of channels","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":151683,"byte_end":151777,"line_start":605,"line_end":605,"column_start":5,"column_end":99}},{"value":"/ that are present in this buffer. Neither are larger nor a smaller number will be accepted.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":151782,"byte_end":151876,"line_start":606,"line_end":606,"column_start":5,"column_end":99}},{"value":"/ There is no automatic conversion.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":151881,"byte_end":151918,"line_start":607,"line_end":607,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":151923,"byte_end":151926,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":151931,"byte_end":152025,"line_start":609,"line_end":609,"column_start":5,"column_end":99}},{"value":"/ for one sample can in fact modify other samples as well. Sometimes exactly this is","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":152030,"byte_end":152116,"line_start":610,"line_end":610,"column_start":5,"column_end":91}},{"value":"/ intended.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":152121,"byte_end":152134,"line_start":611,"line_end":611,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":972},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":153533,"byte_end":153544,"line_start":645,"line_end":645,"column_start":12,"column_end":23},"name":"as_view_mut","qualname":"<FlatSamples<Buffer>>::as_view_mut","value":"pub fn as_view_mut<P>(&mut Self)\n-> Result<ViewMut<&mut [P::Subpixel], P>, Error> where P: Pixel,\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Interpret this buffer as a mutable image.","sig":null,"attributes":[{"value":"/ Interpret this buffer as a mutable image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":152790,"byte_end":152835,"line_start":634,"line_end":634,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":152840,"byte_end":152843,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ To succeed, the pixels in this buffer may not alias each other and the samples of each","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":152848,"byte_end":152938,"line_start":636,"line_end":636,"column_start":5,"column_end":95}},{"value":"/ pixel must be packed (i.e. `channel_stride` is `1`). The number of channels must be","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":152943,"byte_end":153030,"line_start":637,"line_end":637,"column_start":5,"column_end":92}},{"value":"/ consistent with the channel count expected by the pixel format.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":153035,"byte_end":153102,"line_start":638,"line_end":638,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":153107,"byte_end":153110,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ This is similar to an `ImageBuffer` except it is a temporary view that is not normalized as","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":153115,"byte_end":153210,"line_start":640,"line_end":640,"column_start":5,"column_end":100}},{"value":"/ strongly. To get an owning version, consider copying the data into an `ImageBuffer`. This","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":153215,"byte_end":153308,"line_start":641,"line_end":641,"column_start":5,"column_end":98}},{"value":"/ provides many more operations, is possibly faster (if not you may want to open an issue) is","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":153313,"byte_end":153408,"line_start":642,"line_end":642,"column_start":5,"column_end":100}},{"value":"/ generally polished. You can also try to convert this buffer inline, see","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":153413,"byte_end":153488,"line_start":643,"line_end":643,"column_start":5,"column_end":80}},{"value":"/ `ImageBuffer::from_raw`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":153493,"byte_end":153521,"line_start":644,"line_end":644,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":974},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":154541,"byte_end":154549,"line_start":675,"line_end":675,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<FlatSamples<Buffer>>::as_slice","value":"pub fn as_slice<T>(&Self) -> &[T] where Buffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" View the samples as a slice.","sig":null,"attributes":[{"value":"/ View the samples as a slice.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":154317,"byte_end":154349,"line_start":671,"line_end":671,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":154354,"byte_end":154357,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ The slice is not limited to the region of the image and not all sample indices are valid","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":154362,"byte_end":154454,"line_start":673,"line_end":673,"column_start":5,"column_end":97}},{"value":"/ indices into this buffer. See `image_mut_slice` as an alternative.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":154459,"byte_end":154529,"line_start":674,"line_end":674,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":976},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":154860,"byte_end":154872,"line_start":683,"line_end":683,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<FlatSamples<Buffer>>::as_mut_slice","value":"pub fn as_mut_slice<T>(&mut Self) -> &mut [T] where Buffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" View the samples as a slice.","sig":null,"attributes":[{"value":"/ View the samples as a slice.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":154636,"byte_end":154668,"line_start":679,"line_end":679,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":154673,"byte_end":154676,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ The slice is not limited to the region of the image and not all sample indices are valid","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":154681,"byte_end":154773,"line_start":681,"line_end":681,"column_start":5,"column_end":97}},{"value":"/ indices into this buffer. See `image_mut_slice` as an alternative.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":154778,"byte_end":154848,"line_start":682,"line_end":682,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":978},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":155303,"byte_end":155314,"line_start":692,"line_end":692,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<FlatSamples<Buffer>>::image_slice","value":"pub fn image_slice<T>(&Self) -> Option<&[T]> where Buffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":154967,"byte_end":155029,"line_start":687,"line_end":687,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":155034,"byte_end":155037,"line_start":688,"line_end":688,"column_start":5,"column_end":8}},{"value":"/ This may fail when the coordinates in this image are either out-of-bounds of the underlying","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":155042,"byte_end":155137,"line_start":689,"line_end":689,"column_start":5,"column_end":100}},{"value":"/ buffer or can not be represented. Note that the slice may have holes that do not correspond","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":155142,"byte_end":155237,"line_start":690,"line_end":690,"column_start":5,"column_end":100}},{"value":"/ to any sample in the image represented by it.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":155242,"byte_end":155291,"line_start":691,"line_end":691,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":980},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":155731,"byte_end":155746,"line_start":707,"line_end":707,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<FlatSamples<Buffer>>::image_mut_slice","value":"pub fn image_mut_slice<T>(&mut Self) -> Option<&mut [T]> where\nBuffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Mutable portion of the buffer that holds sample values.\n","sig":null,"attributes":[{"value":"/ Mutable portion of the buffer that holds sample values.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":155660,"byte_end":155719,"line_start":706,"line_end":706,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":982},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":156400,"byte_end":156415,"line_start":726,"line_end":726,"column_start":12,"column_end":27},"name":"try_into_buffer","qualname":"<FlatSamples<Buffer>>::try_into_buffer","value":"pub fn try_into_buffer<P>(Self)\n-> Result<ImageBuffer<P, Buffer>, (Error, Self)> where P: Pixel + 'static,\nP::Subpixel: 'static, Buffer: Deref<Target = [P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Move the data into an image buffer.","sig":null,"attributes":[{"value":"/ Move the data into an image buffer.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":156104,"byte_end":156143,"line_start":721,"line_end":721,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":156148,"byte_end":156151,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ This does **not** convert the sample layout. The buffer needs to be in packed row-major form","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":156156,"byte_end":156252,"line_start":723,"line_end":723,"column_start":5,"column_end":101}},{"value":"/ before calling this function. In case of an error, returns the buffer again so that it does","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":156257,"byte_end":156352,"line_start":724,"line_end":724,"column_start":5,"column_end":100}},{"value":"/ not release any allocation.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":156357,"byte_end":156388,"line_start":725,"line_end":725,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":985},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":159251,"byte_end":159261,"line_start":800,"line_end":800,"column_start":12,"column_end":22},"name":"min_length","qualname":"<FlatSamples<Buffer>>::min_length","value":"pub fn min_length(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":157186,"byte_end":157276,"line_start":749,"line_end":749,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":157281,"byte_end":157284,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ This method will allow zero strides, allowing compact representations of monochrome images.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":157289,"byte_end":157384,"line_start":751,"line_end":751,"column_start":5,"column_end":100}},{"value":"/ To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":157389,"byte_end":157479,"line_start":752,"line_end":752,"column_start":5,"column_end":95}},{"value":"/ aliasing and no unindexed samples) this is `width*height*channels`. But for both of the","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":157484,"byte_end":157575,"line_start":753,"line_end":753,"column_start":5,"column_end":96}},{"value":"/ other cases, the reasoning is slightly more involved.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":157580,"byte_end":157637,"line_start":754,"line_end":754,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":157642,"byte_end":157645,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ # Explanation","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":157650,"byte_end":157667,"line_start":756,"line_end":756,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":157672,"byte_end":157675,"line_start":757,"line_end":757,"column_start":5,"column_end":8}},{"value":"/ Note that there is a difference between `min_length` and the index of the sample","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":157680,"byte_end":157764,"line_start":758,"line_end":758,"column_start":5,"column_end":89}},{"value":"/ 'one-past-the-end`. This is due to strides that may be larger than the dimension below.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":157769,"byte_end":157860,"line_start":759,"line_end":759,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":157865,"byte_end":157868,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ ## Example with holes","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":157873,"byte_end":157898,"line_start":761,"line_end":761,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":157903,"byte_end":157906,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ Let's look at an example of a grayscale image with","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":157911,"byte_end":157965,"line_start":763,"line_end":763,"column_start":5,"column_end":59}},{"value":"/ * `width_stride = 1`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":157970,"byte_end":157994,"line_start":764,"line_end":764,"column_start":5,"column_end":29}},{"value":"/ * `width = 2`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":157999,"byte_end":158016,"line_start":765,"line_end":765,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 3`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":158021,"byte_end":158046,"line_start":766,"line_end":766,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":158051,"byte_end":158069,"line_start":767,"line_end":767,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":158074,"byte_end":158077,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":158082,"byte_end":158093,"line_start":769,"line_end":769,"column_start":5,"column_end":16}},{"value":"/ | x x   | x x m | $","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":158098,"byte_end":158121,"line_start":770,"line_end":770,"column_start":5,"column_end":28}},{"value":"/  min_length m ^","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":158126,"byte_end":158145,"line_start":771,"line_end":771,"column_start":5,"column_end":24}},{"value":"/                   ^ one-past-the-end $","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":158150,"byte_end":158192,"line_start":772,"line_end":772,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":158197,"byte_end":158204,"line_start":773,"line_end":773,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":158209,"byte_end":158212,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ The difference is also extreme for empty images with large strides. The one-past-the-end","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":158217,"byte_end":158309,"line_start":775,"line_end":775,"column_start":5,"column_end":97}},{"value":"/ sample index is still as large as the largest of these strides while `min_length = 0`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":158314,"byte_end":158404,"line_start":776,"line_end":776,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":158409,"byte_end":158412,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ ## Example with aliasing","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":158417,"byte_end":158445,"line_start":778,"line_end":778,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":158450,"byte_end":158453,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ The concept gets even more important when you allow samples to alias each other. Here we","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":158458,"byte_end":158550,"line_start":780,"line_end":780,"column_start":5,"column_end":97}},{"value":"/ have the buffer of a small grayscale image where this is the case, this time we will first","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":158555,"byte_end":158649,"line_start":781,"line_end":781,"column_start":5,"column_end":99}},{"value":"/ show the buffer and then the individual rows below.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":158654,"byte_end":158709,"line_start":782,"line_end":782,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":158714,"byte_end":158717,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ * `width_stride = 1`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":158722,"byte_end":158746,"line_start":784,"line_end":784,"column_start":5,"column_end":29}},{"value":"/ * `width = 3`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":158751,"byte_end":158768,"line_start":785,"line_end":785,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 2`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":158773,"byte_end":158798,"line_start":786,"line_end":786,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":158803,"byte_end":158821,"line_start":787,"line_end":787,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":158826,"byte_end":158829,"line_start":788,"line_end":788,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":158834,"byte_end":158845,"line_start":789,"line_end":789,"column_start":5,"column_end":16}},{"value":"/  1 2 3 4 5 m","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":158850,"byte_end":158866,"line_start":790,"line_end":790,"column_start":5,"column_end":21}},{"value":"/ |1 2 3| row one","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":158871,"byte_end":158890,"line_start":791,"line_end":791,"column_start":5,"column_end":24}},{"value":"/     |3 4 5| row two","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":158895,"byte_end":158918,"line_start":792,"line_end":792,"column_start":5,"column_end":28}},{"value":"/            ^ m min_length","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":158923,"byte_end":158952,"line_start":793,"line_end":793,"column_start":5,"column_end":34}},{"value":"/          ^ ??? one-past-the-end","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":158957,"byte_end":158992,"line_start":794,"line_end":794,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":158997,"byte_end":159004,"line_start":795,"line_end":795,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":159009,"byte_end":159012,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ This time 'one-past-the-end' is not even simply the largest stride times the extent of its","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":159017,"byte_end":159111,"line_start":797,"line_end":797,"column_start":5,"column_end":99}},{"value":"/ dimension. That still points inside the image because `height*height_stride = 4` but also","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":159116,"byte_end":159209,"line_start":798,"line_end":798,"column_start":5,"column_end":98}},{"value":"/ `index_of(1, 2) = 4`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":159214,"byte_end":159239,"line_start":799,"line_end":799,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":986},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":159398,"byte_end":159402,"line_start":805,"line_end":805,"column_start":12,"column_end":16},"name":"fits","qualname":"<FlatSamples<Buffer>>::fits","value":"pub fn fits(&Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer of length `len` is large enough.\n","sig":null,"attributes":[{"value":"/ Check if a buffer of length `len` is large enough.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":159332,"byte_end":159386,"line_start":804,"line_end":804,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":987},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":159823,"byte_end":159842,"line_start":814,"line_end":814,"column_start":12,"column_end":31},"name":"has_aliased_samples","qualname":"<FlatSamples<Buffer>>::has_aliased_samples","value":"pub fn has_aliased_samples(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any samples aliasing each other.","sig":null,"attributes":[{"value":"/ If there are any samples aliasing each other.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":159473,"byte_end":159522,"line_start":809,"line_end":809,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":159527,"byte_end":159530,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ If this is not the case, it would always be safe to allow mutable access to two different","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":159535,"byte_end":159628,"line_start":811,"line_end":811,"column_start":5,"column_end":98}},{"value":"/ samples at the same time. Otherwise, this operation would need additional checks. When one","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":159633,"byte_end":159727,"line_start":812,"line_end":812,"column_start":5,"column_end":99}},{"value":"/ dimension overflows `usize` with its stride we also consider this aliasing.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":159732,"byte_end":159811,"line_start":813,"line_end":813,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":988},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":160423,"byte_end":160432,"line_start":825,"line_end":825,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<FlatSamples<Buffer>>::is_normal","value":"pub fn is_normal(&Self, NormalForm) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer fulfills the requirements of a normal form.","sig":null,"attributes":[{"value":"/ Check if a buffer fulfills the requirements of a normal form.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":159913,"byte_end":159978,"line_start":818,"line_end":818,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":159983,"byte_end":159986,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ Certain conversions have preconditions on the structure of the sample buffer that are not","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":159991,"byte_end":160084,"line_start":820,"line_end":820,"column_start":5,"column_end":98}},{"value":"/ captured (by design) by the type system. These are then checked before the conversion. Such","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":160089,"byte_end":160184,"line_start":821,"line_end":821,"column_start":5,"column_end":100}},{"value":"/ checks can all be done in constant time and will not inspect the buffer content. You can","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":160189,"byte_end":160281,"line_start":822,"line_end":822,"column_start":5,"column_end":97}},{"value":"/ perform these checks yourself when the conversion is not required at this moment but maybe","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":160286,"byte_end":160380,"line_start":823,"line_end":823,"column_start":5,"column_end":99}},{"value":"/ still performed later.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":160385,"byte_end":160411,"line_start":824,"line_end":824,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":989},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":160857,"byte_end":160866,"line_start":834,"line_end":834,"column_start":12,"column_end":21},"name":"in_bounds","qualname":"<FlatSamples<Buffer>>::in_bounds","value":"pub fn in_bounds(&Self, u8, u32, u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the pixel and the channel index are in bounds.","sig":null,"attributes":[{"value":"/ Check that the pixel and the channel index are in bounds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":160515,"byte_end":160576,"line_start":829,"line_end":829,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":160581,"byte_end":160584,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ An in-bound coordinate does not yet guarantee that the corresponding calculation of a","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":160589,"byte_end":160678,"line_start":831,"line_end":831,"column_start":5,"column_end":94}},{"value":"/ buffer index does not overflow. However, if such a buffer large enough to hold all samples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":160683,"byte_end":160777,"line_start":832,"line_end":832,"column_start":5,"column_end":99}},{"value":"/ actually exists in memory, this porperty of course follows.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":160782,"byte_end":160845,"line_start":833,"line_end":833,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":990},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":161116,"byte_end":161121,"line_start":841,"line_end":841,"column_start":12,"column_end":17},"name":"index","qualname":"<FlatSamples<Buffer>>::index","value":"pub fn index(&Self, u8, u32, u32) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the index of a particular sample.","sig":null,"attributes":[{"value":"/ Resolve the index of a particular sample.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":160969,"byte_end":161014,"line_start":838,"line_end":838,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":161019,"byte_end":161022,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ `None` if the index is outside the bounds or does not fit into a `usize`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":161027,"byte_end":161104,"line_start":840,"line_end":840,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":991},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":161600,"byte_end":161621,"line_start":850,"line_end":850,"column_start":12,"column_end":33},"name":"index_ignoring_bounds","qualname":"<FlatSamples<Buffer>>::index_ignoring_bounds","value":"pub fn index_ignoring_bounds(&Self, usize, usize, usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the theoretical position of sample (x, y, channel).","sig":null,"attributes":[{"value":"/ Get the theoretical position of sample (x, y, channel).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":161229,"byte_end":161288,"line_start":845,"line_end":845,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":161293,"byte_end":161296,"line_start":846,"line_end":846,"column_start":5,"column_end":8}},{"value":"/ The 'check' is for overflow during index calculation, not that it is contained in the","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":161301,"byte_end":161390,"line_start":847,"line_end":847,"column_start":5,"column_end":94}},{"value":"/ image. Two samples may return the same index, even when one of them is out of bounds. This","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":161395,"byte_end":161489,"line_start":848,"line_end":848,"column_start":5,"column_end":99}},{"value":"/ happens when all strides are `0`, i.e. the image is an arbitrarily large monochrome image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":161494,"byte_end":161588,"line_start":849,"line_end":849,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":992},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":162053,"byte_end":162068,"line_start":859,"line_end":859,"column_start":12,"column_end":27},"name":"in_bounds_index","qualname":"<FlatSamples<Buffer>>::in_bounds_index","value":"pub fn in_bounds_index(&Self, u8, u32, u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an index provided it is inbouds.","sig":null,"attributes":[{"value":"/ Get an index provided it is inbouds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":161752,"byte_end":161792,"line_start":854,"line_end":854,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":161797,"byte_end":161800,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ Assumes that the image is backed by some sufficiently large buffer. Then computation can","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":161805,"byte_end":161897,"line_start":856,"line_end":856,"column_start":5,"column_end":97}},{"value":"/ not overflow as we could represent the maximum coordinate. Since overflow is defined either","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":161902,"byte_end":161997,"line_start":857,"line_end":857,"column_start":5,"column_end":100}},{"value":"/ way, this method can not be unsafe.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":162002,"byte_end":162041,"line_start":858,"line_end":858,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":993},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":162503,"byte_end":162512,"line_start":868,"line_end":868,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<FlatSamples<Buffer>>::shrink_to","value":"pub fn shrink_to(&mut Self, u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the image to the minimum of current and given extents.","sig":null,"attributes":[{"value":"/ Shrink the image to the minimum of current and given extents.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":162178,"byte_end":162243,"line_start":863,"line_end":863,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":162248,"byte_end":162251,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ This does not modify the strides, so that the resulting sample buffer may have holes","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":162256,"byte_end":162344,"line_start":865,"line_end":865,"column_start":5,"column_end":93}},{"value":"/ created by the shrinking operation. Shrinking could also lead to an non-aliasing image when","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":162349,"byte_end":162444,"line_start":866,"line_end":866,"column_start":5,"column_end":100}},{"value":"/ samples had aliased each other before.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":162449,"byte_end":162491,"line_start":867,"line_end":867,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":997},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":163398,"byte_end":163412,"line_start":894,"line_end":894,"column_start":12,"column_end":26},"name":"with_monocolor","qualname":"<FlatSamples<&'buf [Subpixel]>>::with_monocolor","value":"pub fn with_monocolor<P>(&'buf P, u32, u32) -> Self where P: Pixel<Subpixel =\nSubpixel>, Subpixel: Primitive","parent":null,"children":[],"decl_id":null,"docs":" Create a monocolor image from a single pixel.","sig":null,"attributes":[{"value":"/ Create a monocolor image from a single pixel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":162686,"byte_end":162735,"line_start":874,"line_end":874,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":162740,"byte_end":162743,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ This can be used as a very cheap source of a `GenericImageView` with an arbitrary number of","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":162748,"byte_end":162843,"line_start":876,"line_end":876,"column_start":5,"column_end":100}},{"value":"/ pixels of a single color, without any dynamic allocation.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":162848,"byte_end":162909,"line_start":877,"line_end":877,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":162914,"byte_end":162917,"line_start":878,"line_end":878,"column_start":5,"column_end":8}},{"value":"/ ## Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":162922,"byte_end":162937,"line_start":879,"line_end":879,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":162942,"byte_end":162945,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":162950,"byte_end":162957,"line_start":881,"line_end":881,"column_start":5,"column_end":12}},{"value":"/ # fn paint_something<T>(_: T) {}","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":162962,"byte_end":162998,"line_start":882,"line_end":882,"column_start":5,"column_end":41}},{"value":"/ use image::{flat::FlatSamples, GenericImage, RgbImage, Rgb};","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":163003,"byte_end":163067,"line_start":883,"line_end":883,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":163072,"byte_end":163075,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ let background = Rgb([20, 20, 20]);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":163080,"byte_end":163119,"line_start":885,"line_end":885,"column_start":5,"column_end":44}},{"value":"/ let bg = FlatSamples::with_monocolor(&background, 200, 200);;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":163124,"byte_end":163189,"line_start":886,"line_end":886,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":163194,"byte_end":163197,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/ let mut image = RgbImage::new(200, 200);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":163202,"byte_end":163246,"line_start":888,"line_end":888,"column_start":5,"column_end":49}},{"value":"/ paint_something(&mut image);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":163251,"byte_end":163283,"line_start":889,"line_end":889,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":163288,"byte_end":163291,"line_start":890,"line_end":890,"column_start":5,"column_end":8}},{"value":"/ // Reset the canvas","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":163296,"byte_end":163319,"line_start":891,"line_end":891,"column_start":5,"column_end":28}},{"value":"/ image.copy_from(&bg.as_view().unwrap(), 0, 0);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":163324,"byte_end":163374,"line_start":892,"line_end":892,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":163379,"byte_end":163386,"line_start":893,"line_end":893,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":2614},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":164617,"byte_end":164621,"line_start":929,"line_end":929,"column_start":12,"column_end":16},"name":"View","qualname":"::flat::View","value":"View {  }","parent":null,"children":[{"krate":0,"index":2617},{"krate":0,"index":2618}],"decl_id":null,"docs":" A flat buffer that can be used as an image view.","sig":null,"attributes":[{"value":"/ A flat buffer that can be used as an image view.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":163915,"byte_end":163967,"line_start":914,"line_end":914,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":163968,"byte_end":163971,"line_start":915,"line_end":915,"column_start":1,"column_end":4}},{"value":"/ This is a nearly trivial wrapper around a buffer but at least sanitizes by checking the buffer","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":163972,"byte_end":164070,"line_start":916,"line_end":916,"column_start":1,"column_end":99}},{"value":"/ length first and constraining the pixel type.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":164071,"byte_end":164120,"line_start":917,"line_end":917,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":164121,"byte_end":164124,"line_start":918,"line_end":918,"column_start":1,"column_end":4}},{"value":"/ Note that this does not eliminate panics as the `AsRef<[T]>` implementation of `Buffer` may be","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":164125,"byte_end":164223,"line_start":919,"line_end":919,"column_start":1,"column_end":99}},{"value":"/ unreliable, i.e. return different buffers at different times. This of course is a non-issue for","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":164224,"byte_end":164323,"line_start":920,"line_end":920,"column_start":1,"column_end":100}},{"value":"/ all common collections where the bounds check once must be enough.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":164324,"byte_end":164394,"line_start":921,"line_end":921,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":164395,"byte_end":164398,"line_start":922,"line_end":922,"column_start":1,"column_end":4}},{"value":"/ # Inner invariants","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":164399,"byte_end":164421,"line_start":923,"line_end":923,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":164422,"byte_end":164425,"line_start":924,"line_end":924,"column_start":1,"column_end":4}},{"value":"/ * For all indices inside bounds, the corresponding index is valid in the buffer","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":164426,"byte_end":164509,"line_start":925,"line_end":925,"column_start":1,"column_end":84}},{"value":"/ * `P::channel_count()` agrees with `self.inner.layout.channels`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":164510,"byte_end":164577,"line_start":926,"line_end":926,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":164578,"byte_end":164581,"line_start":927,"line_end":927,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2627},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":165467,"byte_end":165474,"line_start":952,"line_end":952,"column_start":12,"column_end":19},"name":"ViewMut","qualname":"::flat::ViewMut","value":"ViewMut {  }","parent":null,"children":[{"krate":0,"index":2630},{"krate":0,"index":2631}],"decl_id":null,"docs":" A mutable owning version of a flat buffer.","sig":null,"attributes":[{"value":"/ A mutable owning version of a flat buffer.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":164745,"byte_end":164791,"line_start":937,"line_end":937,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":164792,"byte_end":164795,"line_start":938,"line_end":938,"column_start":1,"column_end":4}},{"value":"/ While this wraps a buffer similar to `ImageBuffer`, this is mostly intended as a utility. The","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":164796,"byte_end":164893,"line_start":939,"line_end":939,"column_start":1,"column_end":98}},{"value":"/ library endorsed normalized representation is still `ImageBuffer`. Also, the implementation of","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":164894,"byte_end":164992,"line_start":940,"line_end":940,"column_start":1,"column_end":99}},{"value":"/ `AsMut<[P::Subpixel]>` must always yield the same buffer. Therefore there is no public way to","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":164993,"byte_end":165090,"line_start":941,"line_end":941,"column_start":1,"column_end":98}},{"value":"/ construct this with an owning buffer.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":165091,"byte_end":165132,"line_start":942,"line_end":942,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":165133,"byte_end":165136,"line_start":943,"line_end":943,"column_start":1,"column_end":4}},{"value":"/ # Inner invariants","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":165137,"byte_end":165159,"line_start":944,"line_end":944,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":165160,"byte_end":165163,"line_start":945,"line_end":945,"column_start":1,"column_end":4}},{"value":"/ * For all indices inside bounds, the corresponding index is valid in the buffer","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":165164,"byte_end":165247,"line_start":946,"line_end":946,"column_start":1,"column_end":84}},{"value":"/ * There is no aliasing of samples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":165248,"byte_end":165285,"line_start":947,"line_end":947,"column_start":1,"column_end":38}},{"value":"/ * The samples are packed, i.e. `self.inner.layout.sample_stride == 1`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":165286,"byte_end":165359,"line_start":948,"line_end":948,"column_start":1,"column_end":74}},{"value":"/ * `P::channel_count()` agrees with `self.inner.layout.channels`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":165360,"byte_end":165427,"line_start":949,"line_end":949,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":165428,"byte_end":165431,"line_start":950,"line_end":950,"column_start":1,"column_end":4}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2641},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":166182,"byte_end":166190,"line_start":971,"line_end":971,"column_start":5,"column_end":13},"name":"TooLarge","qualname":"::flat::Error::TooLarge","value":"Error::TooLarge","parent":{"krate":0,"index":2640},"children":[],"decl_id":null,"docs":" The represented image was too large.","sig":null,"attributes":[{"value":"/ The represented image was too large.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":166059,"byte_end":166099,"line_start":968,"line_end":968,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":166104,"byte_end":166107,"line_start":969,"line_end":969,"column_start":5,"column_end":8}},{"value":"/ The optional value denotes a possibly accepted maximal bound.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":166112,"byte_end":166177,"line_start":970,"line_end":970,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2643},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":166347,"byte_end":166365,"line_start":976,"line_end":976,"column_start":5,"column_end":23},"name":"NormalFormRequired","qualname":"::flat::Error::NormalFormRequired","value":"Error::NormalFormRequired(NormalForm)","parent":{"krate":0,"index":2640},"children":[],"decl_id":null,"docs":" The represented image can not use this representation.","sig":null,"attributes":[{"value":"/ The represented image can not use this representation.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":166197,"byte_end":166255,"line_start":973,"line_end":973,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":166260,"byte_end":166263,"line_start":974,"line_end":974,"column_start":5,"column_end":8}},{"value":"/ Has an additional value of the normalized form that would be accepted.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":166268,"byte_end":166342,"line_start":975,"line_end":975,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2646},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":166974,"byte_end":166984,"line_start":987,"line_end":987,"column_start":5,"column_end":15},"name":"WrongColor","qualname":"::flat::Error::WrongColor","value":"Error::WrongColor(ColorType)","parent":{"krate":0,"index":2640},"children":[],"decl_id":null,"docs":" The color format did not match the channel count.","sig":null,"attributes":[{"value":"/ The color format did not match the channel count.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":166384,"byte_end":166437,"line_start":978,"line_end":978,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":166442,"byte_end":166445,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ In some cases you might be able to fix this by lowering the reported pixel count of the","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":166450,"byte_end":166541,"line_start":980,"line_end":980,"column_start":5,"column_end":96}},{"value":"/ buffer without touching the strides.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":166546,"byte_end":166586,"line_start":981,"line_end":981,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":166591,"byte_end":166594,"line_start":982,"line_end":982,"column_start":5,"column_end":8}},{"value":"/ In very special circumstances you *may* do the opposite. This is **VERY** dangerous but not","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":166599,"byte_end":166694,"line_start":983,"line_end":983,"column_start":5,"column_end":100}},{"value":"/ directly memory unsafe although that will likely alias pixels. One scenario is when you","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":166699,"byte_end":166790,"line_start":984,"line_end":984,"column_start":5,"column_end":96}},{"value":"/ want to construct an `Rgba` image but have only 3 bytes per pixel and for some reason don't","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":166795,"byte_end":166890,"line_start":985,"line_end":985,"column_start":5,"column_end":100}},{"value":"/ care about the value of the alpha channel even though you need `Rgba`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":166895,"byte_end":166969,"line_start":986,"line_end":986,"column_start":5,"column_end":79}}]},{"kind":"Enum","id":{"krate":0,"index":2640},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":166047,"byte_end":166052,"line_start":967,"line_end":967,"column_start":10,"column_end":15},"name":"Error","qualname":"::flat::Error","value":"pub enum Error {\n    TooLarge,\n    NormalFormRequired(NormalForm),\n    WrongColor(ColorType),\n}","parent":null,"children":[{"krate":0,"index":2641},{"krate":0,"index":2643},{"krate":0,"index":2646}],"decl_id":null,"docs":" Denotes invalid flat sample buffers when trying to convert to stricter types.","sig":null,"attributes":[{"value":"/ Denotes invalid flat sample buffers when trying to convert to stricter types.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":165598,"byte_end":165679,"line_start":960,"line_end":960,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":165680,"byte_end":165683,"line_start":961,"line_end":961,"column_start":1,"column_end":4}},{"value":"/ The biggest use case being `ImageBuffer` which expects closely packed","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":165684,"byte_end":165757,"line_start":962,"line_end":962,"column_start":1,"column_end":74}},{"value":"/ samples in a row major matrix representation. But this error type may be","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":165758,"byte_end":165834,"line_start":963,"line_end":963,"column_start":1,"column_end":77}},{"value":"/ resused for other import functions. A more versatile user may also try to","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":165835,"byte_end":165912,"line_start":964,"line_end":964,"column_start":1,"column_end":78}},{"value":"/ correct the underlying representation depending on the error variant.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":165913,"byte_end":165986,"line_start":965,"line_end":965,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2665},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":167483,"byte_end":167492,"line_start":1000,"line_end":1000,"column_start":5,"column_end":14},"name":"Unaliased","qualname":"::flat::NormalForm::Unaliased","value":"NormalForm::Unaliased","parent":{"krate":0,"index":2664},"children":[],"decl_id":null,"docs":" No pixel aliases another.","sig":null,"attributes":[{"value":"/ No pixel aliases another.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":167260,"byte_end":167289,"line_start":996,"line_end":996,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":167294,"byte_end":167297,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ Unaliased also guarantees that all index calculations in the image bounds using","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":167302,"byte_end":167385,"line_start":998,"line_end":998,"column_start":5,"column_end":88}},{"value":"/ `dim_index*dim_stride` (such as `x*width_stride + y*height_stride`) do not overflow.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":167390,"byte_end":167478,"line_start":999,"line_end":999,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2667},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":167722,"byte_end":167733,"line_start":1006,"line_end":1006,"column_start":5,"column_end":16},"name":"PixelPacked","qualname":"::flat::NormalForm::PixelPacked","value":"NormalForm::PixelPacked","parent":{"krate":0,"index":2664},"children":[],"decl_id":null,"docs":" At least pixels are packed.","sig":null,"attributes":[{"value":"/ At least pixels are packed.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":167499,"byte_end":167530,"line_start":1002,"line_end":1002,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":167535,"byte_end":167538,"line_start":1003,"line_end":1003,"column_start":5,"column_end":8}},{"value":"/ Images of these types can wrap `[T]`-slices into the standard color types. This is a","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":167543,"byte_end":167631,"line_start":1004,"line_end":1004,"column_start":5,"column_end":93}},{"value":"/ precondition for `GenericImage` which requires by-reference access to pixels.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":167636,"byte_end":167717,"line_start":1005,"line_end":1005,"column_start":5,"column_end":86}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2669},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":168017,"byte_end":168028,"line_start":1013,"line_end":1013,"column_start":5,"column_end":16},"name":"ImagePacked","qualname":"::flat::NormalForm::ImagePacked","value":"NormalForm::ImagePacked","parent":{"krate":0,"index":2664},"children":[],"decl_id":null,"docs":" All samples are packed.","sig":null,"attributes":[{"value":"/ All samples are packed.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":167740,"byte_end":167767,"line_start":1008,"line_end":1008,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":167772,"byte_end":167775,"line_start":1009,"line_end":1009,"column_start":5,"column_end":8}},{"value":"/ This is orthogonal to `PixelPacked`. It requires that there are no holes in the image but","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":167780,"byte_end":167873,"line_start":1010,"line_end":1010,"column_start":5,"column_end":98}},{"value":"/ it is not necessary that the pixel samples themselves are adjacent. An example of this","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":167878,"byte_end":167968,"line_start":1011,"line_end":1011,"column_start":5,"column_end":95}},{"value":"/ behaviour is a planar image layout.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":167973,"byte_end":168012,"line_start":1012,"line_end":1012,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2671},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":168238,"byte_end":168252,"line_start":1019,"line_end":1019,"column_start":5,"column_end":19},"name":"RowMajorPacked","qualname":"::flat::NormalForm::RowMajorPacked","value":"NormalForm::RowMajorPacked","parent":{"krate":0,"index":2664},"children":[],"decl_id":null,"docs":" The samples are in row-major form and all samples are packed.","sig":null,"attributes":[{"value":"/ The samples are in row-major form and all samples are packed.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":168035,"byte_end":168100,"line_start":1015,"line_end":1015,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":168105,"byte_end":168108,"line_start":1016,"line_end":1016,"column_start":5,"column_end":8}},{"value":"/ In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":168113,"byte_end":168206,"line_start":1017,"line_end":1017,"column_start":5,"column_end":98}},{"value":"/ in row-major form.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":168211,"byte_end":168233,"line_start":1018,"line_end":1018,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2673},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":168468,"byte_end":168485,"line_start":1025,"line_end":1025,"column_start":5,"column_end":22},"name":"ColumnMajorPacked","qualname":"::flat::NormalForm::ColumnMajorPacked","value":"NormalForm::ColumnMajorPacked","parent":{"krate":0,"index":2664},"children":[],"decl_id":null,"docs":" The samples are in column-major form and all samples are packed.","sig":null,"attributes":[{"value":"/ The samples are in column-major form and all samples are packed.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":168259,"byte_end":168327,"line_start":1021,"line_end":1021,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":168332,"byte_end":168335,"line_start":1022,"line_end":1022,"column_start":5,"column_end":8}},{"value":"/ In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":168340,"byte_end":168433,"line_start":1023,"line_end":1023,"column_start":5,"column_end":98}},{"value":"/ in column-major form.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":168438,"byte_end":168463,"line_start":1024,"line_end":1024,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":2664},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":167243,"byte_end":167253,"line_start":995,"line_end":995,"column_start":10,"column_end":20},"name":"NormalForm","qualname":"::flat::NormalForm","value":"pub enum NormalForm {\n    Unaliased,\n    PixelPacked,\n    ImagePacked,\n    RowMajorPacked,\n    ColumnMajorPacked,\n}","parent":null,"children":[{"krate":0,"index":2665},{"krate":0,"index":2667},{"krate":0,"index":2669},{"krate":0,"index":2671},{"krate":0,"index":2673}],"decl_id":null,"docs":" Different normal forms of buffers.","sig":null,"attributes":[{"value":"/ Different normal forms of buffers.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":167000,"byte_end":167038,"line_start":990,"line_end":990,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":167039,"byte_end":167042,"line_start":991,"line_end":991,"column_start":1,"column_end":4}},{"value":"/ A normal form is an unaliased buffer with some additional constraints.  The `ÌmageBuffer` uses","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":167043,"byte_end":167142,"line_start":992,"line_end":992,"column_start":1,"column_end":99}},{"value":"/ row major form with packed samples.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":167143,"byte_end":167182,"line_start":993,"line_end":993,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1002},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":168693,"byte_end":168703,"line_start":1035,"line_end":1035,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<View<Buffer, P>>::into_inner","value":"pub fn into_inner(Self) -> FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Take out the sample buffer.","sig":null,"attributes":[{"value":"/ Take out the sample buffer.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":168574,"byte_end":168605,"line_start":1032,"line_end":1032,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":168610,"byte_end":168613,"line_start":1033,"line_end":1033,"column_start":5,"column_end":8}},{"value":"/ Gives up the normalization invariants on the buffer format.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":168618,"byte_end":168681,"line_start":1034,"line_end":1034,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1003},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":169186,"byte_end":169190,"line_start":1045,"line_end":1045,"column_start":12,"column_end":16},"name":"flat","qualname":"<View<Buffer, P>>::flat","value":"pub fn flat(&Self) -> &FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner sample descriptor.","sig":null,"attributes":[{"value":"/ Get a reference on the inner sample descriptor.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":168765,"byte_end":168816,"line_start":1039,"line_end":1039,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":168821,"byte_end":168824,"line_start":1040,"line_end":1040,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counterpart as modifying the buffer format, including strides and","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":168829,"byte_end":168918,"line_start":1041,"line_end":1041,"column_start":5,"column_end":94}},{"value":"/ lengths, could invalidate the accessibility invariants of the `View`. It is not specified","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":168923,"byte_end":169016,"line_start":1042,"line_end":1042,"column_start":5,"column_end":98}},{"value":"/ if the inner buffer is the same as the buffer of the image from which this view was","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":169021,"byte_end":169108,"line_start":1043,"line_end":1043,"column_start":5,"column_end":92}},{"value":"/ created. It might have been truncated as an optimization.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":169113,"byte_end":169174,"line_start":1044,"line_end":1044,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1004},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":169469,"byte_end":169476,"line_start":1053,"line_end":1053,"column_start":12,"column_end":19},"name":"samples","qualname":"<View<Buffer, P>>::samples","value":"pub fn samples(&Self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner buffer.","sig":null,"attributes":[{"value":"/ Get a reference on the inner buffer.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":169255,"byte_end":169295,"line_start":1049,"line_end":1049,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":169300,"byte_end":169303,"line_start":1050,"line_end":1050,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counter part since it is not intended to allow you to reassign the","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":169308,"byte_end":169398,"line_start":1051,"line_end":1051,"column_start":5,"column_end":95}},{"value":"/ buffer or otherwise change its size or properties.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":169403,"byte_end":169457,"line_start":1052,"line_end":1052,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1005},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":169795,"byte_end":169805,"line_start":1061,"line_end":1061,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<View<Buffer, P>>::get_sample","value":"pub fn get_sample(&Self, u8, u32, u32) -> Option<&P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a selected subpixel if it is in-bounds.","sig":null,"attributes":[{"value":"/ Get a reference to a selected subpixel if it is in-bounds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":169536,"byte_end":169598,"line_start":1057,"line_end":1057,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":169603,"byte_end":169606,"line_start":1058,"line_end":1058,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":169611,"byte_end":169701,"line_start":1059,"line_end":1059,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":169706,"byte_end":169783,"line_start":1060,"line_end":1060,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1006},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":170679,"byte_end":170693,"line_start":1079,"line_end":1079,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<View<Buffer, P>>::get_mut_sample","value":"pub fn get_mut_sample(&mut Self, u8, u32, u32) -> Option<&mut P::Subpixel>\nwhere Buffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a selected subpixel if it is in-bounds.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a selected subpixel if it is in-bounds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":170137,"byte_end":170207,"line_start":1071,"line_end":1071,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":170212,"byte_end":170215,"line_start":1072,"line_end":1072,"column_start":5,"column_end":8}},{"value":"/ This is relevant only when constructed with `FlatSamples::as_view_with_mut_samples`.  This","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":170220,"byte_end":170314,"line_start":1073,"line_end":1073,"column_start":5,"column_end":99}},{"value":"/ method will return `None` when the sample is out-of-bounds. All errors that could occur due","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":170319,"byte_end":170414,"line_start":1074,"line_end":1074,"column_start":5,"column_end":100}},{"value":"/ to overflow have been eliminated while construction the `View`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":170419,"byte_end":170486,"line_start":1075,"line_end":1075,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":170491,"byte_end":170494,"line_start":1076,"line_end":1076,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":170499,"byte_end":170593,"line_start":1077,"line_end":1077,"column_start":5,"column_end":99}},{"value":"/ here can in fact modify more than the coordinate in the argument.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":170598,"byte_end":170667,"line_start":1078,"line_end":1078,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1007},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":171270,"byte_end":171280,"line_start":1094,"line_end":1094,"column_start":12,"column_end":22},"name":"min_length","qualname":"<View<Buffer, P>>::min_length","value":"pub fn min_length(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":171088,"byte_end":171178,"line_start":1091,"line_end":1091,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":171183,"byte_end":171186,"line_start":1092,"line_end":1092,"column_start":5,"column_end":8}},{"value":"/ See `FlatSamples::min_length`. This method will always succeed.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":171191,"byte_end":171258,"line_start":1093,"line_end":1093,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1008},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":171614,"byte_end":171625,"line_start":1102,"line_end":1102,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<View<Buffer, P>>::image_slice","value":"pub fn image_slice(&Self) -> &[P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":171351,"byte_end":171413,"line_start":1098,"line_end":1098,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":171418,"byte_end":171421,"line_start":1099,"line_end":1099,"column_start":5,"column_end":8}},{"value":"/ While this can not fail–the validity of all coordinates has been validated during the","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":171426,"byte_end":171517,"line_start":1100,"line_end":1100,"column_start":5,"column_end":94}},{"value":"/ conversion from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":171522,"byte_end":171602,"line_start":1101,"line_end":1101,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1009},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":172082,"byte_end":172097,"line_start":1111,"line_end":1111,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<View<Buffer, P>>::image_mut_slice","value":"pub fn image_mut_slice(&mut Self) -> &mut [P::Subpixel] where\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return the mutable portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the mutable portion of the buffer that holds sample values.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":171718,"byte_end":171788,"line_start":1106,"line_end":1106,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":171793,"byte_end":171796,"line_start":1107,"line_end":1107,"column_start":5,"column_end":8}},{"value":"/ This is relevant only when constructed with `FlatSamples::as_view_with_mut_samples`. While","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":171801,"byte_end":171895,"line_start":1108,"line_end":1108,"column_start":5,"column_end":99}},{"value":"/ this can not fail–the validity of all coordinates has been validated during the conversion","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":171900,"byte_end":171996,"line_start":1109,"line_end":1109,"column_start":5,"column_end":99}},{"value":"/ from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":172001,"byte_end":172070,"line_start":1110,"line_end":1110,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1010},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":172620,"byte_end":172629,"line_start":1123,"line_end":1123,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<View<Buffer, P>>::shrink_to","value":"pub fn shrink_to(&mut Self, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the inner image.","sig":null,"attributes":[{"value":"/ Shrink the inner image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":172290,"byte_end":172317,"line_start":1118,"line_end":1118,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":172322,"byte_end":172325,"line_start":1119,"line_end":1119,"column_start":5,"column_end":8}},{"value":"/ The new dimensions will be the minimum of the previous dimensions. Since the set of","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":172330,"byte_end":172417,"line_start":1120,"line_end":1120,"column_start":5,"column_end":92}},{"value":"/ in-bounds pixels afterwards is a subset of the current ones, this is allowed on a `View`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":172422,"byte_end":172515,"line_start":1121,"line_end":1121,"column_start":5,"column_end":98}},{"value":"/ Note that you can not change the number of channels as an intrinsic property of `P`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":172520,"byte_end":172608,"line_start":1122,"line_end":1122,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":1011},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":173633,"byte_end":173644,"line_start":1146,"line_end":1146,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<View<Buffer, P>>::try_upgrade","value":"pub fn try_upgrade(Self) -> Result<ViewMut<Buffer, P>, (Error, Self)> where\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this into an image with mutable pixels.","sig":null,"attributes":[{"value":"/ Try to convert this into an image with mutable pixels.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":172784,"byte_end":172842,"line_start":1128,"line_end":1128,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":172847,"byte_end":172850,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ The resulting image implements `GenericImage` in addition to `GenericImageView`. While this","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":172855,"byte_end":172950,"line_start":1130,"line_end":1130,"column_start":5,"column_end":100}},{"value":"/ has mutable samples, it does not enforce that pixel can not alias and that samples are","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":172955,"byte_end":173045,"line_start":1131,"line_end":1131,"column_start":5,"column_end":95}},{"value":"/ packed enough for a mutable pixel reference. This is slightly cheaper than the chain","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":173050,"byte_end":173138,"line_start":1132,"line_end":1132,"column_start":5,"column_end":93}},{"value":"/ `self.into_inner().as_view_mut()` and keeps the `View` alive on failure.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":173143,"byte_end":173219,"line_start":1133,"line_end":1133,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":173224,"byte_end":173227,"line_start":1134,"line_end":1134,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":173232,"byte_end":173239,"line_start":1135,"line_end":1135,"column_start":5,"column_end":12}},{"value":"/ # use image::RgbImage;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":173244,"byte_end":173270,"line_start":1136,"line_end":1136,"column_start":5,"column_end":31}},{"value":"/ # use image::Rgb;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":173275,"byte_end":173296,"line_start":1137,"line_end":1137,"column_start":5,"column_end":26}},{"value":"/ let mut buffer = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":173301,"byte_end":173366,"line_start":1138,"line_end":1138,"column_start":5,"column_end":70}},{"value":"/ let view = buffer.as_view_with_mut_samples::<Rgb<u8>>().unwrap();","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":173371,"byte_end":173440,"line_start":1139,"line_end":1139,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":173445,"byte_end":173448,"line_start":1140,"line_end":1140,"column_start":5,"column_end":8}},{"value":"/ // Inspect some pixels, …","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":173453,"byte_end":173484,"line_start":1141,"line_end":1141,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":173489,"byte_end":173492,"line_start":1142,"line_end":1142,"column_start":5,"column_end":8}},{"value":"/ // Doesn't fail because it was originally an `RgbImage`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":173497,"byte_end":173557,"line_start":1143,"line_end":1143,"column_start":5,"column_end":65}},{"value":"/ let view_mut = view.try_upgrade().unwrap();","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":173562,"byte_end":173609,"line_start":1144,"line_end":1144,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":173614,"byte_end":173621,"line_start":1145,"line_end":1145,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1015},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":174285,"byte_end":174295,"line_start":1168,"line_end":1168,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ViewMut<Buffer, P>>::into_inner","value":"pub fn into_inner(Self) -> FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Take out the sample buffer.","sig":null,"attributes":[{"value":"/ Take out the sample buffer.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":174166,"byte_end":174197,"line_start":1165,"line_end":1165,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":174202,"byte_end":174205,"line_start":1166,"line_end":1166,"column_start":5,"column_end":8}},{"value":"/ Gives up the normalization invariants on the buffer format.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":174210,"byte_end":174273,"line_start":1167,"line_end":1167,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1016},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":174779,"byte_end":174783,"line_start":1178,"line_end":1178,"column_start":12,"column_end":16},"name":"flat","qualname":"<ViewMut<Buffer, P>>::flat","value":"pub fn flat(&Self) -> &FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the sample buffer descriptor.","sig":null,"attributes":[{"value":"/ Get a reference on the sample buffer descriptor.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":174357,"byte_end":174409,"line_start":1172,"line_end":1172,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":174414,"byte_end":174417,"line_start":1173,"line_end":1173,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counterpart as modifying the buffer format, including strides and","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":174422,"byte_end":174511,"line_start":1174,"line_end":1174,"column_start":5,"column_end":94}},{"value":"/ lengths, could invalidate the accessibility invariants of the `View`. It is not specified","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":174516,"byte_end":174609,"line_start":1175,"line_end":1175,"column_start":5,"column_end":98}},{"value":"/ if the inner buffer is the same as the buffer of the image from which this view was","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":174614,"byte_end":174701,"line_start":1176,"line_end":1176,"column_start":5,"column_end":92}},{"value":"/ created. It might have been truncated as an optimization.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":174706,"byte_end":174767,"line_start":1177,"line_end":1177,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1017},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":175156,"byte_end":175163,"line_start":1187,"line_end":1187,"column_start":12,"column_end":19},"name":"samples","qualname":"<ViewMut<Buffer, P>>::samples","value":"pub fn samples(&Self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner buffer.","sig":null,"attributes":[{"value":"/ Get a reference on the inner buffer.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":174848,"byte_end":174888,"line_start":1182,"line_end":1182,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":174893,"byte_end":174896,"line_start":1183,"line_end":1183,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counter part since it is not intended to allow you to reassign the","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":174901,"byte_end":174991,"line_start":1184,"line_end":1184,"column_start":5,"column_end":95}},{"value":"/ buffer or otherwise change its size or properties. However, its contents can be accessed","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":174996,"byte_end":175088,"line_start":1185,"line_end":1185,"column_start":5,"column_end":97}},{"value":"/ mutable through a slice with `image_mut_slice`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":175093,"byte_end":175144,"line_start":1186,"line_end":1186,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1018},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":175405,"byte_end":175415,"line_start":1194,"line_end":1194,"column_start":12,"column_end":22},"name":"min_length","qualname":"<ViewMut<Buffer, P>>::min_length","value":"pub fn min_length(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":175223,"byte_end":175313,"line_start":1191,"line_end":1191,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":175318,"byte_end":175321,"line_start":1192,"line_end":1192,"column_start":5,"column_end":8}},{"value":"/ See `FlatSamples::min_length`. This method will always succeed.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":175326,"byte_end":175393,"line_start":1193,"line_end":1193,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1019},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":175726,"byte_end":175736,"line_start":1202,"line_end":1202,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<ViewMut<Buffer, P>>::get_sample","value":"pub fn get_sample(&Self, u8, u32, u32) -> Option<&P::Subpixel> where\nBuffer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a selected subpixel.","sig":null,"attributes":[{"value":"/ Get a reference to a selected subpixel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":175486,"byte_end":175529,"line_start":1198,"line_end":1198,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":175534,"byte_end":175537,"line_start":1199,"line_end":1199,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":175542,"byte_end":175632,"line_start":1200,"line_end":1200,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":175637,"byte_end":175714,"line_start":1201,"line_end":1201,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1020},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":176361,"byte_end":176375,"line_start":1218,"line_end":1218,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<ViewMut<Buffer, P>>::get_mut_sample","value":"pub fn get_mut_sample(&mut Self, u8, u32, u32) -> Option<&mut P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a selected sample.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a selected sample.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":176115,"byte_end":176164,"line_start":1214,"line_end":1214,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":176169,"byte_end":176172,"line_start":1215,"line_end":1215,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":176177,"byte_end":176267,"line_start":1216,"line_end":1216,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":176272,"byte_end":176349,"line_start":1217,"line_end":1217,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1021},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":176986,"byte_end":176997,"line_start":1232,"line_end":1232,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<ViewMut<Buffer, P>>::image_slice","value":"pub fn image_slice(&Self) -> &[P::Subpixel] where Buffer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":176723,"byte_end":176785,"line_start":1228,"line_end":1228,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":176790,"byte_end":176793,"line_start":1229,"line_end":1229,"column_start":5,"column_end":8}},{"value":"/ While this can not fail–the validity of all coordinates has been validated during the","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":176798,"byte_end":176889,"line_start":1230,"line_end":1230,"column_start":5,"column_end":94}},{"value":"/ conversion from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":176894,"byte_end":176974,"line_start":1231,"line_end":1231,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1022},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":177196,"byte_end":177211,"line_start":1237,"line_end":1237,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<ViewMut<Buffer, P>>::image_mut_slice","value":"pub fn image_mut_slice(&mut Self) -> &mut [P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the mutable buffer that holds sample values.\n","sig":null,"attributes":[{"value":"/ Return the mutable buffer that holds sample values.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":177129,"byte_end":177184,"line_start":1236,"line_end":1236,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1023},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":177679,"byte_end":177688,"line_start":1247,"line_end":1247,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<ViewMut<Buffer, P>>::shrink_to","value":"pub fn shrink_to(&mut Self, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the inner image.","sig":null,"attributes":[{"value":"/ Shrink the inner image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":177349,"byte_end":177376,"line_start":1242,"line_end":1242,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":177381,"byte_end":177384,"line_start":1243,"line_end":1243,"column_start":5,"column_end":8}},{"value":"/ The new dimensions will be the minimum of the previous dimensions. Since the set of","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":177389,"byte_end":177476,"line_start":1244,"line_end":1244,"column_start":5,"column_end":92}},{"value":"/ in-bounds pixels afterwards is a subset of the current ones, this is allowed on a `View`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":177481,"byte_end":177574,"line_start":1245,"line_end":1245,"column_start":5,"column_end":98}},{"value":"/ Note that you can not change the number of channels as an intrinsic property of `P`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":177579,"byte_end":177667,"line_start":1246,"line_end":1246,"column_start":5,"column_end":93}}]},{"kind":"Mod","id":{"krate":0,"index":1077},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":7756,"byte_end":7762,"line_start":218,"line_end":218,"column_start":9,"column_end":15},"name":"codecs","qualname":"::codecs","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","parent":null,"children":[],"decl_id":null,"docs":" Encoding and decoding for various image file formats.","sig":null,"attributes":[{"value":"/ Encoding and decoding for various image file formats.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":5678,"byte_end":5735,"line_start":178,"line_end":178,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":5736,"byte_end":5739,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ # Supported formats","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":5740,"byte_end":5763,"line_start":180,"line_end":180,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":5764,"byte_end":5767,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ | Format | Decoding | Encoding |","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":5768,"byte_end":5804,"line_start":182,"line_end":182,"column_start":1,"column_end":37}},{"value":"/ | ------ | -------- | -------- |","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":5805,"byte_end":5841,"line_start":183,"line_end":183,"column_start":1,"column_end":37}},{"value":"/ | PNG    | All supported color types | Same as decoding |","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":5842,"byte_end":5903,"line_start":184,"line_end":184,"column_start":1,"column_end":62}},{"value":"/ | JPEG   | Baseline and progressive | Baseline JPEG |","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":5904,"byte_end":5961,"line_start":185,"line_end":185,"column_start":1,"column_end":58}},{"value":"/ | GIF    | Yes | Yes |","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":5962,"byte_end":5988,"line_start":186,"line_end":186,"column_start":1,"column_end":27}},{"value":"/ | BMP    | Yes | RGB8, RGBA8, Gray8, GrayA8 |","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":5989,"byte_end":6038,"line_start":187,"line_end":187,"column_start":1,"column_end":50}},{"value":"/ | ICO    | Yes | Yes |","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":6039,"byte_end":6065,"line_start":188,"line_end":188,"column_start":1,"column_end":27}},{"value":"/ | TIFF   | Baseline(no fax support) + LZW + PackBits | RGB8, RGBA8, Gray8 |","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":6066,"byte_end":6145,"line_start":189,"line_end":189,"column_start":1,"column_end":80}},{"value":"/ | WebP   | Lossy(Luma channel only) | No |","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":6146,"byte_end":6192,"line_start":190,"line_end":190,"column_start":1,"column_end":47}},{"value":"/ | AVIF   | Only 8-bit | Lossy |","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":6193,"byte_end":6228,"line_start":191,"line_end":191,"column_start":1,"column_end":36}},{"value":"/ | PNM    | PBM, PGM, PPM, standard PAM | Yes |","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":6229,"byte_end":6279,"line_start":192,"line_end":192,"column_start":1,"column_end":51}},{"value":"/ | DDS    | DXT1, DXT3, DXT5 | No |","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":6280,"byte_end":6318,"line_start":193,"line_end":193,"column_start":1,"column_end":39}},{"value":"/ | TGA    | Yes | RGB8, RGBA8, BGR8, BGRA8, Gray8, GrayA8 |","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":6319,"byte_end":6381,"line_start":194,"line_end":194,"column_start":1,"column_end":63}},{"value":"/ | farbfeld | Yes | Yes |","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":6382,"byte_end":6410,"line_start":195,"line_end":195,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":6411,"byte_end":6414,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ ## A note on format specific features","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":6415,"byte_end":6456,"line_start":197,"line_end":197,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":6457,"byte_end":6460,"line_start":198,"line_end":198,"column_start":1,"column_end":4}},{"value":"/ One of the main goals of `image` is stability, in runtime but also for programmers. This","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":6461,"byte_end":6553,"line_start":199,"line_end":199,"column_start":1,"column_end":93}},{"value":"/ ensures that performance as well as safety fixes reach a majority of its user base with little","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":6554,"byte_end":6652,"line_start":200,"line_end":200,"column_start":1,"column_end":99}},{"value":"/ effort. Re-exporting all details of its dependencies would run counter to this goal as it","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":6653,"byte_end":6746,"line_start":201,"line_end":201,"column_start":1,"column_end":94}},{"value":"/ linked _all_ major version bumps between them and `image`. As such, we are wary of exposing too","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":6747,"byte_end":6846,"line_start":202,"line_end":202,"column_start":1,"column_end":100}},{"value":"/ many details, or configuration options, that are not shared between different image formats.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":6847,"byte_end":6943,"line_start":203,"line_end":203,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":6944,"byte_end":6947,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ Nevertheless, the advantage of precise control is hard to ignore. We will thus consider","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":6948,"byte_end":7039,"line_start":205,"line_end":205,"column_start":1,"column_end":92}},{"value":"/ _wrappers_, not direct re-exports, in either of the following cases:","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":7040,"byte_end":7112,"line_start":206,"line_end":206,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":7113,"byte_end":7116,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ 1. A standard specifies that configuration _x_ is required for decoders/encoders and there","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":7117,"byte_end":7211,"line_start":208,"line_end":208,"column_start":1,"column_end":95}},{"value":"/    exists an essentially canonical way to control it.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":7212,"byte_end":7269,"line_start":209,"line_end":209,"column_start":1,"column_end":58}},{"value":"/ 2. At least two different implementations agree on some (sub-)set of features in practice.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":7270,"byte_end":7364,"line_start":210,"line_end":210,"column_start":1,"column_end":95}},{"value":"/ 3. A technical argument including measurements of the performance, space benefits, or otherwise","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":7365,"byte_end":7464,"line_start":211,"line_end":211,"column_start":1,"column_end":100}},{"value":"/    objectively quantified benefits can be made, and the added interface is unlikely to require","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":7465,"byte_end":7563,"line_start":212,"line_end":212,"column_start":1,"column_end":99}},{"value":"/    breaking changes.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":7564,"byte_end":7588,"line_start":213,"line_end":213,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":7589,"byte_end":7592,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ Features that fulfill two or more criteria are preferred.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":7593,"byte_end":7654,"line_start":215,"line_end":215,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":7655,"byte_end":7658,"line_start":216,"line_end":216,"column_start":1,"column_end":4}},{"value":"/ Re-exports of dependencies that reach version `1` will be discussed when it happens.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":7659,"byte_end":7747,"line_start":217,"line_end":217,"column_start":1,"column_end":89}}]},{"kind":"Struct","id":{"krate":0,"index":1094},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":191080,"byte_end":191086,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"Frames","qualname":"::animation::Frames","value":"Frames {  }","parent":null,"children":[{"krate":0,"index":1096}],"decl_id":null,"docs":" An implementation dependent iterator, reading the frames as requested\n","sig":null,"attributes":[{"value":"/ An implementation dependent iterator, reading the frames as requested","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":190995,"byte_end":191068,"line_start":9,"line_end":9,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1099},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":191266,"byte_end":191269,"line_start":16,"line_end":16,"column_start":12,"column_end":15},"name":"new","qualname":"<Frames>::new","value":"pub fn new(Box<dyn Iterator<Item = ImageResult<Frame>> + 'a>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Frames` from an implementation specific iterator.\n","sig":null,"attributes":[{"value":"/ Creates a new `Frames` from an implementation specific iterator.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":191186,"byte_end":191254,"line_start":15,"line_end":15,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1100},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":191661,"byte_end":191675,"line_start":25,"line_end":25,"column_start":12,"column_end":26},"name":"collect_frames","qualname":"<Frames>::collect_frames","value":"pub fn collect_frames(Self) -> ImageResult<Vec<Frame>>","parent":null,"children":[],"decl_id":null,"docs":" Steps through the iterator from the current frame until the end and pushes each frame into\n a `Vec`.\n If en error is encountered that error is returned instead.","sig":null,"attributes":[{"value":"/ Steps through the iterator from the current frame until the end and pushes each frame into","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":191380,"byte_end":191474,"line_start":20,"line_end":20,"column_start":5,"column_end":99}},{"value":"/ a `Vec`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":191479,"byte_end":191491,"line_start":21,"line_end":21,"column_start":5,"column_end":17}},{"value":"/ If en error is encountered that error is returned instead.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":191496,"byte_end":191558,"line_start":22,"line_end":22,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":191563,"byte_end":191566,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ Note: This is equivalent to `Frames::collect::<ImageResult<Vec<Frame>>>()`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":191571,"byte_end":191649,"line_start":24,"line_end":24,"column_start":5,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":2694},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":191964,"byte_end":191969,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"Frame","qualname":"::animation::Frame","value":"Frame {  }","parent":null,"children":[{"krate":0,"index":2695},{"krate":0,"index":2696},{"krate":0,"index":2697},{"krate":0,"index":2698}],"decl_id":null,"docs":" A single animation frame\n","sig":null,"attributes":[{"value":"/ A single animation frame","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":191907,"byte_end":191935,"line_start":37,"line_end":37,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":2701},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":192251,"byte_end":192256,"line_start":51,"line_end":51,"column_start":12,"column_end":17},"name":"Delay","qualname":"::animation::Delay","value":"Delay {  }","parent":null,"children":[{"krate":0,"index":2702}],"decl_id":null,"docs":" The delay of a frame relative to the previous one.\n","sig":null,"attributes":[{"value":"/ The delay of a frame relative to the previous one.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":192128,"byte_end":192182,"line_start":49,"line_end":49,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1106},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":192358,"byte_end":192361,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"new","qualname":"<Frame>::new","value":"pub fn new(RgbaImage) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame without any delay.\n","sig":null,"attributes":[{"value":"/ Contructs a new frame without any delay.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":192302,"byte_end":192346,"line_start":56,"line_end":56,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1107},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":192589,"byte_end":192599,"line_start":67,"line_end":67,"column_start":12,"column_end":22},"name":"from_parts","qualname":"<Frame>::from_parts","value":"pub fn from_parts(RgbaImage, u32, u32, Delay) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame\n","sig":null,"attributes":[{"value":"/ Contructs a new frame","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":192552,"byte_end":192577,"line_start":66,"line_end":66,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1108},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":192811,"byte_end":192816,"line_start":77,"line_end":77,"column_start":12,"column_end":17},"name":"delay","qualname":"<Frame>::delay","value":"pub fn delay(&Self) -> Delay","parent":null,"children":[],"decl_id":null,"docs":" Delay of this frame\n","sig":null,"attributes":[{"value":"/ Delay of this frame","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":192776,"byte_end":192799,"line_start":76,"line_end":76,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1109},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":192905,"byte_end":192911,"line_start":82,"line_end":82,"column_start":12,"column_end":18},"name":"buffer","qualname":"<Frame>::buffer","value":"pub fn buffer(&Self) -> &RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[{"value":"/ Returns the image buffer","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":192865,"byte_end":192893,"line_start":81,"line_end":81,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1110},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":193013,"byte_end":193023,"line_start":87,"line_end":87,"column_start":12,"column_end":22},"name":"buffer_mut","qualname":"<Frame>::buffer_mut","value":"pub fn buffer_mut(&mut Self) -> &mut RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable image buffer\n","sig":null,"attributes":[{"value":"/ Returns a mutable image buffer","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":192967,"byte_end":193001,"line_start":86,"line_end":86,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1111},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":193131,"byte_end":193142,"line_start":92,"line_end":92,"column_start":12,"column_end":23},"name":"into_buffer","qualname":"<Frame>::into_buffer","value":"pub fn into_buffer(Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[{"value":"/ Returns the image buffer","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":193091,"byte_end":193119,"line_start":91,"line_end":91,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1112},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":193231,"byte_end":193235,"line_start":97,"line_end":97,"column_start":12,"column_end":16},"name":"left","qualname":"<Frame>::left","value":"pub fn left(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the x offset\n","sig":null,"attributes":[{"value":"/ Returns the x offset","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":193195,"byte_end":193219,"line_start":96,"line_end":96,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1113},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":193317,"byte_end":193320,"line_start":102,"line_end":102,"column_start":12,"column_end":15},"name":"top","qualname":"<Frame>::top","value":"pub fn top(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the y offset\n","sig":null,"attributes":[{"value":"/ Returns the y offset","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":193281,"byte_end":193305,"line_start":101,"line_end":101,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1115},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":193585,"byte_end":193604,"line_start":116,"line_end":116,"column_start":12,"column_end":31},"name":"from_numer_denom_ms","qualname":"<Delay>::from_numer_denom_ms","value":"pub fn from_numer_denom_ms(u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a delay from a ratio of milliseconds.","sig":null,"attributes":[{"value":"/ Create a delay from a ratio of milliseconds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":193380,"byte_end":193428,"line_start":108,"line_end":108,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":193433,"byte_end":193436,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":193441,"byte_end":193455,"line_start":110,"line_end":110,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":193460,"byte_end":193463,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":193468,"byte_end":193475,"line_start":112,"line_end":112,"column_start":5,"column_end":12}},{"value":"/ use image::Delay;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":193480,"byte_end":193501,"line_start":113,"line_end":113,"column_start":5,"column_end":26}},{"value":"/ let delay_10ms = Delay::from_numer_denom_ms(10, 1);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":193506,"byte_end":193561,"line_start":114,"line_end":114,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":193566,"byte_end":193573,"line_start":115,"line_end":115,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1116},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":194247,"byte_end":194271,"line_start":134,"line_end":134,"column_start":12,"column_end":36},"name":"from_saturating_duration","qualname":"<Delay>::from_saturating_duration","value":"pub fn from_saturating_duration(Duration) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Convert from a duration, clamped between 0 and an implemented defined maximum.","sig":null,"attributes":[{"value":"/ Convert from a duration, clamped between 0 and an implemented defined maximum.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":193724,"byte_end":193806,"line_start":120,"line_end":120,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":193811,"byte_end":193814,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ The maximum is *at least* `i32::MAX` milliseconds. It should be noted that the accuracy of","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":193819,"byte_end":193913,"line_start":122,"line_end":122,"column_start":5,"column_end":99}},{"value":"/ the result may be relative and very large delays have a coarse resolution.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":193918,"byte_end":193996,"line_start":123,"line_end":123,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":194001,"byte_end":194004,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":194009,"byte_end":194023,"line_start":125,"line_end":125,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":194028,"byte_end":194031,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":194036,"byte_end":194043,"line_start":127,"line_end":127,"column_start":5,"column_end":12}},{"value":"/ use std::time::Duration;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":194048,"byte_end":194076,"line_start":128,"line_end":128,"column_start":5,"column_end":33}},{"value":"/ use image::Delay;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":194081,"byte_end":194102,"line_start":129,"line_end":129,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":194107,"byte_end":194110,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ let duration = Duration::from_millis(20);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":194115,"byte_end":194160,"line_start":131,"line_end":131,"column_start":5,"column_end":50}},{"value":"/ let delay = Delay::from_saturating_duration(duration);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":194165,"byte_end":194223,"line_start":132,"line_end":132,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":194228,"byte_end":194235,"line_start":133,"line_end":133,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1118},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":195447,"byte_end":195461,"line_start":163,"line_end":163,"column_start":12,"column_end":26},"name":"numer_denom_ms","qualname":"<Delay>::numer_denom_ms","value":"pub fn numer_denom_ms(Self) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" The numerator and denominator of the delay in milliseconds.","sig":null,"attributes":[{"value":"/ The numerator and denominator of the delay in milliseconds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":195221,"byte_end":195284,"line_start":159,"line_end":159,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":195289,"byte_end":195292,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ This is guaranteed to be an exact conversion if the `Delay` was previously created with the","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":195297,"byte_end":195392,"line_start":161,"line_end":161,"column_start":5,"column_end":100}},{"value":"/ `from_numer_denom_ms` constructor.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":195397,"byte_end":195435,"line_start":162,"line_end":162,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1229},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":202741,"byte_end":202747,"line_start":19,"line_end":19,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::buffer_::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":1232}],"decl_id":null,"docs":" Iterate over pixel refs.\n","sig":null,"attributes":[{"value":"/ Iterate over pixel refs.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":202701,"byte_end":202729,"line_start":18,"line_end":18,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":1254},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":203908,"byte_end":203917,"line_start":76,"line_end":76,"column_start":12,"column_end":21},"name":"PixelsMut","qualname":"::buffer_::PixelsMut","value":"PixelsMut {  }","parent":null,"children":[{"krate":0,"index":1257}],"decl_id":null,"docs":" Iterate over mutable pixel refs.\n","sig":null,"attributes":[{"value":"/ Iterate over mutable pixel refs.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":203860,"byte_end":203896,"line_start":75,"line_end":75,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1276},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":205173,"byte_end":205177,"line_start":133,"line_end":133,"column_start":12,"column_end":16},"name":"Rows","qualname":"::buffer_::Rows","value":"Rows {  }","parent":null,"children":[{"krate":0,"index":1279}],"decl_id":null,"docs":" Iterate over rows of an image","sig":null,"attributes":[{"value":"/ Iterate over rows of an image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":204967,"byte_end":205000,"line_start":128,"line_end":128,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":205001,"byte_end":205004,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ This iterator is created with [`ImageBuffer::rows`]. See its document for details.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":205005,"byte_end":205091,"line_start":130,"line_end":130,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":205092,"byte_end":205095,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ [`ImageBuffer::rows`]: ../struct.ImageBuffer.html#method.rows","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":205096,"byte_end":205161,"line_start":132,"line_end":132,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1303},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":207727,"byte_end":207734,"line_start":223,"line_end":223,"column_start":12,"column_end":19},"name":"RowsMut","qualname":"::buffer_::RowsMut","value":"RowsMut {  }","parent":null,"children":[{"krate":0,"index":1306}],"decl_id":null,"docs":" Iterate over mutable rows of an image","sig":null,"attributes":[{"value":"/ Iterate over mutable rows of an image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":207501,"byte_end":207542,"line_start":218,"line_end":218,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":207543,"byte_end":207546,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ This iterator is created with [`ImageBuffer::rows_mut`]. See its document for details.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":207547,"byte_end":207637,"line_start":220,"line_end":220,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":207638,"byte_end":207641,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ [`ImageBuffer::rows_mut`]: ../struct.ImageBuffer.html#method.rows_mut","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":207642,"byte_end":207715,"line_start":222,"line_end":222,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1327},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":210050,"byte_end":210065,"line_start":303,"line_end":303,"column_start":12,"column_end":27},"name":"EnumeratePixels","qualname":"::buffer_::EnumeratePixels","value":"EnumeratePixels {  }","parent":null,"children":[{"krate":0,"index":1330},{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the pixels of an image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":210001,"byte_end":210038,"line_start":302,"line_end":302,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":1350},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":211372,"byte_end":211385,"line_start":365,"line_end":365,"column_start":12,"column_end":25},"name":"EnumerateRows","qualname":"::buffer_::EnumerateRows","value":"EnumerateRows {  }","parent":null,"children":[{"krate":0,"index":1353},{"krate":0,"index":1354},{"krate":0,"index":1355}],"decl_id":null,"docs":" Enumerate the rows of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the rows of an image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":211325,"byte_end":211360,"line_start":364,"line_end":364,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":1372},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":212760,"byte_end":212778,"line_start":431,"line_end":431,"column_start":12,"column_end":30},"name":"EnumeratePixelsMut","qualname":"::buffer_::EnumeratePixelsMut","value":"EnumeratePixelsMut {  }","parent":null,"children":[{"krate":0,"index":1375},{"krate":0,"index":1376},{"krate":0,"index":1377},{"krate":0,"index":1378}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the pixels of an image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":212711,"byte_end":212748,"line_start":430,"line_end":430,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":1392},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":213922,"byte_end":213938,"line_start":484,"line_end":484,"column_start":12,"column_end":28},"name":"EnumerateRowsMut","qualname":"::buffer_::EnumerateRowsMut","value":"EnumerateRowsMut {  }","parent":null,"children":[{"krate":0,"index":1395},{"krate":0,"index":1396},{"krate":0,"index":1397}],"decl_id":null,"docs":" Enumerate the rows of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the rows of an image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":213875,"byte_end":213910,"line_start":483,"line_end":483,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":2717},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":217488,"byte_end":217499,"line_start":609,"line_end":609,"column_start":12,"column_end":23},"name":"ImageBuffer","qualname":"::buffer_::ImageBuffer","value":"ImageBuffer {  }","parent":null,"children":[{"krate":0,"index":2720},{"krate":0,"index":2721},{"krate":0,"index":2722},{"krate":0,"index":2723}],"decl_id":null,"docs":" Generic image buffer","sig":null,"attributes":[{"value":"/ Generic image buffer","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":215110,"byte_end":215134,"line_start":540,"line_end":540,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":215135,"byte_end":215138,"line_start":541,"line_end":541,"column_start":1,"column_end":4}},{"value":"/ This is an image parameterised by its Pixel types, represented by a width and height and a","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":215139,"byte_end":215233,"line_start":542,"line_end":542,"column_start":1,"column_end":95}},{"value":"/ container of channel data. It provides direct access to its pixels and implements the","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":215234,"byte_end":215323,"line_start":543,"line_end":543,"column_start":1,"column_end":90}},{"value":"/ [`GenericImageView`] and [`GenericImage`] traits. In many ways, this is the standard buffer","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":215324,"byte_end":215419,"line_start":544,"line_end":544,"column_start":1,"column_end":96}},{"value":"/ implementing those traits. Using this concrete type instead of a generic type parameter has","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":215420,"byte_end":215515,"line_start":545,"line_end":545,"column_start":1,"column_end":96}},{"value":"/ been shown to improve performance.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":215516,"byte_end":215554,"line_start":546,"line_end":546,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":215555,"byte_end":215558,"line_start":547,"line_end":547,"column_start":1,"column_end":4}},{"value":"/ The crate defines a few type aliases with regularly used pixel types for your convenience, such","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":215559,"byte_end":215658,"line_start":548,"line_end":548,"column_start":1,"column_end":100}},{"value":"/ as `RgbImage`, `GrayImage` etc.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":215659,"byte_end":215694,"line_start":549,"line_end":549,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":215695,"byte_end":215698,"line_start":550,"line_end":550,"column_start":1,"column_end":4}},{"value":"/ [`GenericImage`]: trait.GenericImage.html","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":215699,"byte_end":215744,"line_start":551,"line_end":551,"column_start":1,"column_end":46}},{"value":"/ [`GenericImageView`]: trait.GenericImageView.html","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":215745,"byte_end":215798,"line_start":552,"line_end":552,"column_start":1,"column_end":54}},{"value":"/ [`RgbImage`]: type.RgbImage.html","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":215799,"byte_end":215835,"line_start":553,"line_end":553,"column_start":1,"column_end":37}},{"value":"/ [`GrayImage`]: type.GrayImage.html","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":215836,"byte_end":215874,"line_start":554,"line_end":554,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":215875,"byte_end":215878,"line_start":555,"line_end":555,"column_start":1,"column_end":4}},{"value":"/ To convert between images of different Pixel types use [`DynamicImage`].","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":215879,"byte_end":215955,"line_start":556,"line_end":556,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":215956,"byte_end":215959,"line_start":557,"line_end":557,"column_start":1,"column_end":4}},{"value":"/ You can retrieve a complete description of the buffer's layout and contents through","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":215960,"byte_end":216047,"line_start":558,"line_end":558,"column_start":1,"column_end":88}},{"value":"/ [`as_flat_samples`] and [`as_flat_samples_mut`]. This can be handy to also use the contents in","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216048,"byte_end":216146,"line_start":559,"line_end":559,"column_start":1,"column_end":99}},{"value":"/ a foreign language, map it as a GPU host buffer or other similar tasks.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216147,"byte_end":216222,"line_start":560,"line_end":560,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216223,"byte_end":216226,"line_start":561,"line_end":561,"column_start":1,"column_end":4}},{"value":"/ [`DynamicImage`]: enum.DynamicImage.html","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216227,"byte_end":216271,"line_start":562,"line_end":562,"column_start":1,"column_end":45}},{"value":"/ [`as_flat_samples`]: #method.as_flat_samples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216272,"byte_end":216320,"line_start":563,"line_end":563,"column_start":1,"column_end":49}},{"value":"/ [`as_flat_samples_mut`]: #method.as_flat_samples_mut","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216321,"byte_end":216377,"line_start":564,"line_end":564,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216378,"byte_end":216381,"line_start":565,"line_end":565,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216382,"byte_end":216397,"line_start":566,"line_end":566,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216398,"byte_end":216401,"line_start":567,"line_end":567,"column_start":1,"column_end":4}},{"value":"/ Create a simple canvas and paint a small cross.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216402,"byte_end":216453,"line_start":568,"line_end":568,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216454,"byte_end":216457,"line_start":569,"line_end":569,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216458,"byte_end":216465,"line_start":570,"line_end":570,"column_start":1,"column_end":8}},{"value":"/ use image::{RgbImage, Rgb};","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216466,"byte_end":216497,"line_start":571,"line_end":571,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216498,"byte_end":216501,"line_start":572,"line_end":572,"column_start":1,"column_end":4}},{"value":"/ let mut img = RgbImage::new(32, 32);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216502,"byte_end":216542,"line_start":573,"line_end":573,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216543,"byte_end":216546,"line_start":574,"line_end":574,"column_start":1,"column_end":4}},{"value":"/ for x in 15..=17 {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216547,"byte_end":216569,"line_start":575,"line_end":575,"column_start":1,"column_end":23}},{"value":"/     for y in 8..24 {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216570,"byte_end":216594,"line_start":576,"line_end":576,"column_start":1,"column_end":25}},{"value":"/         img.put_pixel(x, y, Rgb([255, 0, 0]));","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216595,"byte_end":216645,"line_start":577,"line_end":577,"column_start":1,"column_end":51}},{"value":"/         img.put_pixel(y, x, Rgb([255, 0, 0]));","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216646,"byte_end":216696,"line_start":578,"line_end":578,"column_start":1,"column_end":51}},{"value":"/     }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216697,"byte_end":216706,"line_start":579,"line_end":579,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216707,"byte_end":216712,"line_start":580,"line_end":580,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216713,"byte_end":216720,"line_start":581,"line_end":581,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216721,"byte_end":216724,"line_start":582,"line_end":582,"column_start":1,"column_end":4}},{"value":"/ Overlays an image on top of a larger background raster.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216725,"byte_end":216784,"line_start":583,"line_end":583,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216785,"byte_end":216788,"line_start":584,"line_end":584,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216789,"byte_end":216802,"line_start":585,"line_end":585,"column_start":1,"column_end":14}},{"value":"/ use image::{GenericImage, GenericImageView, ImageBuffer, open};","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216803,"byte_end":216870,"line_start":586,"line_end":586,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216871,"byte_end":216874,"line_start":587,"line_end":587,"column_start":1,"column_end":4}},{"value":"/ let on_top = open(\"path/to/some.png\").unwrap().into_rgb();","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216875,"byte_end":216937,"line_start":588,"line_end":588,"column_start":1,"column_end":63}},{"value":"/ let mut img = ImageBuffer::from_fn(512, 512, |x, y| {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216938,"byte_end":216995,"line_start":589,"line_end":589,"column_start":1,"column_end":58}},{"value":"/     if (x + y) % 2 == 0 {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":216996,"byte_end":217025,"line_start":590,"line_end":590,"column_start":1,"column_end":30}},{"value":"/         image::Rgb([0, 0, 0])","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":217026,"byte_end":217059,"line_start":591,"line_end":591,"column_start":1,"column_end":34}},{"value":"/     } else {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":217060,"byte_end":217076,"line_start":592,"line_end":592,"column_start":1,"column_end":17}},{"value":"/         image::Rgb([255, 255, 255])","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":217077,"byte_end":217116,"line_start":593,"line_end":593,"column_start":1,"column_end":40}},{"value":"/     }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":217117,"byte_end":217126,"line_start":594,"line_end":594,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":217127,"byte_end":217134,"line_start":595,"line_end":595,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":217135,"byte_end":217138,"line_start":596,"line_end":596,"column_start":1,"column_end":4}},{"value":"/ image::imageops::overlay(&mut img, &on_top, 128, 128);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":217139,"byte_end":217197,"line_start":597,"line_end":597,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":217198,"byte_end":217205,"line_start":598,"line_end":598,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":217206,"byte_end":217209,"line_start":599,"line_end":599,"column_start":1,"column_end":4}},{"value":"/ Convert an RgbaImage to a GrayImage.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":217210,"byte_end":217250,"line_start":600,"line_end":600,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":217251,"byte_end":217254,"line_start":601,"line_end":601,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":217255,"byte_end":217268,"line_start":602,"line_end":602,"column_start":1,"column_end":14}},{"value":"/ use image::{open, DynamicImage};","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":217269,"byte_end":217305,"line_start":603,"line_end":603,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":217306,"byte_end":217309,"line_start":604,"line_end":604,"column_start":1,"column_end":4}},{"value":"/ let rgba = open(\"path/to/some.png\").unwrap().into_rgba();","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":217310,"byte_end":217371,"line_start":605,"line_end":605,"column_start":1,"column_end":62}},{"value":"/ let gray = DynamicImage::ImageRgba8(rgba).into_luma();","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":217372,"byte_end":217430,"line_start":606,"line_end":606,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":217431,"byte_end":217438,"line_start":607,"line_end":607,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1414},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":218257,"byte_end":218265,"line_start":631,"line_end":631,"column_start":12,"column_end":20},"name":"from_raw","qualname":"<ImageBuffer<P, Container>>::from_raw","value":"pub fn from_raw(u32, u32, Container) -> Option<ImageBuffer<P, Container>>","parent":null,"children":[],"decl_id":null,"docs":" Contructs a buffer from a generic container\n (for example a `Vec` or a slice)","sig":null,"attributes":[{"value":"/ Contructs a buffer from a generic container","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":217972,"byte_end":218019,"line_start":626,"line_end":626,"column_start":5,"column_end":52}},{"value":"/ (for example a `Vec` or a slice)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":218024,"byte_end":218060,"line_start":627,"line_end":627,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":218065,"byte_end":218068,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the container is not big enough (including when the image dimensions","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":218073,"byte_end":218163,"line_start":629,"line_end":629,"column_start":5,"column_end":95}},{"value":"/ necessitate an allocation of more bytes than supported by the container).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":218168,"byte_end":218245,"line_start":630,"line_end":630,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1415},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":218671,"byte_end":218679,"line_start":645,"line_end":645,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<ImageBuffer<P, Container>>::into_raw","value":"pub fn into_raw(Self) -> Container","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw buffer\n","sig":null,"attributes":[{"value":"/ Returns the underlying raw buffer","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":218622,"byte_end":218659,"line_start":644,"line_end":644,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1416},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":218779,"byte_end":218785,"line_start":650,"line_end":650,"column_start":12,"column_end":18},"name":"as_raw","qualname":"<ImageBuffer<P, Container>>::as_raw","value":"pub fn as_raw(&Self) -> &Container","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw buffer\n","sig":null,"attributes":[{"value":"/ Returns the underlying raw buffer","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":218730,"byte_end":218767,"line_start":649,"line_end":649,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1417},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":218890,"byte_end":218900,"line_start":655,"line_end":655,"column_start":12,"column_end":22},"name":"dimensions","qualname":"<ImageBuffer<P, Container>>::dimensions","value":"pub fn dimensions(&Self) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[{"value":"/ The width and height of this image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":218839,"byte_end":218878,"line_start":654,"line_end":654,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1418},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":219009,"byte_end":219014,"line_start":660,"line_end":660,"column_start":12,"column_end":17},"name":"width","qualname":"<ImageBuffer<P, Container>>::width","value":"pub fn width(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[{"value":"/ The width of this image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":218969,"byte_end":218997,"line_start":659,"line_end":659,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1419},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":219102,"byte_end":219108,"line_start":665,"line_end":665,"column_start":12,"column_end":18},"name":"height","qualname":"<ImageBuffer<P, Container>>::height","value":"pub fn height(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[{"value":"/ The height of this image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":219061,"byte_end":219090,"line_start":664,"line_end":664,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1421},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":219493,"byte_end":219499,"line_start":677,"line_end":677,"column_start":12,"column_end":18},"name":"pixels","qualname":"<ImageBuffer<P, Container>>::pixels","value":"pub fn pixels(&Self) -> Pixels<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the pixels of this image.\n The iteration order is x = 0 to width then y = 0 to height\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the pixels of this image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":219360,"byte_end":219414,"line_start":675,"line_end":675,"column_start":5,"column_end":59}},{"value":"/ The iteration order is x = 0 to width then y = 0 to height","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":219419,"byte_end":219481,"line_start":676,"line_end":676,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1422},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":219999,"byte_end":220003,"line_start":688,"line_end":688,"column_start":12,"column_end":16},"name":"rows","qualname":"<ImageBuffer<P, Container>>::rows","value":"pub fn rows(&Self) -> Rows<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the rows of this image.","sig":null,"attributes":[{"value":"/ Returns an iterator over the rows of this image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":219652,"byte_end":219704,"line_start":683,"line_end":683,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":219709,"byte_end":219712,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ Only non-empty rows can be iterated in this manner. In particular the iterator will not","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":219717,"byte_end":219808,"line_start":685,"line_end":685,"column_start":5,"column_end":96}},{"value":"/ yield any item when the width of the image is `0` or a pixel type without any channels is","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":219813,"byte_end":219906,"line_start":686,"line_end":686,"column_start":5,"column_end":98}},{"value":"/ used. This ensures that its length can always be represented by `usize`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":219911,"byte_end":219987,"line_start":687,"line_end":687,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1423},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":220354,"byte_end":220370,"line_start":697,"line_end":697,"column_start":12,"column_end":28},"name":"enumerate_pixels","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels","value":"pub fn enumerate_pixels(&Self) -> EnumeratePixels<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a reference to them.\n The iteration order is x = 0 to width then y = 0 to height\n Starting from the top left.\n","sig":null,"attributes":[{"value":"/ Enumerates over the pixels of the image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":220097,"byte_end":220141,"line_start":692,"line_end":692,"column_start":5,"column_end":49}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":220146,"byte_end":220199,"line_start":693,"line_end":693,"column_start":5,"column_end":58}},{"value":"/ along with a reference to them.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":220204,"byte_end":220239,"line_start":694,"line_end":694,"column_start":5,"column_end":40}},{"value":"/ The iteration order is x = 0 to width then y = 0 to height","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":220244,"byte_end":220306,"line_start":695,"line_end":695,"column_start":5,"column_end":67}},{"value":"/ Starting from the top left.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":220311,"byte_end":220342,"line_start":696,"line_end":696,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1424},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":220702,"byte_end":220716,"line_start":709,"line_end":709,"column_start":12,"column_end":26},"name":"enumerate_rows","qualname":"<ImageBuffer<P, Container>>::enumerate_rows","value":"pub fn enumerate_rows(&Self) -> EnumerateRows<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the rows of the image.\n The iterator yields the y-coordinate of each row\n along with a reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the rows of the image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":220551,"byte_end":220593,"line_start":706,"line_end":706,"column_start":5,"column_end":47}},{"value":"/ The iterator yields the y-coordinate of each row","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":220598,"byte_end":220650,"line_start":707,"line_end":707,"column_start":5,"column_end":57}},{"value":"/ along with a reference to them.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":220655,"byte_end":220690,"line_start":708,"line_end":708,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1425},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":221037,"byte_end":221046,"line_start":722,"line_end":722,"column_start":12,"column_end":21},"name":"get_pixel","qualname":"<ImageBuffer<P, Container>>::get_pixel","value":"pub fn get_pixel(&Self, u32, u32) -> &P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the pixel at location `(x, y)`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":220871,"byte_end":220925,"line_start":717,"line_end":717,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":220930,"byte_end":220933,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":220938,"byte_end":220950,"line_start":719,"line_end":719,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":220955,"byte_end":220958,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":220963,"byte_end":221025,"line_start":721,"line_end":721,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1433},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":222772,"byte_end":222785,"line_start":763,"line_end":763,"column_start":12,"column_end":25},"name":"sample_layout","qualname":"<ImageBuffer<P, Container>>::sample_layout","value":"pub fn sample_layout(&Self) -> SampleLayout","parent":null,"children":[],"decl_id":null,"docs":" Get the format of the buffer when viewed as a matrix of samples.\n","sig":null,"attributes":[{"value":"/ Get the format of the buffer when viewed as a matrix of samples.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":222692,"byte_end":222760,"line_start":762,"line_end":762,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1434},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":223399,"byte_end":223416,"line_start":774,"line_end":774,"column_start":12,"column_end":29},"name":"into_flat_samples","qualname":"<ImageBuffer<P, Container>>::into_flat_samples","value":"pub fn into_flat_samples(Self) -> FlatSamples<Container> where\nContainer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return the raw sample buffer with its stride an dimension information.","sig":null,"attributes":[{"value":"/ Return the raw sample buffer with its stride an dimension information.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":222988,"byte_end":223062,"line_start":768,"line_end":768,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":223067,"byte_end":223070,"line_start":769,"line_end":769,"column_start":5,"column_end":8}},{"value":"/ The returned buffer is guaranteed to be well formed in all cases. It is layed out by","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":223075,"byte_end":223163,"line_start":770,"line_end":770,"column_start":5,"column_end":93}},{"value":"/ colors, width then height, meaning `channel_stride <= width_stride <= height_stride`. All","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":223168,"byte_end":223261,"line_start":771,"line_end":771,"column_start":5,"column_end":98}},{"value":"/ strides are in numbers of elements but those are mostly `u8` in which case the strides are","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":223266,"byte_end":223360,"line_start":772,"line_end":772,"column_start":5,"column_end":99}},{"value":"/ also byte strides.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":223365,"byte_end":223387,"line_start":773,"line_end":773,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1435},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":223899,"byte_end":223914,"line_start":789,"line_end":789,"column_start":12,"column_end":27},"name":"as_flat_samples","qualname":"<ImageBuffer<P, Container>>::as_flat_samples","value":"pub fn as_flat_samples(&Self) -> FlatSamples<&[P::Subpixel]> where\nContainer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer.","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":223757,"byte_end":223800,"line_start":786,"line_end":786,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":223805,"byte_end":223808,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ See [`into_flat_samples`](#method.into_flat_samples) for more details.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":223813,"byte_end":223887,"line_start":788,"line_end":788,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1436},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":224347,"byte_end":224366,"line_start":803,"line_end":803,"column_start":12,"column_end":31},"name":"as_flat_samples_mut","qualname":"<ImageBuffer<P, Container>>::as_flat_samples_mut","value":"pub fn as_flat_samples_mut(&mut Self) -> FlatSamples<&mut [P::Subpixel]> where\nContainer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable view on the raw sample buffer.","sig":null,"attributes":[{"value":"/ Return a mutable view on the raw sample buffer.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":224197,"byte_end":224248,"line_start":800,"line_end":800,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":224253,"byte_end":224256,"line_start":801,"line_end":801,"column_start":5,"column_end":8}},{"value":"/ See [`into_flat_samples`](#method.into_flat_samples) for more details.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":224261,"byte_end":224335,"line_start":802,"line_end":802,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1441},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":225113,"byte_end":225123,"line_start":828,"line_end":828,"column_start":12,"column_end":22},"name":"pixels_mut","qualname":"<ImageBuffer<P, Container>>::pixels_mut","value":"pub fn pixels_mut(&mut Self) -> PixelsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the mutable pixels of this image.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the mutable pixels of this image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":225039,"byte_end":225101,"line_start":827,"line_end":827,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1442},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":225649,"byte_end":225657,"line_start":839,"line_end":839,"column_start":12,"column_end":20},"name":"rows_mut","qualname":"<ImageBuffer<P, Container>>::rows_mut","value":"pub fn rows_mut(&mut Self) -> RowsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the mutable rows of this image.","sig":null,"attributes":[{"value":"/ Returns an iterator over the mutable rows of this image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":225294,"byte_end":225354,"line_start":834,"line_end":834,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":225359,"byte_end":225362,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ Only non-empty rows can be iterated in this manner. In particular the iterator will not","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":225367,"byte_end":225458,"line_start":836,"line_end":836,"column_start":5,"column_end":96}},{"value":"/ yield any item when the width of the image is `0` or a pixel type without any channels is","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":225463,"byte_end":225556,"line_start":837,"line_end":837,"column_start":5,"column_end":98}},{"value":"/ used. This ensures that its length can always be represented by `usize`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":225561,"byte_end":225637,"line_start":838,"line_end":838,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1443},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":225927,"byte_end":225947,"line_start":846,"line_end":846,"column_start":12,"column_end":32},"name":"enumerate_pixels_mut","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels_mut","value":"pub fn enumerate_pixels_mut(&mut Self) -> EnumeratePixelsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a mutable reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the pixels of the image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":225765,"byte_end":225809,"line_start":843,"line_end":843,"column_start":5,"column_end":49}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":225814,"byte_end":225867,"line_start":844,"line_end":844,"column_start":5,"column_end":58}},{"value":"/ along with a mutable reference to them.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":225872,"byte_end":225915,"line_start":845,"line_end":845,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1444},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":226321,"byte_end":226339,"line_start":859,"line_end":859,"column_start":12,"column_end":30},"name":"enumerate_rows_mut","qualname":"<ImageBuffer<P, Container>>::enumerate_rows_mut","value":"pub fn enumerate_rows_mut(&mut Self) -> EnumerateRowsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the rows of the image.\n The iterator yields the y-coordinate of each row\n along with a mutable reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the rows of the image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":226162,"byte_end":226204,"line_start":856,"line_end":856,"column_start":5,"column_end":47}},{"value":"/ The iterator yields the y-coordinate of each row","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":226209,"byte_end":226261,"line_start":857,"line_end":857,"column_start":5,"column_end":57}},{"value":"/ along with a mutable reference to them.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":226266,"byte_end":226309,"line_start":858,"line_end":858,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1445},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":226702,"byte_end":226715,"line_start":873,"line_end":873,"column_start":12,"column_end":25},"name":"get_pixel_mut","qualname":"<ImageBuffer<P, Container>>::get_pixel_mut","value":"pub fn get_pixel_mut(&mut Self, u32, u32) -> &mut P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the mutable pixel at location `(x, y)`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":226528,"byte_end":226590,"line_start":868,"line_end":868,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":226595,"byte_end":226598,"line_start":869,"line_end":869,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":226603,"byte_end":226615,"line_start":870,"line_end":870,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":226620,"byte_end":226623,"line_start":871,"line_end":871,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":226628,"byte_end":226690,"line_start":872,"line_end":872,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1446},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":227164,"byte_end":227173,"line_start":885,"line_end":885,"column_start":12,"column_end":21},"name":"put_pixel","qualname":"<ImageBuffer<P, Container>>::put_pixel","value":"pub fn put_pixel(&mut Self, u32, u32, P)","parent":null,"children":[],"decl_id":null,"docs":" Puts a pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Puts a pixel at location `(x, y)`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":227015,"byte_end":227052,"line_start":880,"line_end":880,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":227057,"byte_end":227060,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":227065,"byte_end":227077,"line_start":882,"line_end":882,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":227082,"byte_end":227085,"line_start":883,"line_end":883,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":227090,"byte_end":227152,"line_start":884,"line_end":884,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1450},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":227618,"byte_end":227622,"line_start":900,"line_end":900,"column_start":12,"column_end":16},"name":"save","qualname":"<ImageBuffer<P, Container>>::save","value":"pub fn save<Q>(&Self, Q) -> ImageResult<()> where Q: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the path specified.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":227427,"byte_end":227480,"line_start":896,"line_end":896,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":227485,"byte_end":227488,"line_start":897,"line_end":897,"column_start":5,"column_end":8}},{"value":"/ The image format is derived from the file extension.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":227493,"byte_end":227549,"line_start":898,"line_end":898,"column_start":5,"column_end":61}},{"value":"/ Currently only jpeg and png files are supported.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":227554,"byte_end":227606,"line_start":899,"line_end":899,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1455},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":228297,"byte_end":228313,"line_start":926,"line_end":926,"column_start":12,"column_end":28},"name":"save_with_format","qualname":"<ImageBuffer<P, Container>>::save_with_format","value":"pub fn save_with_format<Q>(&Self, Q, ImageFormat) -> ImageResult<()> where\nQ: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the specified path in\n the specified format.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the specified path in","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":228090,"byte_end":228145,"line_start":921,"line_end":921,"column_start":5,"column_end":60}},{"value":"/ the specified format.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":228150,"byte_end":228175,"line_start":922,"line_end":922,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":228180,"byte_end":228183,"line_start":923,"line_end":923,"column_start":5,"column_end":8}},{"value":"/ See [`save_buffer_with_format`](fn.save_buffer_with_format.html) for","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":228188,"byte_end":228260,"line_start":924,"line_end":924,"column_start":5,"column_end":77}},{"value":"/ supported types.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":228265,"byte_end":228285,"line_start":925,"line_end":925,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1507},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":235150,"byte_end":235153,"line_start":1154,"line_end":1154,"column_start":12,"column_end":15},"name":"new","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::new","value":"pub fn new(u32, u32) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new image buffer based on a `Vec<P::Subpixel>`.","sig":null,"attributes":[{"value":"/ Creates a new image buffer based on a `Vec<P::Subpixel>`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":234960,"byte_end":235021,"line_start":1149,"line_end":1149,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":235026,"byte_end":235029,"line_start":1150,"line_end":1150,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":235034,"byte_end":235046,"line_start":1151,"line_end":1151,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":235051,"byte_end":235054,"line_start":1152,"line_end":1152,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":235059,"byte_end":235138,"line_start":1153,"line_end":1153,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1508},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":235691,"byte_end":235701,"line_start":1170,"line_end":1170,"column_start":12,"column_end":22},"name":"from_pixel","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_pixel","value":"pub fn from_pixel(u32, u32, P) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by copying a pixel","sig":null,"attributes":[{"value":"/ Constructs a new ImageBuffer by copying a pixel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":235511,"byte_end":235562,"line_start":1165,"line_end":1165,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":235567,"byte_end":235570,"line_start":1166,"line_end":1166,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":235575,"byte_end":235587,"line_start":1167,"line_end":1167,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":235592,"byte_end":235595,"line_start":1168,"line_end":1168,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":235600,"byte_end":235679,"line_start":1169,"line_end":1169,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1509},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":236216,"byte_end":236223,"line_start":1185,"line_end":1185,"column_start":12,"column_end":19},"name":"from_fn","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_fn","value":"pub fn from_fn<F>(u32, u32, F) -> ImageBuffer<P, Vec<P::Subpixel>> where\nF: FnMut(u32, u32) -> P","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by repeated application of the supplied function.","sig":null,"attributes":[{"value":"/ Constructs a new ImageBuffer by repeated application of the supplied function.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":235922,"byte_end":236004,"line_start":1178,"line_end":1178,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":236009,"byte_end":236012,"line_start":1179,"line_end":1179,"column_start":5,"column_end":8}},{"value":"/ The arguments to the function are the pixel's x and y coordinates.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":236017,"byte_end":236087,"line_start":1180,"line_end":1180,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":236092,"byte_end":236095,"line_start":1181,"line_end":1181,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":236100,"byte_end":236112,"line_start":1182,"line_end":1182,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":236117,"byte_end":236120,"line_start":1183,"line_end":1183,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":236125,"byte_end":236204,"line_start":1184,"line_end":1184,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1511},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":236634,"byte_end":236642,"line_start":1198,"line_end":1198,"column_start":12,"column_end":20},"name":"from_vec","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_vec","value":"pub fn from_vec(u32, u32, Vec<P::Subpixel>)\n-> Option<ImageBuffer<P, Vec<P::Subpixel>>>","parent":null,"children":[],"decl_id":null,"docs":" Creates an image buffer out of an existing buffer.\n Returns None if the buffer is not big enough.\n","sig":null,"attributes":[{"value":"/ Creates an image buffer out of an existing buffer.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":236514,"byte_end":236568,"line_start":1196,"line_end":1196,"column_start":5,"column_end":59}},{"value":"/ Returns None if the buffer is not big enough.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":236573,"byte_end":236622,"line_start":1197,"line_end":1197,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1512},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":236929,"byte_end":236937,"line_start":1208,"line_end":1208,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::into_vec","value":"pub fn into_vec(Self) -> Vec<P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the image buffer and returns the underlying data\n as an owned buffer\n","sig":null,"attributes":[{"value":"/ Consumes the image buffer and returns the underlying data","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":236829,"byte_end":236890,"line_start":1206,"line_end":1206,"column_start":5,"column_end":66}},{"value":"/ as an owned buffer","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":236895,"byte_end":236917,"line_start":1207,"line_end":1207,"column_start":5,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":1513},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":237065,"byte_end":237078,"line_start":1214,"line_end":1214,"column_start":11,"column_end":24},"name":"ConvertBuffer","qualname":"::buffer_::ConvertBuffer","value":"ConvertBuffer<T>","parent":null,"children":[{"krate":0,"index":1515}],"decl_id":null,"docs":" Provides color conversions for whole image buffers.\n","sig":null,"attributes":[{"value":"/ Provides color conversions for whole image buffers.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":236999,"byte_end":237054,"line_start":1213,"line_end":1213,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1515},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":237265,"byte_end":237272,"line_start":1219,"line_end":1219,"column_start":8,"column_end":15},"name":"convert","qualname":"::buffer_::ConvertBuffer::convert","value":"pub fn convert(&Self) -> T","parent":{"krate":0,"index":1513},"children":[],"decl_id":null,"docs":" Converts `self` to a buffer of type T","sig":null,"attributes":[{"value":"/ Converts `self` to a buffer of type T","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":237088,"byte_end":237129,"line_start":1215,"line_end":1215,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":237134,"byte_end":237137,"line_start":1216,"line_end":1216,"column_start":5,"column_end":8}},{"value":"/ A generic implementation is provided to convert any image buffer to a image buffer","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":237142,"byte_end":237228,"line_start":1217,"line_end":1217,"column_start":5,"column_end":91}},{"value":"/ based on a `Vec<T>`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":237233,"byte_end":237257,"line_start":1218,"line_end":1218,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1517},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":237540,"byte_end":237554,"line_start":1227,"line_end":1227,"column_start":12,"column_end":26},"name":"expand_palette","qualname":"<GrayImage>::expand_palette","value":"pub fn expand_palette(Self, &[(u8, u8, u8)], Option<u8>) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Expands a color palette by re-using the existing buffer.\n Assumes 8 bit per pixel. Uses an optionally transparent index to\n adjust it's alpha value accordingly.\n","sig":null,"attributes":[{"value":"/ Expands a color palette by re-using the existing buffer.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":237350,"byte_end":237410,"line_start":1224,"line_end":1224,"column_start":5,"column_end":65}},{"value":"/ Assumes 8 bit per pixel. Uses an optionally transparent index to","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":237415,"byte_end":237483,"line_start":1225,"line_end":1225,"column_start":5,"column_end":73}},{"value":"/ adjust it's alpha value accordingly.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":237488,"byte_end":237528,"line_start":1226,"line_end":1226,"column_start":5,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":1526},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":239689,"byte_end":239697,"line_start":1292,"line_end":1292,"column_start":10,"column_end":18},"name":"RgbImage","qualname":"::buffer_::RgbImage","value":"ImageBuffer<Rgb<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb image buffer\n","sig":null,"attributes":[{"value":"/ Sendable Rgb image buffer","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":239650,"byte_end":239679,"line_start":1291,"line_end":1291,"column_start":1,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":1527},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":239786,"byte_end":239795,"line_start":1294,"line_end":1294,"column_start":10,"column_end":19},"name":"RgbaImage","qualname":"::buffer_::RgbaImage","value":"ImageBuffer<Rgba<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb + alpha channel image buffer\n","sig":null,"attributes":[{"value":"/ Sendable Rgb + alpha channel image buffer","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":239731,"byte_end":239776,"line_start":1293,"line_end":1293,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":1528},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":239875,"byte_end":239884,"line_start":1296,"line_end":1296,"column_start":10,"column_end":19},"name":"GrayImage","qualname":"::buffer_::GrayImage","value":"ImageBuffer<Luma<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale image buffer\n","sig":null,"attributes":[{"value":"/ Sendable grayscale image buffer","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":239830,"byte_end":239865,"line_start":1295,"line_end":1295,"column_start":1,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":1529},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":239980,"byte_end":239994,"line_start":1298,"line_end":1298,"column_start":10,"column_end":24},"name":"GrayAlphaImage","qualname":"::buffer_::GrayAlphaImage","value":"ImageBuffer<LumaA<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale + alpha channel image buffer\n","sig":null,"attributes":[{"value":"/ Sendable grayscale + alpha channel image buffer","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":239919,"byte_end":239970,"line_start":1297,"line_end":1297,"column_start":1,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2749},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":248764,"byte_end":248766,"line_start":11,"line_end":11,"column_start":5,"column_end":7},"name":"L8","qualname":"::color::ColorType::L8","value":"ColorType::L8","parent":{"krate":0,"index":2748},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":248731,"byte_end":248759,"line_start":10,"line_end":10,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2751},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":248827,"byte_end":248830,"line_start":13,"line_end":13,"column_start":5,"column_end":8},"name":"La8","qualname":"::color::ColorType::La8","value":"ColorType::La8","parent":{"krate":0,"index":2748},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance with an alpha channel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":248772,"byte_end":248822,"line_start":12,"line_end":12,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2753},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":248885,"byte_end":248889,"line_start":15,"line_end":15,"column_start":5,"column_end":9},"name":"Rgb8","qualname":"::color::ColorType::Rgb8","value":"ColorType::Rgb8","parent":{"krate":0,"index":2748},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit R, G and B channels","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":248836,"byte_end":248880,"line_start":14,"line_end":14,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2755},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":248944,"byte_end":248949,"line_start":17,"line_end":17,"column_start":5,"column_end":10},"name":"Rgba8","qualname":"::color::ColorType::Rgba8","value":"ColorType::Rgba8","parent":{"krate":0,"index":2748},"children":[],"decl_id":null,"docs":" Pixel is 8-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit RGB with an alpha channel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":248895,"byte_end":248939,"line_start":16,"line_end":16,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2757},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":248990,"byte_end":248993,"line_start":20,"line_end":20,"column_start":5,"column_end":8},"name":"L16","qualname":"::color::ColorType::L16","value":"ColorType::L16","parent":{"krate":0,"index":2748},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":248956,"byte_end":248985,"line_start":19,"line_end":19,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2759},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":249055,"byte_end":249059,"line_start":22,"line_end":22,"column_start":5,"column_end":9},"name":"La16","qualname":"::color::ColorType::La16","value":"ColorType::La16","parent":{"krate":0,"index":2748},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance with an alpha channel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":248999,"byte_end":249050,"line_start":21,"line_end":21,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2761},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":249093,"byte_end":249098,"line_start":24,"line_end":24,"column_start":5,"column_end":10},"name":"Rgb16","qualname":"::color::ColorType::Rgb16","value":"ColorType::Rgb16","parent":{"krate":0,"index":2748},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGB\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGB","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":249065,"byte_end":249088,"line_start":23,"line_end":23,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2763},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":249133,"byte_end":249139,"line_start":26,"line_end":26,"column_start":5,"column_end":11},"name":"Rgba16","qualname":"::color::ColorType::Rgba16","value":"ColorType::Rgba16","parent":{"krate":0,"index":2748},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGBA\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGBA","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":249104,"byte_end":249128,"line_start":25,"line_end":25,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2765},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":249195,"byte_end":249199,"line_start":29,"line_end":29,"column_start":5,"column_end":9},"name":"Bgr8","qualname":"::color::ColorType::Bgr8","value":"ColorType::Bgr8","parent":{"krate":0,"index":2748},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit B, G and R channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit B, G and R channels","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":249146,"byte_end":249190,"line_start":28,"line_end":28,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2767},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":249254,"byte_end":249259,"line_start":31,"line_end":31,"column_start":5,"column_end":10},"name":"Bgra8","qualname":"::color::ColorType::Bgra8","value":"ColorType::Bgra8","parent":{"krate":0,"index":2748},"children":[],"decl_id":null,"docs":" Pixel is 8-bit BGR with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit BGR with an alpha channel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":249205,"byte_end":249249,"line_start":30,"line_end":30,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2769},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":249285,"byte_end":249300,"line_start":34,"line_end":34,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::color::ColorType::__NonExhaustive","value":"ColorType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":2748},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2748},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":248715,"byte_end":248724,"line_start":9,"line_end":9,"column_start":10,"column_end":19},"name":"ColorType","qualname":"::color::ColorType","value":"pub enum ColorType {\n    L8,\n    La8,\n    Rgb8,\n    Rgba8,\n    L16,\n    La16,\n    Rgb16,\n    Rgba16,\n    Bgr8,\n    Bgra8,\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2749},{"krate":0,"index":2751},{"krate":0,"index":2753},{"krate":0,"index":2755},{"krate":0,"index":2757},{"krate":0,"index":2759},{"krate":0,"index":2761},{"krate":0,"index":2763},{"krate":0,"index":2765},{"krate":0,"index":2767},{"krate":0,"index":2769}],"decl_id":null,"docs":" An enumeration over supported color types and bit depths\n","sig":null,"attributes":[{"value":"/ An enumeration over supported color types and bit depths","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":248594,"byte_end":248654,"line_start":7,"line_end":7,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1562},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":249448,"byte_end":249463,"line_start":39,"line_end":39,"column_start":12,"column_end":27},"name":"bytes_per_pixel","qualname":"<ColorType>::bytes_per_pixel","value":"pub fn bytes_per_pixel(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes contained in a pixel of `ColorType` ```c```\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes contained in a pixel of `ColorType` ```c```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":249361,"byte_end":249436,"line_start":38,"line_end":38,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1563},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":249926,"byte_end":249935,"line_start":52,"line_end":52,"column_start":12,"column_end":21},"name":"has_alpha","qualname":"<ColorType>::has_alpha","value":"pub fn has_alpha(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if there is an alpha channel.\n","sig":null,"attributes":[{"value":"/ Returns if there is an alpha channel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":249873,"byte_end":249914,"line_start":51,"line_end":51,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1565},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":250274,"byte_end":250283,"line_start":62,"line_end":62,"column_start":12,"column_end":21},"name":"has_color","qualname":"<ColorType>::has_color","value":"pub fn has_color(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns false if the color scheme is grayscale, true otherwise.\n","sig":null,"attributes":[{"value":"/ Returns false if the color scheme is grayscale, true otherwise.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":250195,"byte_end":250262,"line_start":61,"line_end":61,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1567},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":250677,"byte_end":250691,"line_start":73,"line_end":73,"column_start":12,"column_end":26},"name":"bits_per_pixel","qualname":"<ColorType>::bits_per_pixel","value":"pub fn bits_per_pixel(Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits contained in a pixel of `ColorType` ```c``` (which will always be\n a multiple of 8).\n","sig":null,"attributes":[{"value":"/ Returns the number of bits contained in a pixel of `ColorType` ```c``` (which will always be","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":250543,"byte_end":250639,"line_start":71,"line_end":71,"column_start":5,"column_end":101}},{"value":"/ a multiple of 8).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":250644,"byte_end":250665,"line_start":72,"line_end":72,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1568},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":250854,"byte_end":250867,"line_start":78,"line_end":78,"column_start":12,"column_end":25},"name":"channel_count","qualname":"<ColorType>::channel_count","value":"pub fn channel_count(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of color channels that make up this pixel\n","sig":null,"attributes":[{"value":"/ Returns the number of color channels that make up this pixel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":250778,"byte_end":250842,"line_start":77,"line_end":77,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2788},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":251525,"byte_end":251527,"line_start":95,"line_end":95,"column_start":5,"column_end":7},"name":"A8","qualname":"::color::ExtendedColorType::A8","value":"ExtendedColorType::A8","parent":{"krate":0,"index":2787},"children":[],"decl_id":null,"docs":" Pixel is 8-bit alpha\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit alpha","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":251496,"byte_end":251520,"line_start":94,"line_end":94,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2790},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":251566,"byte_end":251568,"line_start":97,"line_end":97,"column_start":5,"column_end":7},"name":"L1","qualname":"::color::ExtendedColorType::L1","value":"ExtendedColorType::L1","parent":{"krate":0,"index":2787},"children":[],"decl_id":null,"docs":" Pixel is 1-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 1-bit luminance","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":251533,"byte_end":251561,"line_start":96,"line_end":96,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2792},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":251629,"byte_end":251632,"line_start":99,"line_end":99,"column_start":5,"column_end":8},"name":"La1","qualname":"::color::ExtendedColorType::La1","value":"ExtendedColorType::La1","parent":{"krate":0,"index":2787},"children":[],"decl_id":null,"docs":" Pixel is 1-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 1-bit luminance with an alpha channel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":251574,"byte_end":251624,"line_start":98,"line_end":98,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2794},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":251687,"byte_end":251691,"line_start":101,"line_end":101,"column_start":5,"column_end":9},"name":"Rgb1","qualname":"::color::ExtendedColorType::Rgb1","value":"ExtendedColorType::Rgb1","parent":{"krate":0,"index":2787},"children":[],"decl_id":null,"docs":" Pixel contains 1-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 1-bit R, G and B channels","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":251638,"byte_end":251682,"line_start":100,"line_end":100,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2796},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":251746,"byte_end":251751,"line_start":103,"line_end":103,"column_start":5,"column_end":10},"name":"Rgba1","qualname":"::color::ExtendedColorType::Rgba1","value":"ExtendedColorType::Rgba1","parent":{"krate":0,"index":2787},"children":[],"decl_id":null,"docs":" Pixel is 1-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 1-bit RGB with an alpha channel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":251697,"byte_end":251741,"line_start":102,"line_end":102,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2798},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":251790,"byte_end":251792,"line_start":105,"line_end":105,"column_start":5,"column_end":7},"name":"L2","qualname":"::color::ExtendedColorType::L2","value":"ExtendedColorType::L2","parent":{"krate":0,"index":2787},"children":[],"decl_id":null,"docs":" Pixel is 2-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 2-bit luminance","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":251757,"byte_end":251785,"line_start":104,"line_end":104,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2800},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":251853,"byte_end":251856,"line_start":107,"line_end":107,"column_start":5,"column_end":8},"name":"La2","qualname":"::color::ExtendedColorType::La2","value":"ExtendedColorType::La2","parent":{"krate":0,"index":2787},"children":[],"decl_id":null,"docs":" Pixel is 2-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 2-bit luminance with an alpha channel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":251798,"byte_end":251848,"line_start":106,"line_end":106,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2802},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":251911,"byte_end":251915,"line_start":109,"line_end":109,"column_start":5,"column_end":9},"name":"Rgb2","qualname":"::color::ExtendedColorType::Rgb2","value":"ExtendedColorType::Rgb2","parent":{"krate":0,"index":2787},"children":[],"decl_id":null,"docs":" Pixel contains 2-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 2-bit R, G and B channels","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":251862,"byte_end":251906,"line_start":108,"line_end":108,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2804},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":251970,"byte_end":251975,"line_start":111,"line_end":111,"column_start":5,"column_end":10},"name":"Rgba2","qualname":"::color::ExtendedColorType::Rgba2","value":"ExtendedColorType::Rgba2","parent":{"krate":0,"index":2787},"children":[],"decl_id":null,"docs":" Pixel is 2-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 2-bit RGB with an alpha channel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":251921,"byte_end":251965,"line_start":110,"line_end":110,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2806},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":252014,"byte_end":252016,"line_start":113,"line_end":113,"column_start":5,"column_end":7},"name":"L4","qualname":"::color::ExtendedColorType::L4","value":"ExtendedColorType::L4","parent":{"krate":0,"index":2787},"children":[],"decl_id":null,"docs":" Pixel is 4-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 4-bit luminance","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":251981,"byte_end":252009,"line_start":112,"line_end":112,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2808},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":252077,"byte_end":252080,"line_start":115,"line_end":115,"column_start":5,"column_end":8},"name":"La4","qualname":"::color::ExtendedColorType::La4","value":"ExtendedColorType::La4","parent":{"krate":0,"index":2787},"children":[],"decl_id":null,"docs":" Pixel is 4-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 4-bit luminance with an alpha channel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":252022,"byte_end":252072,"line_start":114,"line_end":114,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2810},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":252135,"byte_end":252139,"line_start":117,"line_end":117,"column_start":5,"column_end":9},"name":"Rgb4","qualname":"::color::ExtendedColorType::Rgb4","value":"ExtendedColorType::Rgb4","parent":{"krate":0,"index":2787},"children":[],"decl_id":null,"docs":" Pixel contains 4-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 4-bit R, G and B channels","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":252086,"byte_end":252130,"line_start":116,"line_end":116,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2812},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":252194,"byte_end":252199,"line_start":119,"line_end":119,"column_start":5,"column_end":10},"name":"Rgba4","qualname":"::color::ExtendedColorType::Rgba4","value":"ExtendedColorType::Rgba4","parent":{"krate":0,"index":2787},"children":[],"decl_id":null,"docs":" Pixel is 4-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 4-bit RGB with an alpha channel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":252145,"byte_end":252189,"line_start":118,"line_end":118,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2814},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":252238,"byte_end":252240,"line_start":121,"line_end":121,"column_start":5,"column_end":7},"name":"L8","qualname":"::color::ExtendedColorType::L8","value":"ExtendedColorType::L8","parent":{"krate":0,"index":2787},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":252205,"byte_end":252233,"line_start":120,"line_end":120,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2816},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":252301,"byte_end":252304,"line_start":123,"line_end":123,"column_start":5,"column_end":8},"name":"La8","qualname":"::color::ExtendedColorType::La8","value":"ExtendedColorType::La8","parent":{"krate":0,"index":2787},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance with an alpha channel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":252246,"byte_end":252296,"line_start":122,"line_end":122,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2818},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":252359,"byte_end":252363,"line_start":125,"line_end":125,"column_start":5,"column_end":9},"name":"Rgb8","qualname":"::color::ExtendedColorType::Rgb8","value":"ExtendedColorType::Rgb8","parent":{"krate":0,"index":2787},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit R, G and B channels","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":252310,"byte_end":252354,"line_start":124,"line_end":124,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2820},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":252418,"byte_end":252423,"line_start":127,"line_end":127,"column_start":5,"column_end":10},"name":"Rgba8","qualname":"::color::ExtendedColorType::Rgba8","value":"ExtendedColorType::Rgba8","parent":{"krate":0,"index":2787},"children":[],"decl_id":null,"docs":" Pixel is 8-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit RGB with an alpha channel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":252369,"byte_end":252413,"line_start":126,"line_end":126,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2822},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":252463,"byte_end":252466,"line_start":129,"line_end":129,"column_start":5,"column_end":8},"name":"L16","qualname":"::color::ExtendedColorType::L16","value":"ExtendedColorType::L16","parent":{"krate":0,"index":2787},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":252429,"byte_end":252458,"line_start":128,"line_end":128,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2824},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":252528,"byte_end":252532,"line_start":131,"line_end":131,"column_start":5,"column_end":9},"name":"La16","qualname":"::color::ExtendedColorType::La16","value":"ExtendedColorType::La16","parent":{"krate":0,"index":2787},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance with an alpha channel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":252472,"byte_end":252523,"line_start":130,"line_end":130,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2826},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":252588,"byte_end":252593,"line_start":133,"line_end":133,"column_start":5,"column_end":10},"name":"Rgb16","qualname":"::color::ExtendedColorType::Rgb16","value":"ExtendedColorType::Rgb16","parent":{"krate":0,"index":2787},"children":[],"decl_id":null,"docs":" Pixel contains 16-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 16-bit R, G and B channels","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":252538,"byte_end":252583,"line_start":132,"line_end":132,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2828},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":252649,"byte_end":252655,"line_start":135,"line_end":135,"column_start":5,"column_end":11},"name":"Rgba16","qualname":"::color::ExtendedColorType::Rgba16","value":"ExtendedColorType::Rgba16","parent":{"krate":0,"index":2787},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGB with an alpha channel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":252599,"byte_end":252644,"line_start":134,"line_end":134,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2830},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":252710,"byte_end":252714,"line_start":137,"line_end":137,"column_start":5,"column_end":9},"name":"Bgr8","qualname":"::color::ExtendedColorType::Bgr8","value":"ExtendedColorType::Bgr8","parent":{"krate":0,"index":2787},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit B, G and R channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit B, G and R channels","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":252661,"byte_end":252705,"line_start":136,"line_end":136,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2832},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":252769,"byte_end":252774,"line_start":139,"line_end":139,"column_start":5,"column_end":10},"name":"Bgra8","qualname":"::color::ExtendedColorType::Bgra8","value":"ExtendedColorType::Bgra8","parent":{"krate":0,"index":2787},"children":[],"decl_id":null,"docs":" Pixel is 8-bit BGR with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit BGR with an alpha channel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":252720,"byte_end":252764,"line_start":138,"line_end":138,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2834},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":253003,"byte_end":253010,"line_start":144,"line_end":144,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::color::ExtendedColorType::Unknown","value":"ExtendedColorType::Unknown(u8)","parent":{"krate":0,"index":2787},"children":[],"decl_id":null,"docs":" Pixel is of unknown color type with the specified bits per pixel. This can apply to pixels\n which are associated with an external palette. In that case, the pixel value is an index\n into the palette.\n","sig":null,"attributes":[{"value":"/ Pixel is of unknown color type with the specified bits per pixel. This can apply to pixels","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":252781,"byte_end":252875,"line_start":141,"line_end":141,"column_start":5,"column_end":99}},{"value":"/ which are associated with an external palette. In that case, the pixel value is an index","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":252880,"byte_end":252972,"line_start":142,"line_end":142,"column_start":5,"column_end":97}},{"value":"/ into the palette.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":252977,"byte_end":252998,"line_start":143,"line_end":143,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2837},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":253040,"byte_end":253055,"line_start":147,"line_end":147,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::color::ExtendedColorType::__NonExhaustive","value":"ExtendedColorType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":2787},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2787},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":251472,"byte_end":251489,"line_start":93,"line_end":93,"column_start":10,"column_end":27},"name":"ExtendedColorType","qualname":"::color::ExtendedColorType","value":"pub enum ExtendedColorType {\n    A8,\n    L1,\n    La1,\n    Rgb1,\n    Rgba1,\n    L2,\n    La2,\n    Rgb2,\n    Rgba2,\n    L4,\n    La4,\n    Rgb4,\n    Rgba4,\n    L8,\n    La8,\n    Rgb8,\n    Rgba8,\n    L16,\n    La16,\n    Rgb16,\n    Rgba16,\n    Bgr8,\n    Bgra8,\n    Unknown(u8),\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2788},{"krate":0,"index":2790},{"krate":0,"index":2792},{"krate":0,"index":2794},{"krate":0,"index":2796},{"krate":0,"index":2798},{"krate":0,"index":2800},{"krate":0,"index":2802},{"krate":0,"index":2804},{"krate":0,"index":2806},{"krate":0,"index":2808},{"krate":0,"index":2810},{"krate":0,"index":2812},{"krate":0,"index":2814},{"krate":0,"index":2816},{"krate":0,"index":2818},{"krate":0,"index":2820},{"krate":0,"index":2822},{"krate":0,"index":2824},{"krate":0,"index":2826},{"krate":0,"index":2828},{"krate":0,"index":2830},{"krate":0,"index":2832},{"krate":0,"index":2834},{"krate":0,"index":2837}],"decl_id":null,"docs":" An enumeration of color types encountered in image formats.","sig":null,"attributes":[{"value":"/ An enumeration of color types encountered in image formats.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":250965,"byte_end":251028,"line_start":84,"line_end":84,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":251029,"byte_end":251032,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ This is not exhaustive over all existing image formats but should be granular enough to allow","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":251033,"byte_end":251130,"line_start":86,"line_end":86,"column_start":1,"column_end":98}},{"value":"/ round tripping of decoding and encoding as much as possible. The variants will be extended as","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":251131,"byte_end":251228,"line_start":87,"line_end":87,"column_start":1,"column_end":98}},{"value":"/ necessary to enable this.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":251229,"byte_end":251258,"line_start":88,"line_end":88,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":251259,"byte_end":251262,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ Another purpose is to advise users of a rough estimate of the accuracy and effort of the","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":251263,"byte_end":251355,"line_start":90,"line_end":90,"column_start":1,"column_end":93}},{"value":"/ decoding from and encoding to such an image format.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":251356,"byte_end":251411,"line_start":91,"line_end":91,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1570},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":253338,"byte_end":253351,"line_start":155,"line_end":155,"column_start":12,"column_end":25},"name":"channel_count","qualname":"<ExtendedColorType>::channel_count","value":"pub fn channel_count(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the number of channels for colors of this type.","sig":null,"attributes":[{"value":"/ Get the number of channels for colors of this type.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":253124,"byte_end":253179,"line_start":151,"line_end":151,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":253184,"byte_end":253187,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ Note that the `Unknown` variant returns a value of `1` since pixels can only be treated as","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":253192,"byte_end":253286,"line_start":153,"line_end":153,"column_start":5,"column_end":99}},{"value":"/ an opaque datum by the library.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":253291,"byte_end":253326,"line_start":154,"line_end":154,"column_start":5,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":3155},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":259755,"byte_end":259758,"line_start":376,"line_end":376,"column_start":5,"column_end":8},"name":"Rgb","qualname":"::color::Rgb","value":"","parent":null,"children":[],"decl_id":null,"docs":"RGB colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":255501,"byte_end":255511,"line_start":218,"line_end":218,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":255512,"byte_end":255534,"line_start":219,"line_end":219,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3184},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":259835,"byte_end":259838,"line_start":377,"line_end":377,"column_start":5,"column_end":8},"name":"Bgr","qualname":"::color::Bgr","value":"","parent":null,"children":[],"decl_id":null,"docs":"BGR colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":255501,"byte_end":255511,"line_start":218,"line_end":218,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":255512,"byte_end":255534,"line_start":219,"line_end":219,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3213},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":259914,"byte_end":259918,"line_start":378,"line_end":378,"column_start":5,"column_end":9},"name":"Luma","qualname":"::color::Luma","value":"","parent":null,"children":[],"decl_id":null,"docs":"Grayscale colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":255501,"byte_end":255511,"line_start":218,"line_end":218,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":255512,"byte_end":255534,"line_start":219,"line_end":219,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3242},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":259995,"byte_end":259999,"line_start":379,"line_end":379,"column_start":5,"column_end":9},"name":"Rgba","qualname":"::color::Rgba","value":"","parent":null,"children":[],"decl_id":null,"docs":"RGB colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":255501,"byte_end":255511,"line_start":218,"line_end":218,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":255512,"byte_end":255534,"line_start":219,"line_end":219,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3271},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":260095,"byte_end":260099,"line_start":380,"line_end":380,"column_start":5,"column_end":9},"name":"Bgra","qualname":"::color::Bgra","value":"","parent":null,"children":[],"decl_id":null,"docs":"BGR colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":255501,"byte_end":255511,"line_start":218,"line_end":218,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":255512,"byte_end":255534,"line_start":219,"line_end":219,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3300},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":260194,"byte_end":260199,"line_start":381,"line_end":381,"column_start":5,"column_end":10},"name":"LumaA","qualname":"::color::LumaA","value":"","parent":null,"children":[],"decl_id":null,"docs":"Grayscale colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":255501,"byte_end":255511,"line_start":218,"line_end":218,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":255512,"byte_end":255534,"line_start":219,"line_end":219,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":1574},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":260366,"byte_end":260375,"line_start":385,"line_end":385,"column_start":11,"column_end":20},"name":"FromColor","qualname":"::color::FromColor","value":"FromColor<Other>","parent":null,"children":[{"krate":0,"index":1576}],"decl_id":null,"docs":" Provides color conversions for the different pixel types.\n","sig":null,"attributes":[{"value":"/ Provides color conversions for the different pixel types.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":260294,"byte_end":260355,"line_start":384,"line_end":384,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1576},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":260465,"byte_end":260475,"line_start":387,"line_end":387,"column_start":8,"column_end":18},"name":"from_color","qualname":"::color::FromColor::from_color","value":"pub fn from_color(&mut Self, &Other)","parent":{"krate":0,"index":1574},"children":[],"decl_id":null,"docs":" Changes `self` to represent `Other` in the color space of `Self`\n","sig":null,"attributes":[{"value":"/ Changes `self` to represent `Other` in the color space of `Self`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":260389,"byte_end":260457,"line_start":386,"line_end":386,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3381},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":294217,"byte_end":294227,"line_start":45,"line_end":45,"column_start":5,"column_end":15},"name":"ImageLuma8","qualname":"::dynimage::DynamicImage::ImageLuma8","value":"DynamicImage::ImageLuma8(GrayImage)","parent":{"krate":0,"index":3380},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Luma","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":294170,"byte_end":294212,"line_start":44,"line_end":44,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3384},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":294303,"byte_end":294314,"line_start":48,"line_end":48,"column_start":5,"column_end":16},"name":"ImageLumaA8","qualname":"::dynimage::DynamicImage::ImageLumaA8","value":"DynamicImage::ImageLumaA8(GrayAlphaImage)","parent":{"krate":0,"index":3380},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Luma with alpha","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":294245,"byte_end":294298,"line_start":47,"line_end":47,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3387},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":294383,"byte_end":294392,"line_start":51,"line_end":51,"column_start":5,"column_end":14},"name":"ImageRgb8","qualname":"::dynimage::DynamicImage::ImageRgb8","value":"DynamicImage::ImageRgb8(RgbImage)","parent":{"krate":0,"index":3380},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Rgb","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":294337,"byte_end":294378,"line_start":50,"line_end":50,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3390},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":294466,"byte_end":294476,"line_start":54,"line_end":54,"column_start":5,"column_end":15},"name":"ImageRgba8","qualname":"::dynimage::DynamicImage::ImageRgba8","value":"DynamicImage::ImageRgba8(RgbaImage)","parent":{"krate":0,"index":3380},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Rgb with alpha","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":294409,"byte_end":294461,"line_start":53,"line_end":53,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3393},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":294540,"byte_end":294549,"line_start":57,"line_end":57,"column_start":5,"column_end":14},"name":"ImageBgr8","qualname":"::dynimage::DynamicImage::ImageBgr8","value":"DynamicImage::ImageBgr8(BgrImage)","parent":{"krate":0,"index":3380},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Bgr\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Bgr","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":294494,"byte_end":294535,"line_start":56,"line_end":56,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3396},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":294623,"byte_end":294633,"line_start":60,"line_end":60,"column_start":5,"column_end":15},"name":"ImageBgra8","qualname":"::dynimage::DynamicImage::ImageBgra8","value":"DynamicImage::ImageBgra8(BgraImage)","parent":{"krate":0,"index":3380},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Bgr with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Bgr with alpha","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":294566,"byte_end":294618,"line_start":59,"line_end":59,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3399},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":294699,"byte_end":294710,"line_start":63,"line_end":63,"column_start":5,"column_end":16},"name":"ImageLuma16","qualname":"::dynimage::DynamicImage::ImageLuma16","value":"DynamicImage::ImageLuma16(Gray16Image)","parent":{"krate":0,"index":3380},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Luma\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Luma","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":294651,"byte_end":294694,"line_start":62,"line_end":62,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3402},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":294789,"byte_end":294801,"line_start":66,"line_end":66,"column_start":5,"column_end":17},"name":"ImageLumaA16","qualname":"::dynimage::DynamicImage::ImageLumaA16","value":"DynamicImage::ImageLumaA16(GrayAlpha16Image)","parent":{"krate":0,"index":3380},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Luma with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Luma with alpha","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":294730,"byte_end":294784,"line_start":65,"line_end":65,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3405},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":294873,"byte_end":294883,"line_start":69,"line_end":69,"column_start":5,"column_end":15},"name":"ImageRgb16","qualname":"::dynimage::DynamicImage::ImageRgb16","value":"DynamicImage::ImageRgb16(Rgb16Image)","parent":{"krate":0,"index":3380},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Rgb\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Rgb","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":294826,"byte_end":294868,"line_start":68,"line_end":68,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3408},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":294960,"byte_end":294971,"line_start":72,"line_end":72,"column_start":5,"column_end":16},"name":"ImageRgba16","qualname":"::dynimage::DynamicImage::ImageRgba16","value":"DynamicImage::ImageRgba16(Rgba16Image)","parent":{"krate":0,"index":3380},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Rgb with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Rgb with alpha","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":294902,"byte_end":294955,"line_start":71,"line_end":71,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":3380},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":294151,"byte_end":294163,"line_start":43,"line_end":43,"column_start":10,"column_end":22},"name":"DynamicImage","qualname":"::dynimage::DynamicImage","value":"pub enum DynamicImage {\n    ImageLuma8(GrayImage),\n    ImageLumaA8(GrayAlphaImage),\n    ImageRgb8(RgbImage),\n    ImageRgba8(RgbaImage),\n    ImageBgr8(BgrImage),\n    ImageBgra8(BgraImage),\n    ImageLuma16(Gray16Image),\n    ImageLumaA16(GrayAlpha16Image),\n    ImageRgb16(Rgb16Image),\n    ImageRgba16(Rgba16Image),\n}","parent":null,"children":[{"krate":0,"index":3381},{"krate":0,"index":3384},{"krate":0,"index":3387},{"krate":0,"index":3390},{"krate":0,"index":3393},{"krate":0,"index":3396},{"krate":0,"index":3399},{"krate":0,"index":3402},{"krate":0,"index":3405},{"krate":0,"index":3408}],"decl_id":null,"docs":" A Dynamic Image\n","sig":null,"attributes":[{"value":"/ A Dynamic Image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":294077,"byte_end":294096,"line_start":41,"line_end":41,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1906},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":299186,"byte_end":299195,"line_start":139,"line_end":139,"column_start":12,"column_end":21},"name":"new_luma8","qualname":"<DynamicImage>::new_luma8","value":"pub fn new_luma8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey pixels.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":299112,"byte_end":299174,"line_start":138,"line_end":138,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1907},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":299398,"byte_end":299409,"line_start":145,"line_end":145,"column_start":12,"column_end":23},"name":"new_luma_a8","qualname":"<DynamicImage>::new_luma_a8","value":"pub fn new_luma_a8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey\n pixels with transparency.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":299298,"byte_end":299352,"line_start":143,"line_end":143,"column_start":5,"column_end":59}},{"value":"/ pixels with transparency.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":299357,"byte_end":299386,"line_start":144,"line_end":144,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1908},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":299586,"byte_end":299594,"line_start":150,"line_end":150,"column_start":12,"column_end":20},"name":"new_rgb8","qualname":"<DynamicImage>::new_rgb8","value":"pub fn new_rgb8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGB pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGB pixels.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":299513,"byte_end":299574,"line_start":149,"line_end":149,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1909},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":299770,"byte_end":299779,"line_start":155,"line_end":155,"column_start":12,"column_end":21},"name":"new_rgba8","qualname":"<DynamicImage>::new_rgba8","value":"pub fn new_rgba8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGBA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGBA pixels.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":299696,"byte_end":299758,"line_start":154,"line_end":154,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1910},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":299956,"byte_end":299965,"line_start":160,"line_end":160,"column_start":12,"column_end":21},"name":"new_bgra8","qualname":"<DynamicImage>::new_bgra8","value":"pub fn new_bgra8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of BGRA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of BGRA pixels.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":299882,"byte_end":299944,"line_start":159,"line_end":159,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1911},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":300141,"byte_end":300149,"line_start":165,"line_end":165,"column_start":12,"column_end":20},"name":"new_bgr8","qualname":"<DynamicImage>::new_bgr8","value":"pub fn new_bgr8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of BGR pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of BGR pixels.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":300068,"byte_end":300129,"line_start":164,"line_end":164,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1912},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":300325,"byte_end":300335,"line_start":170,"line_end":170,"column_start":12,"column_end":22},"name":"new_luma16","qualname":"<DynamicImage>::new_luma16","value":"pub fn new_luma16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey pixels.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":300251,"byte_end":300313,"line_start":169,"line_end":169,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1913},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":300539,"byte_end":300551,"line_start":176,"line_end":176,"column_start":12,"column_end":24},"name":"new_luma_a16","qualname":"<DynamicImage>::new_luma_a16","value":"pub fn new_luma_a16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey\n pixels with transparency.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":300439,"byte_end":300493,"line_start":174,"line_end":174,"column_start":5,"column_end":59}},{"value":"/ pixels with transparency.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":300498,"byte_end":300527,"line_start":175,"line_end":175,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1914},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":300729,"byte_end":300738,"line_start":181,"line_end":181,"column_start":12,"column_end":21},"name":"new_rgb16","qualname":"<DynamicImage>::new_rgb16","value":"pub fn new_rgb16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGB pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGB pixels.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":300656,"byte_end":300717,"line_start":180,"line_end":180,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1915},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":300915,"byte_end":300925,"line_start":186,"line_end":186,"column_start":12,"column_end":22},"name":"new_rgba16","qualname":"<DynamicImage>::new_rgba16","value":"pub fn new_rgba16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGBA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGBA pixels.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":300841,"byte_end":300903,"line_start":185,"line_end":185,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1916},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":301091,"byte_end":301103,"line_start":191,"line_end":191,"column_start":12,"column_end":24},"name":"from_decoder","qualname":"<DynamicImage>::from_decoder","value":"pub fn from_decoder<'a,\n                    impl ImageDecoder<'a>: ImageDecoder>(impl ImageDecoder<'a>)\n-> ImageResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Decodes an encoded image into a dynamic image.\n","sig":null,"attributes":[{"value":"/ Decodes an encoded image into a dynamic image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":301029,"byte_end":301079,"line_start":190,"line_end":190,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1919},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":301325,"byte_end":301331,"line_start":199,"line_end":199,"column_start":12,"column_end":18},"name":"to_rgb","qualname":"<DynamicImage>::to_rgb","value":"pub fn to_rgb(&Self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGB image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGB image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":301220,"byte_end":301269,"line_start":197,"line_end":197,"column_start":5,"column_end":54}},{"value":"deprecated = \"replaced by `to_rgb8`\"","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":301274,"byte_end":301313,"line_start":198,"line_end":198,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1920},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":301499,"byte_end":301506,"line_start":206,"line_end":206,"column_start":12,"column_end":19},"name":"to_rgb8","qualname":"<DynamicImage>::to_rgb8","value":"pub fn to_rgb8(&Self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGB image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGB image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":301438,"byte_end":301487,"line_start":205,"line_end":205,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1921},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":301674,"byte_end":301682,"line_start":213,"line_end":213,"column_start":12,"column_end":20},"name":"to_rgb16","qualname":"<DynamicImage>::to_rgb16","value":"pub fn to_rgb16(&Self) -> Rgb16Image","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGB image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGB image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":301613,"byte_end":301662,"line_start":212,"line_end":212,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1922},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":301898,"byte_end":301905,"line_start":221,"line_end":221,"column_start":12,"column_end":19},"name":"to_rgba","qualname":"<DynamicImage>::to_rgba","value":"pub fn to_rgba(&Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGBA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGBA image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":301791,"byte_end":301841,"line_start":219,"line_end":219,"column_start":5,"column_end":55}},{"value":"deprecated = \"replaced by `to_rgba8`\"","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":301846,"byte_end":301886,"line_start":220,"line_end":220,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1923},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":302075,"byte_end":302083,"line_start":228,"line_end":228,"column_start":12,"column_end":20},"name":"to_rgba8","qualname":"<DynamicImage>::to_rgba8","value":"pub fn to_rgba8(&Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGBA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGBA image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":302013,"byte_end":302063,"line_start":227,"line_end":227,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1924},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":302253,"byte_end":302262,"line_start":235,"line_end":235,"column_start":12,"column_end":21},"name":"to_rgba16","qualname":"<DynamicImage>::to_rgba16","value":"pub fn to_rgba16(&Self) -> Rgba16Image","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGBA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGBA image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":302191,"byte_end":302241,"line_start":234,"line_end":234,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1925},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":302477,"byte_end":302483,"line_start":243,"line_end":243,"column_start":12,"column_end":18},"name":"to_bgr","qualname":"<DynamicImage>::to_bgr","value":"pub fn to_bgr(&Self) -> BgrImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGR image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an BGR image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":302372,"byte_end":302421,"line_start":241,"line_end":241,"column_start":5,"column_end":54}},{"value":"deprecated = \"replaced by `to_bgr8`\"","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":302426,"byte_end":302465,"line_start":242,"line_end":242,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1926},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":302651,"byte_end":302658,"line_start":250,"line_end":250,"column_start":12,"column_end":19},"name":"to_bgr8","qualname":"<DynamicImage>::to_bgr8","value":"pub fn to_bgr8(&Self) -> BgrImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGR image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an BGR image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":302590,"byte_end":302639,"line_start":249,"line_end":249,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1927},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":302872,"byte_end":302879,"line_start":258,"line_end":258,"column_start":12,"column_end":19},"name":"to_bgra","qualname":"<DynamicImage>::to_bgra","value":"pub fn to_bgra(&Self) -> BgraImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGRA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an BGRA image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":302765,"byte_end":302815,"line_start":256,"line_end":256,"column_start":5,"column_end":55}},{"value":"deprecated = \"replaced by `to_bgra8`\"","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":302820,"byte_end":302860,"line_start":257,"line_end":257,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1928},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":303049,"byte_end":303057,"line_start":265,"line_end":265,"column_start":12,"column_end":20},"name":"to_bgra8","qualname":"<DynamicImage>::to_bgra8","value":"pub fn to_bgra8(&Self) -> BgraImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGRA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an BGRA image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":302987,"byte_end":303037,"line_start":264,"line_end":264,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1929},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":303271,"byte_end":303278,"line_start":273,"line_end":273,"column_start":12,"column_end":19},"name":"to_luma","qualname":"<DynamicImage>::to_luma","value":"pub fn to_luma(&Self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a Luma image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a Luma image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":303165,"byte_end":303214,"line_start":271,"line_end":271,"column_start":5,"column_end":54}},{"value":"deprecated = \"replaced by `to_luma8`\"","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":303219,"byte_end":303259,"line_start":272,"line_end":272,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1930},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":303447,"byte_end":303455,"line_start":280,"line_end":280,"column_start":12,"column_end":20},"name":"to_luma8","qualname":"<DynamicImage>::to_luma8","value":"pub fn to_luma8(&Self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a Luma image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a Luma image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":303386,"byte_end":303435,"line_start":279,"line_end":279,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1931},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":303624,"byte_end":303633,"line_start":287,"line_end":287,"column_start":12,"column_end":21},"name":"to_luma16","qualname":"<DynamicImage>::to_luma16","value":"pub fn to_luma16(&Self) -> Gray16Image","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a Luma image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a Luma image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":303563,"byte_end":303612,"line_start":286,"line_end":286,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1932},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":303856,"byte_end":303869,"line_start":295,"line_end":295,"column_start":12,"column_end":25},"name":"to_luma_alpha","qualname":"<DynamicImage>::to_luma_alpha","value":"pub fn to_luma_alpha(&Self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a LumaA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a LumaA image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":303743,"byte_end":303793,"line_start":293,"line_end":293,"column_start":5,"column_end":55}},{"value":"deprecated = \"replaced by `to_luma_alpha8`\"","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":303798,"byte_end":303844,"line_start":294,"line_end":294,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1933},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":304044,"byte_end":304058,"line_start":302,"line_end":302,"column_start":12,"column_end":26},"name":"to_luma_alpha8","qualname":"<DynamicImage>::to_luma_alpha8","value":"pub fn to_luma_alpha8(&Self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a LumaA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a LumaA image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":303982,"byte_end":304032,"line_start":301,"line_end":301,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1934},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":304233,"byte_end":304248,"line_start":309,"line_end":309,"column_start":12,"column_end":27},"name":"to_luma_alpha16","qualname":"<DynamicImage>::to_luma_alpha16","value":"pub fn to_luma_alpha16(&Self) -> GrayAlpha16Image","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a LumaA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a LumaA image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":304171,"byte_end":304221,"line_start":308,"line_end":308,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1935},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":304588,"byte_end":304596,"line_start":320,"line_end":320,"column_start":12,"column_end":20},"name":"into_rgb","qualname":"<DynamicImage>::into_rgb","value":"pub fn into_rgb(Self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGB image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGB image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":304363,"byte_end":304409,"line_start":315,"line_end":315,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":304414,"byte_end":304417,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":304422,"byte_end":304492,"line_start":317,"line_end":317,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":304497,"byte_end":304530,"line_start":318,"line_end":318,"column_start":5,"column_end":38}},{"value":"deprecated = \"replaced by `into_rgb8`\"","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":304535,"byte_end":304576,"line_start":319,"line_end":319,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1936},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":304913,"byte_end":304922,"line_start":331,"line_end":331,"column_start":12,"column_end":21},"name":"into_rgb8","qualname":"<DynamicImage>::into_rgb8","value":"pub fn into_rgb8(Self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGB image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGB image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":304734,"byte_end":304780,"line_start":327,"line_end":327,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":304785,"byte_end":304788,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":304793,"byte_end":304863,"line_start":329,"line_end":329,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":304868,"byte_end":304901,"line_start":330,"line_end":330,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1937},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":305239,"byte_end":305249,"line_start":342,"line_end":342,"column_start":12,"column_end":22},"name":"into_rgb16","qualname":"<DynamicImage>::into_rgb16","value":"pub fn into_rgb16(Self) -> Rgb16Image","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGB image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGB image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":305060,"byte_end":305106,"line_start":338,"line_end":338,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":305111,"byte_end":305114,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":305119,"byte_end":305189,"line_start":340,"line_end":340,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":305194,"byte_end":305227,"line_start":341,"line_end":341,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1938},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":305618,"byte_end":305627,"line_start":354,"line_end":354,"column_start":12,"column_end":21},"name":"into_rgba","qualname":"<DynamicImage>::into_rgba","value":"pub fn into_rgba(Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGBA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGBA image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":305391,"byte_end":305438,"line_start":349,"line_end":349,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":305443,"byte_end":305446,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":305451,"byte_end":305521,"line_start":351,"line_end":351,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":305526,"byte_end":305559,"line_start":352,"line_end":352,"column_start":5,"column_end":38}},{"value":"deprecated = \"replaced by `into_rgba8`\"","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":305564,"byte_end":305606,"line_start":353,"line_end":353,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1939},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":305948,"byte_end":305958,"line_start":365,"line_end":365,"column_start":12,"column_end":22},"name":"into_rgba8","qualname":"<DynamicImage>::into_rgba8","value":"pub fn into_rgba8(Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGBA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGBA image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":305768,"byte_end":305815,"line_start":361,"line_end":361,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":305820,"byte_end":305823,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":305828,"byte_end":305898,"line_start":363,"line_end":363,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":305903,"byte_end":305936,"line_start":364,"line_end":364,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1940},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":306279,"byte_end":306290,"line_start":376,"line_end":376,"column_start":12,"column_end":23},"name":"into_rgba16","qualname":"<DynamicImage>::into_rgba16","value":"pub fn into_rgba16(Self) -> Rgba16Image","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGBA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGBA image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":306099,"byte_end":306146,"line_start":372,"line_end":372,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":306151,"byte_end":306154,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":306159,"byte_end":306229,"line_start":374,"line_end":374,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":306234,"byte_end":306267,"line_start":375,"line_end":375,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1941},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":306661,"byte_end":306669,"line_start":388,"line_end":388,"column_start":12,"column_end":20},"name":"into_bgr","qualname":"<DynamicImage>::into_bgr","value":"pub fn into_bgr(Self) -> BgrImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a BGR image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a BGR image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":306435,"byte_end":306481,"line_start":383,"line_end":383,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":306486,"byte_end":306489,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":306494,"byte_end":306564,"line_start":385,"line_end":385,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":306569,"byte_end":306602,"line_start":386,"line_end":386,"column_start":5,"column_end":38}},{"value":"deprecated = \"replaced by `into_bgra8`\"","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":306607,"byte_end":306649,"line_start":387,"line_end":387,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1942},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":306986,"byte_end":306995,"line_start":399,"line_end":399,"column_start":12,"column_end":21},"name":"into_bgr8","qualname":"<DynamicImage>::into_bgr8","value":"pub fn into_bgr8(Self) -> BgrImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a BGR image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a BGR image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":306807,"byte_end":306853,"line_start":395,"line_end":395,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":306858,"byte_end":306861,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":306866,"byte_end":306936,"line_start":397,"line_end":397,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":306941,"byte_end":306974,"line_start":398,"line_end":398,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1943},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":307461,"byte_end":307470,"line_start":413,"line_end":413,"column_start":12,"column_end":21},"name":"into_bgra","qualname":"<DynamicImage>::into_bgra","value":"pub fn into_bgra(Self) -> BgraImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a BGRA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a BGRA image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":307234,"byte_end":307281,"line_start":408,"line_end":408,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":307286,"byte_end":307289,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":307294,"byte_end":307364,"line_start":410,"line_end":410,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":307369,"byte_end":307402,"line_start":411,"line_end":411,"column_start":5,"column_end":38}},{"value":"deprecated = \"replaced by `into_bgra8`\"","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":307407,"byte_end":307449,"line_start":412,"line_end":412,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1944},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":307791,"byte_end":307801,"line_start":424,"line_end":424,"column_start":12,"column_end":22},"name":"into_bgra8","qualname":"<DynamicImage>::into_bgra8","value":"pub fn into_bgra8(Self) -> BgraImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a BGRA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a BGRA image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":307611,"byte_end":307658,"line_start":420,"line_end":420,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":307663,"byte_end":307666,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":307671,"byte_end":307741,"line_start":422,"line_end":422,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":307746,"byte_end":307779,"line_start":423,"line_end":423,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1945},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":308272,"byte_end":308281,"line_start":438,"line_end":438,"column_start":12,"column_end":21},"name":"into_luma","qualname":"<DynamicImage>::into_luma","value":"pub fn into_luma(Self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a Luma image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a Luma image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":308045,"byte_end":308092,"line_start":433,"line_end":433,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":308097,"byte_end":308100,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":308105,"byte_end":308175,"line_start":435,"line_end":435,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":308180,"byte_end":308213,"line_start":436,"line_end":436,"column_start":5,"column_end":38}},{"value":"deprecated = \"replaced by `into_luma8`\"","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":308218,"byte_end":308260,"line_start":437,"line_end":437,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1946},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":308602,"byte_end":308612,"line_start":449,"line_end":449,"column_start":12,"column_end":22},"name":"into_luma8","qualname":"<DynamicImage>::into_luma8","value":"pub fn into_luma8(Self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a Luma image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a Luma image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":308422,"byte_end":308469,"line_start":445,"line_end":445,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":308474,"byte_end":308477,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":308482,"byte_end":308552,"line_start":447,"line_end":447,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":308557,"byte_end":308590,"line_start":448,"line_end":448,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1947},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":308933,"byte_end":308944,"line_start":460,"line_end":460,"column_start":12,"column_end":23},"name":"into_luma16","qualname":"<DynamicImage>::into_luma16","value":"pub fn into_luma16(Self) -> Gray16Image","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a Luma image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a Luma image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":308753,"byte_end":308800,"line_start":456,"line_end":456,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":308805,"byte_end":308808,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":308813,"byte_end":308883,"line_start":458,"line_end":458,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":308888,"byte_end":308921,"line_start":459,"line_end":459,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1948},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":309323,"byte_end":309338,"line_start":472,"line_end":472,"column_start":12,"column_end":27},"name":"into_luma_alpha","qualname":"<DynamicImage>::into_luma_alpha","value":"pub fn into_luma_alpha(Self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a LumaA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a LumaA image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":309089,"byte_end":309137,"line_start":467,"line_end":467,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":309142,"byte_end":309145,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":309150,"byte_end":309220,"line_start":469,"line_end":469,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":309225,"byte_end":309258,"line_start":470,"line_end":470,"column_start":5,"column_end":38}},{"value":"deprecated = \"replaced by `into_luma_alpha8`\"","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":309263,"byte_end":309311,"line_start":471,"line_end":471,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1949},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":309672,"byte_end":309688,"line_start":483,"line_end":483,"column_start":12,"column_end":28},"name":"into_luma_alpha8","qualname":"<DynamicImage>::into_luma_alpha8","value":"pub fn into_luma_alpha8(Self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a LumaA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a LumaA image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":309491,"byte_end":309539,"line_start":479,"line_end":479,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":309544,"byte_end":309547,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":309552,"byte_end":309622,"line_start":481,"line_end":481,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":309627,"byte_end":309660,"line_start":482,"line_end":482,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1950},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":310022,"byte_end":310039,"line_start":494,"line_end":494,"column_start":12,"column_end":29},"name":"into_luma_alpha16","qualname":"<DynamicImage>::into_luma_alpha16","value":"pub fn into_luma_alpha16(Self) -> GrayAlpha16Image","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a LumaA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a LumaA image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":309841,"byte_end":309889,"line_start":490,"line_end":490,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":309894,"byte_end":309897,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":309902,"byte_end":309972,"line_start":492,"line_end":492,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":309977,"byte_end":310010,"line_start":493,"line_end":493,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1951},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":310426,"byte_end":310430,"line_start":505,"line_end":505,"column_start":12,"column_end":16},"name":"crop","qualname":"<DynamicImage>::crop","value":"pub fn crop(&mut Self, u32, u32, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a cut-out of this image delimited by the bounding rectangle.","sig":null,"attributes":[{"value":"/ Return a cut-out of this image delimited by the bounding rectangle.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":310196,"byte_end":310267,"line_start":501,"line_end":501,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":310272,"byte_end":310275,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ Note: this method does *not* modify the object,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":310280,"byte_end":310331,"line_start":503,"line_end":503,"column_start":5,"column_end":56}},{"value":"/ and its signature will be replaced with `crop_imm()`'s in the 0.24 release","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":310336,"byte_end":310414,"line_start":504,"line_end":504,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1952},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":310687,"byte_end":310695,"line_start":510,"line_end":510,"column_start":12,"column_end":20},"name":"crop_imm","qualname":"<DynamicImage>::crop_imm","value":"pub fn crop_imm(&Self, u32, u32, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a cut-out of this image delimited by the bounding rectangle.\n","sig":null,"attributes":[{"value":"/ Return a cut-out of this image delimited by the bounding rectangle.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":310604,"byte_end":310675,"line_start":509,"line_end":509,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1953},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":310920,"byte_end":310927,"line_start":515,"line_end":515,"column_start":12,"column_end":19},"name":"as_rgb8","qualname":"<DynamicImage>::as_rgb8","value":"pub fn as_rgb8(&Self) -> Option<&RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit RGB image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":310865,"byte_end":310908,"line_start":514,"line_end":514,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1954},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":311142,"byte_end":311153,"line_start":523,"line_end":523,"column_start":12,"column_end":23},"name":"as_mut_rgb8","qualname":"<DynamicImage>::as_mut_rgb8","value":"pub fn as_mut_rgb8(&mut Self) -> Option<&mut RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGB image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":311079,"byte_end":311130,"line_start":522,"line_end":522,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1955},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":311372,"byte_end":311379,"line_start":531,"line_end":531,"column_start":12,"column_end":19},"name":"as_bgr8","qualname":"<DynamicImage>::as_bgr8","value":"pub fn as_bgr8(&Self) -> Option<&BgrImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit BGR image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit BGR image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":311317,"byte_end":311360,"line_start":530,"line_end":530,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1956},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":311594,"byte_end":311605,"line_start":539,"line_end":539,"column_start":12,"column_end":23},"name":"as_mut_bgr8","qualname":"<DynamicImage>::as_mut_bgr8","value":"pub fn as_mut_bgr8(&mut Self) -> Option<&mut BgrImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit BGR image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit BGR image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":311531,"byte_end":311582,"line_start":538,"line_end":538,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1957},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":311825,"byte_end":311833,"line_start":547,"line_end":547,"column_start":12,"column_end":20},"name":"as_rgba8","qualname":"<DynamicImage>::as_rgba8","value":"pub fn as_rgba8(&Self) -> Option<&RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit RGBA image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":311769,"byte_end":311813,"line_start":546,"line_end":546,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1958},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":312051,"byte_end":312063,"line_start":555,"line_end":555,"column_start":12,"column_end":24},"name":"as_mut_rgba8","qualname":"<DynamicImage>::as_mut_rgba8","value":"pub fn as_mut_rgba8(&mut Self) -> Option<&mut RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGBA image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":311987,"byte_end":312039,"line_start":554,"line_end":554,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1959},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":312285,"byte_end":312293,"line_start":563,"line_end":563,"column_start":12,"column_end":20},"name":"as_bgra8","qualname":"<DynamicImage>::as_bgra8","value":"pub fn as_bgra8(&Self) -> Option<&BgraImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit BGRA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit BGRA image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":312229,"byte_end":312273,"line_start":562,"line_end":562,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1960},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":312511,"byte_end":312523,"line_start":571,"line_end":571,"column_start":12,"column_end":24},"name":"as_mut_bgra8","qualname":"<DynamicImage>::as_mut_bgra8","value":"pub fn as_mut_bgra8(&mut Self) -> Option<&mut BgraImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGBA image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":312447,"byte_end":312499,"line_start":570,"line_end":570,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1961},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":312750,"byte_end":312758,"line_start":579,"line_end":579,"column_start":12,"column_end":20},"name":"as_luma8","qualname":"<DynamicImage>::as_luma8","value":"pub fn as_luma8(&Self) -> Option<&GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit Grayscale image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":312689,"byte_end":312738,"line_start":578,"line_end":578,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1962},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":312981,"byte_end":312993,"line_start":587,"line_end":587,"column_start":12,"column_end":24},"name":"as_mut_luma8","qualname":"<DynamicImage>::as_mut_luma8","value":"pub fn as_mut_luma8(&mut Self) -> Option<&mut GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit Grayscale image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":312912,"byte_end":312969,"line_start":586,"line_end":586,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1963},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":313242,"byte_end":313256,"line_start":595,"line_end":595,"column_start":12,"column_end":26},"name":"as_luma_alpha8","qualname":"<DynamicImage>::as_luma_alpha8","value":"pub fn as_luma_alpha8(&Self) -> Option<&GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit Grayscale image with an alpha channel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":313159,"byte_end":313230,"line_start":594,"line_end":594,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1964},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":313507,"byte_end":313525,"line_start":603,"line_end":603,"column_start":12,"column_end":30},"name":"as_mut_luma_alpha8","qualname":"<DynamicImage>::as_mut_luma_alpha8","value":"pub fn as_mut_luma_alpha8(&mut Self) -> Option<&mut GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit Grayscale image with an alpha channel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":313416,"byte_end":313495,"line_start":602,"line_end":602,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1965},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":313753,"byte_end":313761,"line_start":611,"line_end":611,"column_start":12,"column_end":20},"name":"as_rgb16","qualname":"<DynamicImage>::as_rgb16","value":"pub fn as_rgb16(&Self) -> Option<&Rgb16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit RGB image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":313697,"byte_end":313741,"line_start":610,"line_end":610,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1966},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":313980,"byte_end":313992,"line_start":619,"line_end":619,"column_start":12,"column_end":24},"name":"as_mut_rgb16","qualname":"<DynamicImage>::as_mut_rgb16","value":"pub fn as_mut_rgb16(&mut Self) -> Option<&mut Rgb16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit RGB image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":313916,"byte_end":313968,"line_start":618,"line_end":618,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1967},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":314216,"byte_end":314225,"line_start":627,"line_end":627,"column_start":12,"column_end":21},"name":"as_rgba16","qualname":"<DynamicImage>::as_rgba16","value":"pub fn as_rgba16(&Self) -> Option<&Rgba16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit RGBA image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":314159,"byte_end":314204,"line_start":626,"line_end":626,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1968},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":314447,"byte_end":314460,"line_start":635,"line_end":635,"column_start":12,"column_end":25},"name":"as_mut_rgba16","qualname":"<DynamicImage>::as_mut_rgba16","value":"pub fn as_mut_rgba16(&mut Self) -> Option<&mut Rgba16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit RGBA image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":314382,"byte_end":314435,"line_start":634,"line_end":634,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1969},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":314691,"byte_end":314700,"line_start":643,"line_end":643,"column_start":12,"column_end":21},"name":"as_luma16","qualname":"<DynamicImage>::as_luma16","value":"pub fn as_luma16(&Self) -> Option<&Gray16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit Grayscale image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":314629,"byte_end":314679,"line_start":642,"line_end":642,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1970},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":314927,"byte_end":314940,"line_start":651,"line_end":651,"column_start":12,"column_end":25},"name":"as_mut_luma16","qualname":"<DynamicImage>::as_mut_luma16","value":"pub fn as_mut_luma16(&mut Self) -> Option<&mut Gray16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit Grayscale image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":314857,"byte_end":314915,"line_start":650,"line_end":650,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1971},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":315193,"byte_end":315208,"line_start":659,"line_end":659,"column_start":12,"column_end":27},"name":"as_luma_alpha16","qualname":"<DynamicImage>::as_luma_alpha16","value":"pub fn as_luma_alpha16(&Self) -> Option<&GrayAlpha16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit Grayscale image with an alpha channel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":315109,"byte_end":315181,"line_start":658,"line_end":658,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1972},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":315463,"byte_end":315482,"line_start":667,"line_end":667,"column_start":12,"column_end":31},"name":"as_mut_luma_alpha16","qualname":"<DynamicImage>::as_mut_luma_alpha16","value":"pub fn as_mut_luma_alpha16(&mut Self) -> Option<&mut GrayAlpha16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit Grayscale image with an alpha channel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":315371,"byte_end":315451,"line_start":666,"line_end":666,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1973},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":315741,"byte_end":315759,"line_start":675,"line_end":675,"column_start":12,"column_end":30},"name":"as_flat_samples_u8","qualname":"<DynamicImage>::as_flat_samples_u8","value":"pub fn as_flat_samples_u8(&Self) -> Option<FlatSamples<&[u8]>>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer for 8 bit per channel images.\n","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer for 8 bit per channel images.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":315657,"byte_end":315729,"line_start":674,"line_end":674,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1974},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":316393,"byte_end":316412,"line_start":688,"line_end":688,"column_start":12,"column_end":31},"name":"as_flat_samples_u16","qualname":"<DynamicImage>::as_flat_samples_u16","value":"pub fn as_flat_samples_u16(&Self) -> Option<FlatSamples<&[u16]>>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer for 16 bit per channel images.\n","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer for 16 bit per channel images.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":316308,"byte_end":316381,"line_start":687,"line_end":687,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1975},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":316892,"byte_end":316900,"line_start":699,"line_end":699,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<DynamicImage>::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Return this image's pixels as a native endian byte slice.\n","sig":null,"attributes":[{"value":"/ Return this image's pixels as a native endian byte slice.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":316819,"byte_end":316880,"line_start":698,"line_end":698,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1976},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":317135,"byte_end":317145,"line_start":706,"line_end":706,"column_start":12,"column_end":22},"name":"into_bytes","qualname":"<DynamicImage>::into_bytes","value":"pub fn into_bytes(Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Return this image's pixels as a byte vector. If the `ImageBuffer`\n container is `Vec<u8>`, this operation is free. Otherwise, a copy\n is returned.\n","sig":null,"attributes":[{"value":"/ Return this image's pixels as a byte vector. If the `ImageBuffer`","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":316959,"byte_end":317028,"line_start":703,"line_end":703,"column_start":5,"column_end":74}},{"value":"/ container is `Vec<u8>`, this operation is free. Otherwise, a copy","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":317033,"byte_end":317102,"line_start":704,"line_end":704,"column_start":5,"column_end":74}},{"value":"/ is returned.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":317107,"byte_end":317123,"line_start":705,"line_end":705,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1977},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":317277,"byte_end":317285,"line_start":711,"line_end":711,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<DynamicImage>::to_bytes","value":"pub fn to_bytes(&Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Return a copy of this image's pixels as a byte vector.\n","sig":null,"attributes":[{"value":"/ Return a copy of this image's pixels as a byte vector.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":317207,"byte_end":317265,"line_start":710,"line_end":710,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1978},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":317393,"byte_end":317398,"line_start":716,"line_end":716,"column_start":12,"column_end":17},"name":"color","qualname":"<DynamicImage>::color","value":"pub fn color(&Self) -> color::ColorType","parent":null,"children":[],"decl_id":null,"docs":" Return this image's color type.\n","sig":null,"attributes":[{"value":"/ Return this image's color type.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":317346,"byte_end":317381,"line_start":715,"line_end":715,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1979},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":318202,"byte_end":318211,"line_start":732,"line_end":732,"column_start":12,"column_end":21},"name":"grayscale","qualname":"<DynamicImage>::grayscale","value":"pub fn grayscale(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a grayscale version of this image.\n","sig":null,"attributes":[{"value":"/ Return a grayscale version of this image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":318145,"byte_end":318190,"line_start":731,"line_end":731,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1980},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":319317,"byte_end":319323,"line_start":749,"line_end":749,"column_start":12,"column_end":18},"name":"invert","qualname":"<DynamicImage>::invert","value":"pub fn invert(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Invert the colors of this image.\n This method operates inplace.\n","sig":null,"attributes":[{"value":"/ Invert the colors of this image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":319231,"byte_end":319267,"line_start":747,"line_end":747,"column_start":5,"column_end":41}},{"value":"/ This method operates inplace.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":319272,"byte_end":319305,"line_start":748,"line_end":748,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1981},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":319687,"byte_end":319693,"line_start":757,"line_end":757,"column_start":12,"column_end":18},"name":"resize","qualname":"<DynamicImage>::resize","value":"pub fn resize(&Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the bounds specified by ```nwidth``` and ```nheight```.\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":319410,"byte_end":319469,"line_start":753,"line_end":753,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":319474,"byte_end":319537,"line_start":754,"line_end":754,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":319542,"byte_end":319604,"line_start":755,"line_end":755,"column_start":5,"column_end":67}},{"value":"/ within the bounds specified by ```nwidth``` and ```nheight```.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":319609,"byte_end":319675,"line_start":756,"line_end":756,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1982},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":320157,"byte_end":320169,"line_start":767,"line_end":767,"column_start":12,"column_end":24},"name":"resize_exact","qualname":"<DynamicImage>::resize_exact","value":"pub fn resize_exact(&Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. Does not preserve aspect ratio.\n ```nwidth``` and ```nheight``` are the new image's dimensions\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":319955,"byte_end":320014,"line_start":764,"line_end":764,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. Does not preserve aspect ratio.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":320019,"byte_end":320075,"line_start":765,"line_end":765,"column_start":5,"column_end":61}},{"value":"/ ```nwidth``` and ```nheight``` are the new image's dimensions","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":320080,"byte_end":320145,"line_start":766,"line_end":766,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1983},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":320860,"byte_end":320869,"line_start":784,"line_end":784,"column_start":12,"column_end":21},"name":"thumbnail","qualname":"<DynamicImage>::thumbnail","value":"pub fn thumbnail(&Self, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Scale this image down to fit within a specific size.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the bounds specified by ```nwidth``` and ```nheight```.","sig":null,"attributes":[{"value":"/ Scale this image down to fit within a specific size.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":320385,"byte_end":320441,"line_start":776,"line_end":776,"column_start":5,"column_end":61}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":320446,"byte_end":320509,"line_start":777,"line_end":777,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":320514,"byte_end":320576,"line_start":778,"line_end":778,"column_start":5,"column_end":67}},{"value":"/ within the bounds specified by ```nwidth``` and ```nheight```.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":320581,"byte_end":320647,"line_start":779,"line_end":779,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":320652,"byte_end":320655,"line_start":780,"line_end":780,"column_start":5,"column_end":8}},{"value":"/ This method uses a fast integer algorithm where each source","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":320660,"byte_end":320723,"line_start":781,"line_end":781,"column_start":5,"column_end":68}},{"value":"/ pixel contributes to exactly one target pixel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":320728,"byte_end":320778,"line_start":782,"line_end":782,"column_start":5,"column_end":55}},{"value":"/ May give aliasing artifacts if new size is close to old size.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":320783,"byte_end":320848,"line_start":783,"line_end":783,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1984},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":321477,"byte_end":321492,"line_start":796,"line_end":796,"column_start":12,"column_end":27},"name":"thumbnail_exact","qualname":"<DynamicImage>::thumbnail_exact","value":"pub fn thumbnail_exact(&Self, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Scale this image down to a specific size.\n Returns a new image. Does not preserve aspect ratio.\n ```nwidth``` and ```nheight``` are the new image's dimensions.\n This method uses a fast integer algorithm where each source\n pixel contributes to exactly one target pixel.\n May give aliasing artifacts if new size is close to old size.\n","sig":null,"attributes":[{"value":"/ Scale this image down to a specific size.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":321095,"byte_end":321140,"line_start":790,"line_end":790,"column_start":5,"column_end":50}},{"value":"/ Returns a new image. Does not preserve aspect ratio.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":321145,"byte_end":321201,"line_start":791,"line_end":791,"column_start":5,"column_end":61}},{"value":"/ ```nwidth``` and ```nheight``` are the new image's dimensions.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":321206,"byte_end":321272,"line_start":792,"line_end":792,"column_start":5,"column_end":71}},{"value":"/ This method uses a fast integer algorithm where each source","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":321277,"byte_end":321340,"line_start":793,"line_end":793,"column_start":5,"column_end":68}},{"value":"/ pixel contributes to exactly one target pixel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":321345,"byte_end":321395,"line_start":794,"line_end":794,"column_start":5,"column_end":55}},{"value":"/ May give aliasing artifacts if new size is close to old size.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":321400,"byte_end":321465,"line_start":795,"line_end":795,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1985},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":322012,"byte_end":322026,"line_start":806,"line_end":806,"column_start":12,"column_end":26},"name":"resize_to_fill","qualname":"<DynamicImage>::resize_to_fill","value":"pub fn resize_to_fill(&Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the larger (relative to aspect ratio) of the bounds\n specified by ```nwidth``` and ```nheight```, then cropped to\n fit within the other bound.\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":321634,"byte_end":321693,"line_start":800,"line_end":800,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":321698,"byte_end":321761,"line_start":801,"line_end":801,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":321766,"byte_end":321828,"line_start":802,"line_end":802,"column_start":5,"column_end":67}},{"value":"/ within the larger (relative to aspect ratio) of the bounds","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":321833,"byte_end":321895,"line_start":803,"line_end":803,"column_start":5,"column_end":67}},{"value":"/ specified by ```nwidth``` and ```nheight```, then cropped to","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":321900,"byte_end":321964,"line_start":804,"line_end":804,"column_start":5,"column_end":69}},{"value":"/ fit within the other bound.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":321969,"byte_end":322000,"line_start":805,"line_end":805,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1986},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":322846,"byte_end":322850,"line_start":829,"line_end":829,"column_start":12,"column_end":16},"name":"blur","qualname":"<DynamicImage>::blur","value":"pub fn blur(&Self, f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on this image.\n ```sigma``` is a measure of how much to blur by.\n","sig":null,"attributes":[{"value":"/ Performs a Gaussian blur on this image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":322734,"byte_end":322777,"line_start":827,"line_end":827,"column_start":5,"column_end":48}},{"value":"/ ```sigma``` is a measure of how much to blur by.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":322782,"byte_end":322834,"line_start":828,"line_end":828,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1987},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":323228,"byte_end":323237,"line_start":838,"line_end":838,"column_start":12,"column_end":21},"name":"unsharpen","qualname":"<DynamicImage>::unsharpen","value":"pub fn unsharpen(&Self, f32, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on this image.\n ```sigma``` is the amount to blur the image by.\n ```threshold``` is a control of how much to sharpen.","sig":null,"attributes":[{"value":"/ Performs an unsharpen mask on this image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":322962,"byte_end":323007,"line_start":833,"line_end":833,"column_start":5,"column_end":50}},{"value":"/ ```sigma``` is the amount to blur the image by.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":323012,"byte_end":323063,"line_start":834,"line_end":834,"column_start":5,"column_end":56}},{"value":"/ ```threshold``` is a control of how much to sharpen.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":323068,"byte_end":323124,"line_start":835,"line_end":835,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":323129,"byte_end":323132,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ See <https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking>","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":323137,"byte_end":323216,"line_start":837,"line_end":837,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1988},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":323446,"byte_end":323455,"line_start":843,"line_end":843,"column_start":12,"column_end":21},"name":"filter3x3","qualname":"<DynamicImage>::filter3x3","value":"pub fn filter3x3(&Self, &[f32]) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Filters this image with the specified 3x3 kernel.\n","sig":null,"attributes":[{"value":"/ Filters this image with the specified 3x3 kernel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":323381,"byte_end":323434,"line_start":842,"line_end":842,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1989},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":323865,"byte_end":323880,"line_start":854,"line_end":854,"column_start":12,"column_end":27},"name":"adjust_contrast","qualname":"<DynamicImage>::adjust_contrast","value":"pub fn adjust_contrast(&Self, f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of this image.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.\n","sig":null,"attributes":[{"value":"/ Adjust the contrast of this image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":323662,"byte_end":323700,"line_start":851,"line_end":851,"column_start":5,"column_end":43}},{"value":"/ ```contrast``` is the amount to adjust the contrast by.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":323705,"byte_end":323764,"line_start":852,"line_end":852,"column_start":5,"column_end":64}},{"value":"/ Negative values decrease the contrast and positive values increase the contrast.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":323769,"byte_end":323853,"line_start":853,"line_end":853,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1990},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":324180,"byte_end":324188,"line_start":861,"line_end":861,"column_start":12,"column_end":20},"name":"brighten","qualname":"<DynamicImage>::brighten","value":"pub fn brighten(&Self, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Brighten the pixels of this image.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.\n","sig":null,"attributes":[{"value":"/ Brighten the pixels of this image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":323988,"byte_end":324026,"line_start":858,"line_end":858,"column_start":5,"column_end":43}},{"value":"/ ```value``` is the amount to brighten each pixel by.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":324031,"byte_end":324087,"line_start":859,"line_end":859,"column_start":5,"column_end":61}},{"value":"/ Negative values decrease the brightness and positive values increase it.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":324092,"byte_end":324168,"line_start":860,"line_end":860,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1991},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":324536,"byte_end":324545,"line_start":869,"line_end":869,"column_start":12,"column_end":21},"name":"huerotate","qualname":"<DynamicImage>::huerotate","value":"pub fn huerotate(&Self, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)\n","sig":null,"attributes":[{"value":"/ Hue rotate the supplied image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":324304,"byte_end":324338,"line_start":865,"line_end":865,"column_start":5,"column_end":39}},{"value":"/ `value` is the degrees to rotate each pixel by.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":324343,"byte_end":324394,"line_start":866,"line_end":866,"column_start":5,"column_end":56}},{"value":"/ 0 and 360 do nothing, the rest rotates by the given degree value.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":324399,"byte_end":324468,"line_start":867,"line_end":867,"column_start":5,"column_end":74}},{"value":"/ just like the css webkit filter hue-rotate(180)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":324473,"byte_end":324524,"line_start":868,"line_end":868,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1992},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":324704,"byte_end":324709,"line_start":874,"line_end":874,"column_start":12,"column_end":17},"name":"flipv","qualname":"<DynamicImage>::flipv","value":"pub fn flipv(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image vertically\n","sig":null,"attributes":[{"value":"/ Flip this image vertically","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":324662,"byte_end":324692,"line_start":873,"line_end":873,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1993},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":324855,"byte_end":324860,"line_start":879,"line_end":879,"column_start":12,"column_end":17},"name":"fliph","qualname":"<DynamicImage>::fliph","value":"pub fn fliph(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image horizontally\n","sig":null,"attributes":[{"value":"/ Flip this image horizontally","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":324811,"byte_end":324843,"line_start":878,"line_end":878,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1994},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":325019,"byte_end":325027,"line_start":884,"line_end":884,"column_start":12,"column_end":20},"name":"rotate90","qualname":"<DynamicImage>::rotate90","value":"pub fn rotate90(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 90 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 90 degrees clockwise.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":324964,"byte_end":325007,"line_start":883,"line_end":883,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1995},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":325180,"byte_end":325189,"line_start":889,"line_end":889,"column_start":12,"column_end":21},"name":"rotate180","qualname":"<DynamicImage>::rotate180","value":"pub fn rotate180(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 180 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 180 degrees clockwise.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":325124,"byte_end":325168,"line_start":888,"line_end":888,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1996},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":325343,"byte_end":325352,"line_start":894,"line_end":894,"column_start":12,"column_end":21},"name":"rotate270","qualname":"<DynamicImage>::rotate270","value":"pub fn rotate270(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 270 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 270 degrees clockwise.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":325287,"byte_end":325331,"line_start":893,"line_end":893,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1997},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":325507,"byte_end":325515,"line_start":899,"line_end":899,"column_start":12,"column_end":20},"name":"write_to","qualname":"<DynamicImage>::write_to","value":"pub fn write_to<W: Write, F: Into<ImageOutputFormat>>(&Self, &mut W, F)\n-> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode this image and write it to ```w```\n","sig":null,"attributes":[{"value":"/ Encode this image and write it to ```w```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":325450,"byte_end":325495,"line_start":898,"line_end":898,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2000},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":329795,"byte_end":329799,"line_start":1015,"line_end":1015,"column_start":12,"column_end":16},"name":"save","qualname":"<DynamicImage>::save","value":"pub fn save<Q>(&Self, Q) -> ImageResult<()> where Q: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the path specified.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":329661,"byte_end":329714,"line_start":1012,"line_end":1012,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":329719,"byte_end":329722,"line_start":1013,"line_end":1013,"column_start":5,"column_end":8}},{"value":"/ The image format is derived from the file extension.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":329727,"byte_end":329783,"line_start":1014,"line_end":1014,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2002},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":330171,"byte_end":330187,"line_start":1029,"line_end":1029,"column_start":12,"column_end":28},"name":"save_with_format","qualname":"<DynamicImage>::save_with_format","value":"pub fn save_with_format<Q>(&Self, Q, ImageFormat) -> ImageResult<()> where\nQ: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the specified path in\n the specified format.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the specified path in","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":329964,"byte_end":330019,"line_start":1024,"line_end":1024,"column_start":5,"column_end":60}},{"value":"/ the specified format.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":330024,"byte_end":330049,"line_start":1025,"line_end":1025,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":330054,"byte_end":330057,"line_start":1026,"line_end":1026,"column_start":5,"column_end":8}},{"value":"/ See [`save_buffer_with_format`](fn.save_buffer_with_format.html) for","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":330062,"byte_end":330134,"line_start":1027,"line_end":1027,"column_start":5,"column_end":77}},{"value":"/ supported types.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":330139,"byte_end":330159,"line_start":1028,"line_end":1028,"column_start":5,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":2029},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":338194,"byte_end":338198,"line_start":1228,"line_end":1228,"column_start":8,"column_end":12},"name":"open","qualname":"::dynimage::open","value":"pub fn open<P>(P) -> ImageResult<DynamicImage> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Open the image located at the path specified.\n The image's format is determined from the path's file extension.","sig":null,"attributes":[{"value":"/ Open the image located at the path specified.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":337892,"byte_end":337941,"line_start":1221,"line_end":1221,"column_start":1,"column_end":50}},{"value":"/ The image's format is determined from the path's file extension.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":337942,"byte_end":338010,"line_start":1222,"line_end":1222,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":338011,"byte_end":338014,"line_start":1223,"line_end":1223,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses, including guessing the format based on the file's","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":338015,"byte_end":338111,"line_start":1224,"line_end":1224,"column_start":1,"column_end":97}},{"value":"/ content before its path.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":338112,"byte_end":338140,"line_start":1225,"line_end":1225,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":338141,"byte_end":338144,"line_start":1226,"line_end":1226,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":338145,"byte_end":338186,"line_start":1227,"line_end":1227,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":2031},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":338753,"byte_end":338769,"line_start":1243,"line_end":1243,"column_start":8,"column_end":24},"name":"image_dimensions","qualname":"::dynimage::image_dimensions","value":"pub fn image_dimensions<P>(P) -> ImageResult<(u32, u32)> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Read the dimensions of the image located at the specified path.\n This is faster than fully loading the image and then getting its dimensions.","sig":null,"attributes":[{"value":"/ Read the dimensions of the image located at the specified path.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":338388,"byte_end":338455,"line_start":1236,"line_end":1236,"column_start":1,"column_end":68}},{"value":"/ This is faster than fully loading the image and then getting its dimensions.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":338456,"byte_end":338536,"line_start":1237,"line_end":1237,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":338537,"byte_end":338540,"line_start":1238,"line_end":1238,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses, including guessing the format based on the file's","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":338541,"byte_end":338637,"line_start":1239,"line_end":1239,"column_start":1,"column_end":97}},{"value":"/ content before its path or manually supplying the format.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":338638,"byte_end":338699,"line_start":1240,"line_end":1240,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":338700,"byte_end":338703,"line_start":1241,"line_end":1241,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":338704,"byte_end":338745,"line_start":1242,"line_end":1242,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":2033},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":339344,"byte_end":339355,"line_start":1258,"line_end":1258,"column_start":8,"column_end":19},"name":"save_buffer","qualname":"::dynimage::save_buffer","value":"pub fn save_buffer<P>(P, &[u8], u32, u32, color::ColorType) -> ImageResult<()>\nwhere P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the supplied buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the supplied buffer to a file at the path specified.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":338969,"byte_end":339031,"line_start":1251,"line_end":1251,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":339032,"byte_end":339035,"line_start":1252,"line_end":1252,"column_start":1,"column_end":4}},{"value":"/ The image format is derived from the file extension. The buffer is assumed to have","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":339036,"byte_end":339122,"line_start":1253,"line_end":1253,"column_start":1,"column_end":87}},{"value":"/ the correct format according to the specified color type.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":339123,"byte_end":339184,"line_start":1254,"line_end":1254,"column_start":1,"column_end":62}},{"value":"/ This will lead to corrupted files if the buffer contains malformed data. Currently only","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":339186,"byte_end":339277,"line_start":1256,"line_end":1256,"column_start":1,"column_end":92}},{"value":"/ jpeg, png, ico, pnm, bmp and tiff files are supported.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":339278,"byte_end":339336,"line_start":1257,"line_end":1257,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":2035},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":340009,"byte_end":340032,"line_start":1280,"line_end":1280,"column_start":8,"column_end":31},"name":"save_buffer_with_format","qualname":"::dynimage::save_buffer_with_format","value":"pub fn save_buffer_with_format<P>(P, &[u8], u32, u32, color::ColorType,\n                                  ImageFormat) -> ImageResult<()> where\nP: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the supplied buffer to a file at the path specified\n in the specified format.","sig":null,"attributes":[{"value":"/ Saves the supplied buffer to a file at the path specified","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":339661,"byte_end":339722,"line_start":1272,"line_end":1272,"column_start":1,"column_end":62}},{"value":"/ in the specified format.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":339723,"byte_end":339751,"line_start":1273,"line_end":1273,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":339752,"byte_end":339755,"line_start":1274,"line_end":1274,"column_start":1,"column_end":4}},{"value":"/ The buffer is assumed to have the correct format according","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":339756,"byte_end":339818,"line_start":1275,"line_end":1275,"column_start":1,"column_end":63}},{"value":"/ to the specified color type.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":339819,"byte_end":339851,"line_start":1276,"line_end":1276,"column_start":1,"column_end":33}},{"value":"/ This will lead to corrupted files if the buffer contains","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":339852,"byte_end":339912,"line_start":1277,"line_end":1277,"column_start":1,"column_end":61}},{"value":"/ malformed data. Currently only jpeg, png, ico, bmp and","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":339913,"byte_end":339971,"line_start":1278,"line_end":1278,"column_start":1,"column_end":59}},{"value":"/ tiff files are supported.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":339972,"byte_end":340001,"line_start":1279,"line_end":1279,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":2037},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":340595,"byte_end":340611,"line_start":1303,"line_end":1303,"column_start":8,"column_end":24},"name":"load_from_memory","qualname":"::dynimage::load_from_memory","value":"pub fn load_from_memory(&[u8]) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice","sig":null,"attributes":[{"value":"/ Create a new image from a byte slice","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":340351,"byte_end":340391,"line_start":1295,"line_end":1295,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":340392,"byte_end":340395,"line_start":1296,"line_end":1296,"column_start":1,"column_end":4}},{"value":"/ Makes an educated guess about the image format.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":340396,"byte_end":340447,"line_start":1297,"line_end":1297,"column_start":1,"column_end":52}},{"value":"/ TGA is not supported by this function.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":340448,"byte_end":340490,"line_start":1298,"line_end":1298,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":340491,"byte_end":340494,"line_start":1299,"line_end":1299,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":340495,"byte_end":340541,"line_start":1300,"line_end":1300,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":340542,"byte_end":340545,"line_start":1301,"line_end":1301,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":340546,"byte_end":340587,"line_start":1302,"line_end":1302,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":2038},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":341093,"byte_end":341121,"line_start":1318,"line_end":1318,"column_start":8,"column_end":36},"name":"load_from_memory_with_format","qualname":"::dynimage::load_from_memory_with_format","value":"pub fn load_from_memory_with_format(&[u8], ImageFormat)\n-> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice","sig":null,"attributes":[{"value":"/ Create a new image from a byte slice","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":340766,"byte_end":340806,"line_start":1308,"line_end":1308,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":340807,"byte_end":340810,"line_start":1309,"line_end":1309,"column_start":1,"column_end":4}},{"value":"/ This is just a simple wrapper that constructs an `std::io::Cursor` around the buffer and then","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":340811,"byte_end":340908,"line_start":1310,"line_end":1310,"column_start":1,"column_end":98}},{"value":"/ calls `load` with that reader.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":340909,"byte_end":340943,"line_start":1311,"line_end":1311,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":340944,"byte_end":340947,"line_start":1312,"line_end":1312,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":340948,"byte_end":340994,"line_start":1313,"line_end":1313,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":340995,"byte_end":340998,"line_start":1314,"line_end":1314,"column_start":1,"column_end":4}},{"value":"/ [`load`]: fn.load.html","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":340999,"byte_end":341025,"line_start":1315,"line_end":1315,"column_start":1,"column_end":27}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":341026,"byte_end":341067,"line_start":1316,"line_end":1316,"column_start":1,"column_end":42}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":341068,"byte_end":341085,"line_start":1317,"line_end":1317,"column_start":1,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3426},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":342950,"byte_end":342953,"line_start":26,"line_end":26,"column_start":5,"column_end":8},"name":"Png","qualname":"::image::ImageFormat::Png","value":"ImageFormat::Png","parent":{"krate":0,"index":3425},"children":[],"decl_id":null,"docs":" An Image in PNG Format\n","sig":null,"attributes":[{"value":"/ An Image in PNG Format","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":342919,"byte_end":342945,"line_start":25,"line_end":25,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3428},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":342992,"byte_end":342996,"line_start":29,"line_end":29,"column_start":5,"column_end":9},"name":"Jpeg","qualname":"::image::ImageFormat::Jpeg","value":"ImageFormat::Jpeg","parent":{"krate":0,"index":3425},"children":[],"decl_id":null,"docs":" An Image in JPEG Format\n","sig":null,"attributes":[{"value":"/ An Image in JPEG Format","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":342960,"byte_end":342987,"line_start":28,"line_end":28,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3430},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343034,"byte_end":343037,"line_start":32,"line_end":32,"column_start":5,"column_end":8},"name":"Gif","qualname":"::image::ImageFormat::Gif","value":"ImageFormat::Gif","parent":{"krate":0,"index":3425},"children":[],"decl_id":null,"docs":" An Image in GIF Format\n","sig":null,"attributes":[{"value":"/ An Image in GIF Format","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343003,"byte_end":343029,"line_start":31,"line_end":31,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3432},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343076,"byte_end":343080,"line_start":35,"line_end":35,"column_start":5,"column_end":9},"name":"WebP","qualname":"::image::ImageFormat::WebP","value":"ImageFormat::WebP","parent":{"krate":0,"index":3425},"children":[],"decl_id":null,"docs":" An Image in WEBP Format\n","sig":null,"attributes":[{"value":"/ An Image in WEBP Format","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343044,"byte_end":343071,"line_start":34,"line_end":34,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3434},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343126,"byte_end":343129,"line_start":38,"line_end":38,"column_start":5,"column_end":8},"name":"Pnm","qualname":"::image::ImageFormat::Pnm","value":"ImageFormat::Pnm","parent":{"krate":0,"index":3425},"children":[],"decl_id":null,"docs":" An Image in general PNM Format\n","sig":null,"attributes":[{"value":"/ An Image in general PNM Format","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343087,"byte_end":343121,"line_start":37,"line_end":37,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3436},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343168,"byte_end":343172,"line_start":41,"line_end":41,"column_start":5,"column_end":9},"name":"Tiff","qualname":"::image::ImageFormat::Tiff","value":"ImageFormat::Tiff","parent":{"krate":0,"index":3425},"children":[],"decl_id":null,"docs":" An Image in TIFF Format\n","sig":null,"attributes":[{"value":"/ An Image in TIFF Format","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343136,"byte_end":343163,"line_start":40,"line_end":40,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3438},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343210,"byte_end":343213,"line_start":44,"line_end":44,"column_start":5,"column_end":8},"name":"Tga","qualname":"::image::ImageFormat::Tga","value":"ImageFormat::Tga","parent":{"krate":0,"index":3425},"children":[],"decl_id":null,"docs":" An Image in TGA Format\n","sig":null,"attributes":[{"value":"/ An Image in TGA Format","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343179,"byte_end":343205,"line_start":43,"line_end":43,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3440},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343251,"byte_end":343254,"line_start":47,"line_end":47,"column_start":5,"column_end":8},"name":"Dds","qualname":"::image::ImageFormat::Dds","value":"ImageFormat::Dds","parent":{"krate":0,"index":3425},"children":[],"decl_id":null,"docs":" An Image in DDS Format\n","sig":null,"attributes":[{"value":"/ An Image in DDS Format","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343220,"byte_end":343246,"line_start":46,"line_end":46,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3442},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343292,"byte_end":343295,"line_start":50,"line_end":50,"column_start":5,"column_end":8},"name":"Bmp","qualname":"::image::ImageFormat::Bmp","value":"ImageFormat::Bmp","parent":{"krate":0,"index":3425},"children":[],"decl_id":null,"docs":" An Image in BMP Format\n","sig":null,"attributes":[{"value":"/ An Image in BMP Format","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343261,"byte_end":343287,"line_start":49,"line_end":49,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3444},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343333,"byte_end":343336,"line_start":53,"line_end":53,"column_start":5,"column_end":8},"name":"Ico","qualname":"::image::ImageFormat::Ico","value":"ImageFormat::Ico","parent":{"krate":0,"index":3425},"children":[],"decl_id":null,"docs":" An Image in ICO Format\n","sig":null,"attributes":[{"value":"/ An Image in ICO Format","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343302,"byte_end":343328,"line_start":52,"line_end":52,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3446},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343383,"byte_end":343386,"line_start":56,"line_end":56,"column_start":5,"column_end":8},"name":"Hdr","qualname":"::image::ImageFormat::Hdr","value":"ImageFormat::Hdr","parent":{"krate":0,"index":3425},"children":[],"decl_id":null,"docs":" An Image in Radiance HDR Format\n","sig":null,"attributes":[{"value":"/ An Image in Radiance HDR Format","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343343,"byte_end":343378,"line_start":55,"line_end":55,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3448},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343429,"byte_end":343437,"line_start":59,"line_end":59,"column_start":5,"column_end":13},"name":"Farbfeld","qualname":"::image::ImageFormat::Farbfeld","value":"ImageFormat::Farbfeld","parent":{"krate":0,"index":3425},"children":[],"decl_id":null,"docs":" An Image in farbfeld Format\n","sig":null,"attributes":[{"value":"/ An Image in farbfeld Format","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343393,"byte_end":343424,"line_start":58,"line_end":58,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3450},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343477,"byte_end":343481,"line_start":62,"line_end":62,"column_start":5,"column_end":9},"name":"Avif","qualname":"::image::ImageFormat::Avif","value":"ImageFormat::Avif","parent":{"krate":0,"index":3425},"children":[],"decl_id":null,"docs":" An Image in AVIF format.\n","sig":null,"attributes":[{"value":"/ An Image in AVIF format.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343444,"byte_end":343472,"line_start":61,"line_end":61,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3452},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343507,"byte_end":343522,"line_start":65,"line_end":65,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::image::ImageFormat::__NonExhaustive","value":"ImageFormat::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":3425},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3425},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":342901,"byte_end":342912,"line_start":24,"line_end":24,"column_start":10,"column_end":21},"name":"ImageFormat","qualname":"::image::ImageFormat","value":"pub enum ImageFormat {\n    Png,\n    Jpeg,\n    Gif,\n    WebP,\n    Pnm,\n    Tiff,\n    Tga,\n    Dds,\n    Bmp,\n    Ico,\n    Hdr,\n    Farbfeld,\n    Avif,\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":3426},{"krate":0,"index":3428},{"krate":0,"index":3430},{"krate":0,"index":3432},{"krate":0,"index":3434},{"krate":0,"index":3436},{"krate":0,"index":3438},{"krate":0,"index":3440},{"krate":0,"index":3442},{"krate":0,"index":3444},{"krate":0,"index":3446},{"krate":0,"index":3448},{"krate":0,"index":3450},{"krate":0,"index":3452}],"decl_id":null,"docs":" An enumeration of supported image formats.\n Not all formats support both encoding and decoding.\n","sig":null,"attributes":[{"value":"/ An enumeration of supported image formats.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":342738,"byte_end":342784,"line_start":21,"line_end":21,"column_start":1,"column_end":47}},{"value":"/ Not all formats support both encoding and decoding.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":342785,"byte_end":342840,"line_start":22,"line_end":22,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2107},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343884,"byte_end":343898,"line_start":80,"line_end":80,"column_start":12,"column_end":26},"name":"from_extension","qualname":"<ImageFormat>::from_extension","value":"pub fn from_extension<S>(S) -> Option<Self> where S: AsRef<OsStr>","parent":null,"children":[],"decl_id":null,"docs":" Return the image format specified by a path's file extension.","sig":null,"attributes":[{"value":"/ Return the image format specified by a path's file extension.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343585,"byte_end":343650,"line_start":69,"line_end":69,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343655,"byte_end":343658,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343663,"byte_end":343676,"line_start":71,"line_end":71,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343681,"byte_end":343684,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343689,"byte_end":343696,"line_start":73,"line_end":73,"column_start":5,"column_end":12}},{"value":"/ use image::ImageFormat;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343701,"byte_end":343728,"line_start":74,"line_end":74,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343733,"byte_end":343736,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ let format = ImageFormat::from_extension(\"jpg\");","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343741,"byte_end":343793,"line_start":76,"line_end":76,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(format, Some(ImageFormat::Jpeg));","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343798,"byte_end":343846,"line_start":77,"line_end":77,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343851,"byte_end":343858,"line_start":78,"line_end":78,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343863,"byte_end":343872,"line_start":79,"line_end":79,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2110},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":345237,"byte_end":345246,"line_start":119,"line_end":119,"column_start":12,"column_end":21},"name":"from_path","qualname":"<ImageFormat>::from_path","value":"pub fn from_path<P>(P) -> ImageResult<Self> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Return the image format specified by the path's file extension.","sig":null,"attributes":[{"value":"/ Return the image format specified by the path's file extension.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":344876,"byte_end":344943,"line_start":106,"line_end":106,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":344948,"byte_end":344951,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":344956,"byte_end":344969,"line_start":108,"line_end":108,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":344974,"byte_end":344977,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":344982,"byte_end":344989,"line_start":110,"line_end":110,"column_start":5,"column_end":12}},{"value":"/ use image::ImageFormat;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":344994,"byte_end":345021,"line_start":111,"line_end":111,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":345026,"byte_end":345029,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ let format = ImageFormat::from_path(\"images/ferris.png\")?;","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":345034,"byte_end":345096,"line_start":113,"line_end":113,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(format, ImageFormat::Png);","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":345101,"byte_end":345142,"line_start":114,"line_end":114,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":345147,"byte_end":345150,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # Ok::<(), image::error::ImageError>(())","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":345155,"byte_end":345199,"line_start":116,"line_end":116,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":345204,"byte_end":345211,"line_start":117,"line_end":117,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":345216,"byte_end":345225,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2114},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":346003,"byte_end":346011,"line_start":139,"line_end":139,"column_start":12,"column_end":20},"name":"can_read","qualname":"<ImageFormat>::can_read","value":"pub fn can_read(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return if the ImageFormat can be decoded by the lib.\n","sig":null,"attributes":[{"value":"/ Return if the ImageFormat can be decoded by the lib.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":345921,"byte_end":345977,"line_start":137,"line_end":137,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":345982,"byte_end":345991,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2115},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":346831,"byte_end":346840,"line_start":161,"line_end":161,"column_start":12,"column_end":21},"name":"can_write","qualname":"<ImageFormat>::can_write","value":"pub fn can_write(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return if the ImageFormat can be encoded by the lib.\n","sig":null,"attributes":[{"value":"/ Return if the ImageFormat can be encoded by the lib.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":346749,"byte_end":346805,"line_start":159,"line_end":159,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":346810,"byte_end":346819,"line_start":160,"line_end":160,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2116},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":348194,"byte_end":348208,"line_start":190,"line_end":190,"column_start":12,"column_end":26},"name":"extensions_str","qualname":"<ImageFormat>::extensions_str","value":"pub fn extensions_str(Self) -> &'static [&'static str]","parent":null,"children":[],"decl_id":null,"docs":" Return a list of applicable extensions for this format.","sig":null,"attributes":[{"value":"/ Return a list of applicable extensions for this format.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":347604,"byte_end":347663,"line_start":181,"line_end":181,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":347668,"byte_end":347671,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ All currently recognized image formats specify at least on extension but for future","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":347676,"byte_end":347763,"line_start":183,"line_end":183,"column_start":5,"column_end":92}},{"value":"/ compatibility you should not rely on this fact. The list may be empty if the format has no","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":347768,"byte_end":347862,"line_start":184,"line_end":184,"column_start":5,"column_end":99}},{"value":"/ recognized file representation, for example in case it is used as a purely transient memory","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":347867,"byte_end":347962,"line_start":185,"line_end":185,"column_start":5,"column_end":100}},{"value":"/ format.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":347967,"byte_end":347978,"line_start":186,"line_end":186,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":347983,"byte_end":347986,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ The method name `extensions` remains reserved for introducing another method in the future","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":347991,"byte_end":348085,"line_start":188,"line_end":188,"column_start":5,"column_end":99}},{"value":"/ that yields a slice of `OsStr` which is blocked by several features of const evaluation.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":348090,"byte_end":348182,"line_start":189,"line_end":189,"column_start":5,"column_end":97}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3471},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":350113,"byte_end":350124,"line_start":253,"line_end":253,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::image::ImageOutputFormat::Unsupported","value":"ImageOutputFormat::Unsupported(String)","parent":{"krate":0,"index":3470},"children":[],"decl_id":null,"docs":" A value for signalling an error: An unsupported format was requested\n","sig":null,"attributes":[{"value":"/ A value for signalling an error: An unsupported format was requested","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":349868,"byte_end":349940,"line_start":250,"line_end":250,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3474},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":350158,"byte_end":350173,"line_start":256,"line_end":256,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::image::ImageOutputFormat::__NonExhaustive","value":"ImageOutputFormat::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":3470},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3470},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":349151,"byte_end":349168,"line_start":213,"line_end":213,"column_start":10,"column_end":27},"name":"ImageOutputFormat","qualname":"::image::ImageOutputFormat","value":"pub enum ImageOutputFormat {\n    Unsupported(String),\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":3471},{"krate":0,"index":3474}],"decl_id":null,"docs":" An enumeration of supported image formats for encoding.\n","sig":null,"attributes":[{"value":"/ An enumeration of supported image formats for encoding.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":349043,"byte_end":349102,"line_start":211,"line_end":211,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":3488},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":360473,"byte_end":360481,"line_start":501,"line_end":501,"column_start":12,"column_end":20},"name":"Progress","qualname":"::image::Progress","value":"Progress {  }","parent":null,"children":[{"krate":0,"index":3489},{"krate":0,"index":3490}],"decl_id":null,"docs":" Represents the progress of an image operation.","sig":null,"attributes":[{"value":"/ Represents the progress of an image operation.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":360069,"byte_end":360119,"line_start":495,"line_end":495,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":360120,"byte_end":360123,"line_start":496,"line_end":496,"column_start":1,"column_end":4}},{"value":"/ Note that this is not necessarily accurate and no change to the values passed to the progress","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":360124,"byte_end":360221,"line_start":497,"line_end":497,"column_start":1,"column_end":98}},{"value":"/ function during decoding will be considered breaking. A decoder could in theory report the","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":360222,"byte_end":360316,"line_start":498,"line_end":498,"column_start":1,"column_end":95}},{"value":"/ progress `(0, 0)` if progress is unknown, without violating the interface contract of the type.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":360317,"byte_end":360416,"line_start":499,"line_end":499,"column_start":1,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":2142},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":360589,"byte_end":360596,"line_start":508,"line_end":508,"column_start":12,"column_end":19},"name":"current","qualname":"<Progress>::current","value":"pub fn current(Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" A measure of completed decoding.\n","sig":null,"attributes":[{"value":"/ A measure of completed decoding.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":360541,"byte_end":360577,"line_start":507,"line_end":507,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2143},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":360769,"byte_end":360774,"line_start":515,"line_end":515,"column_start":12,"column_end":17},"name":"total","qualname":"<Progress>::total","value":"pub fn total(Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" A measure of all necessary decoding work.","sig":null,"attributes":[{"value":"/ A measure of all necessary decoding work.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":360644,"byte_end":360689,"line_start":512,"line_end":512,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":360694,"byte_end":360697,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ This is in general greater or equal than `current`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":360702,"byte_end":360757,"line_start":514,"line_end":514,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2144},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":360884,"byte_end":360893,"line_start":520,"line_end":520,"column_start":12,"column_end":21},"name":"remaining","qualname":"<Progress>::remaining","value":"pub fn remaining(Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Calculate a measure for remaining decoding work.\n","sig":null,"attributes":[{"value":"/ Calculate a measure for remaining decoding work.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":360820,"byte_end":360872,"line_start":519,"line_end":519,"column_start":5,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":2145},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":361022,"byte_end":361034,"line_start":526,"line_end":526,"column_start":11,"column_end":23},"name":"ImageDecoder","qualname":"::image::ImageDecoder","value":"ImageDecoder<'a>: Sized","parent":null,"children":[{"krate":0,"index":2147},{"krate":0,"index":2148},{"krate":0,"index":2149},{"krate":0,"index":2150},{"krate":0,"index":2151},{"krate":0,"index":2152},{"krate":0,"index":2153},{"krate":0,"index":2154},{"krate":0,"index":2156}],"decl_id":null,"docs":" The trait that all decoders implement\n","sig":null,"attributes":[{"value":"/ The trait that all decoders implement","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":360970,"byte_end":361011,"line_start":525,"line_end":525,"column_start":1,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":2147},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":361111,"byte_end":361117,"line_start":528,"line_end":528,"column_start":10,"column_end":16},"name":"Reader","qualname":"::image::ImageDecoder::Reader","value":"type Reader: Read + 'a;","parent":{"krate":0,"index":2145},"children":[],"decl_id":null,"docs":" The type of reader produced by `into_reader`.\n","sig":null,"attributes":[{"value":"/ The type of reader produced by `into_reader`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":361052,"byte_end":361101,"line_start":527,"line_end":527,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2148},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":361207,"byte_end":361217,"line_start":531,"line_end":531,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::ImageDecoder::dimensions","value":"pub fn dimensions(&Self) -> (u32, u32)","parent":{"krate":0,"index":2145},"children":[],"decl_id":null,"docs":" Returns a tuple containing the width and height of the image\n","sig":null,"attributes":[{"value":"/ Returns a tuple containing the width and height of the image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":361135,"byte_end":361199,"line_start":530,"line_end":530,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2149},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":361322,"byte_end":361332,"line_start":534,"line_end":534,"column_start":8,"column_end":18},"name":"color_type","qualname":"::image::ImageDecoder::color_type","value":"pub fn color_type(&Self) -> ColorType","parent":{"krate":0,"index":2145},"children":[],"decl_id":null,"docs":" Returns the color type of the image data produced by this decoder\n","sig":null,"attributes":[{"value":"/ Returns the color type of the image data produced by this decoder","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":361245,"byte_end":361314,"line_start":533,"line_end":533,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2150},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":361426,"byte_end":361445,"line_start":537,"line_end":537,"column_start":8,"column_end":27},"name":"original_color_type","qualname":"::image::ImageDecoder::original_color_type","value":"pub fn original_color_type(&Self) -> ExtendedColorType","parent":{"krate":0,"index":2145},"children":[],"decl_id":null,"docs":" Retuns the color type of the image file before decoding\n","sig":null,"attributes":[{"value":"/ Retuns the color type of the image file before decoding","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":361359,"byte_end":361418,"line_start":536,"line_end":536,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2151},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":361786,"byte_end":361797,"line_start":544,"line_end":544,"column_start":8,"column_end":19},"name":"into_reader","qualname":"::image::ImageDecoder::into_reader","value":"pub fn into_reader(Self) -> ImageResult<Self::Reader>","parent":{"krate":0,"index":2145},"children":[],"decl_id":null,"docs":" Returns a reader that can be used to obtain the bytes of the image. For the best\n performance, always try to read at least `scanline_bytes` from the reader at a time. Reading\n fewer bytes will cause the reader to perform internal buffering.\n","sig":null,"attributes":[{"value":"/ Returns a reader that can be used to obtain the bytes of the image. For the best","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":361520,"byte_end":361604,"line_start":541,"line_end":541,"column_start":5,"column_end":89}},{"value":"/ performance, always try to read at least `scanline_bytes` from the reader at a time. Reading","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":361609,"byte_end":361705,"line_start":542,"line_end":542,"column_start":5,"column_end":101}},{"value":"/ fewer bytes will cause the reader to perform internal buffering.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":361710,"byte_end":361778,"line_start":543,"line_end":543,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2152},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":362184,"byte_end":362195,"line_start":552,"line_end":552,"column_start":8,"column_end":19},"name":"total_bytes","qualname":"::image::ImageDecoder::total_bytes","value":"pub fn total_bytes(&Self) -> u64","parent":{"krate":0,"index":2145},"children":[],"decl_id":null,"docs":" Returns the total number of bytes in the decoded image.","sig":null,"attributes":[{"value":"/ Returns the total number of bytes in the decoded image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":361839,"byte_end":361898,"line_start":546,"line_end":546,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":361903,"byte_end":361906,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ This is the size of the buffer that must be passed to `read_image` or","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":361911,"byte_end":361984,"line_start":548,"line_end":548,"column_start":5,"column_end":78}},{"value":"/ `read_image_with_progress`. The returned value may exceed usize::MAX, in","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":361989,"byte_end":362065,"line_start":549,"line_end":549,"column_start":5,"column_end":81}},{"value":"/ which case it isn't actually possible to construct a buffer to decode all the image data","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":362070,"byte_end":362162,"line_start":550,"line_end":550,"column_start":5,"column_end":97}},{"value":"/ into.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":362167,"byte_end":362176,"line_start":551,"line_end":551,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2153},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":362532,"byte_end":362546,"line_start":559,"line_end":559,"column_start":8,"column_end":22},"name":"scanline_bytes","qualname":"::image::ImageDecoder::scanline_bytes","value":"pub fn scanline_bytes(&Self) -> u64","parent":{"krate":0,"index":2145},"children":[],"decl_id":null,"docs":" Returns the minimum number of bytes that can be efficiently read from this decoder. This may\n be as few as 1 or as many as `total_bytes()`.\n","sig":null,"attributes":[{"value":"/ Returns the minimum number of bytes that can be efficiently read from this decoder. This may","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":362374,"byte_end":362470,"line_start":557,"line_end":557,"column_start":5,"column_end":101}},{"value":"/ be as few as 1 or as many as `total_bytes()`.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":362475,"byte_end":362524,"line_start":558,"line_end":558,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2154},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":363435,"byte_end":363445,"line_start":583,"line_end":583,"column_start":8,"column_end":18},"name":"read_image","qualname":"::image::ImageDecoder::read_image","value":"pub fn read_image(Self, &mut [u8]) -> ImageResult<()>","parent":{"krate":0,"index":2145},"children":[],"decl_id":null,"docs":" Returns all the bytes in the image.","sig":null,"attributes":[{"value":"/ Returns all the bytes in the image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":362601,"byte_end":362640,"line_start":563,"line_end":563,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":362645,"byte_end":362648,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ This function takes a slice of bytes and writes the pixel data of the image into it.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":362653,"byte_end":362741,"line_start":565,"line_end":565,"column_start":5,"column_end":93}},{"value":"/ Although not required, for certain color types callers may want to pass buffers which are","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":362746,"byte_end":362839,"line_start":566,"line_end":566,"column_start":5,"column_end":98}},{"value":"/ aligned to 2 or 4 byte boundaries to the slice can be cast to a [u16] or [u32]. To accommodate","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":362844,"byte_end":362942,"line_start":567,"line_end":567,"column_start":5,"column_end":103}},{"value":"/ such casts, the returned contents will always be in native endian.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":362947,"byte_end":363017,"line_start":568,"line_end":568,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":363022,"byte_end":363025,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":363030,"byte_end":363042,"line_start":570,"line_end":570,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":363047,"byte_end":363050,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ This function panics if buf.len() != self.total_bytes().","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":363055,"byte_end":363115,"line_start":572,"line_end":572,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":363120,"byte_end":363123,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":363128,"byte_end":363142,"line_start":574,"line_end":574,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":363147,"byte_end":363150,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ ```no_build","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":363155,"byte_end":363170,"line_start":576,"line_end":576,"column_start":5,"column_end":20}},{"value":"/ use zerocopy::{AsBytes, FromBytes};","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":363175,"byte_end":363214,"line_start":577,"line_end":577,"column_start":5,"column_end":44}},{"value":"/ fn read_16bit_image(decoder: impl ImageDecoder) -> Vec<16> {","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":363219,"byte_end":363283,"line_start":578,"line_end":578,"column_start":5,"column_end":69}},{"value":"/     let mut buf: Vec<u16> = vec![0; decoder.total_bytes()/2];","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":363288,"byte_end":363353,"line_start":579,"line_end":579,"column_start":5,"column_end":70}},{"value":"/     decoder.read_image(buf.as_bytes());","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":363358,"byte_end":363401,"line_start":580,"line_end":580,"column_start":5,"column_end":48}},{"value":"/     buf","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":363406,"byte_end":363417,"line_start":581,"line_end":581,"column_start":5,"column_end":16}},{"value":"/ }","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":363422,"byte_end":363427,"line_start":582,"line_end":582,"column_start":5,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":2156},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":363673,"byte_end":363697,"line_start":589,"line_end":589,"column_start":8,"column_end":32},"name":"read_image_with_progress","qualname":"::image::ImageDecoder::read_image_with_progress","value":"pub fn read_image_with_progress<F: Fn(Progress) -> ()>(Self, &mut [u8], F)\n-> ImageResult<()>","parent":{"krate":0,"index":2145},"children":[],"decl_id":null,"docs":" Same as `read_image` but periodically calls the provided callback to give updates on loading\n progress.\n","sig":null,"attributes":[{"value":"/ Same as `read_image` but periodically calls the provided callback to give updates on loading","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":363551,"byte_end":363647,"line_start":587,"line_end":587,"column_start":5,"column_end":101}},{"value":"/ progress.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":363652,"byte_end":363665,"line_start":588,"line_end":588,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":2158},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":364720,"byte_end":364735,"line_start":623,"line_end":623,"column_start":11,"column_end":26},"name":"ImageDecoderExt","qualname":"::image::ImageDecoderExt","value":"ImageDecoderExt<'a>: ImageDecoder + Sized","parent":null,"children":[{"krate":0,"index":2160},{"krate":0,"index":2162}],"decl_id":null,"docs":" Specialized image decoding not be supported by all formats\n","sig":null,"attributes":[{"value":"/ Specialized image decoding not be supported by all formats","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":364647,"byte_end":364709,"line_start":622,"line_end":622,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2160},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":364890,"byte_end":364899,"line_start":625,"line_end":625,"column_start":8,"column_end":17},"name":"read_rect","qualname":"::image::ImageDecoderExt::read_rect","value":"pub fn read_rect(&mut Self, u32, u32, u32, u32, &mut [u8]) -> ImageResult<()>","parent":{"krate":0,"index":2158},"children":[],"decl_id":null,"docs":" Decode a rectangular section of the image; see [`read_rect_with_progress()`](#fn.read_rect_with_progress).\n","sig":null,"attributes":[{"value":"/ Decode a rectangular section of the image; see [`read_rect_with_progress()`](#fn.read_rect_with_progress).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":364772,"byte_end":364882,"line_start":624,"line_end":624,"column_start":5,"column_end":115}}]},{"kind":"Method","id":{"krate":0,"index":2162},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":365841,"byte_end":365864,"line_start":648,"line_end":648,"column_start":8,"column_end":31},"name":"read_rect_with_progress","qualname":"::image::ImageDecoderExt::read_rect_with_progress","value":"pub fn read_rect_with_progress<F: Fn(Progress) ->\n                               ()>(&mut Self, u32, u32, u32, u32, &mut [u8],\n                                   F) -> ImageResult<()>","parent":{"krate":0,"index":2158},"children":[],"decl_id":null,"docs":" Decode a rectangular section of the image, periodically reporting progress.","sig":null,"attributes":[{"value":"/ Decode a rectangular section of the image, periodically reporting progress.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":365125,"byte_end":365204,"line_start":636,"line_end":636,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":365209,"byte_end":365212,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ The output buffer will be filled with fields specified by","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":365217,"byte_end":365278,"line_start":638,"line_end":638,"column_start":5,"column_end":66}},{"value":"/ [`ImageDecoder::color_type()`](trait.ImageDecoder.html#fn.color_type),","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":365283,"byte_end":365357,"line_start":639,"line_end":639,"column_start":5,"column_end":79}},{"value":"/ in that order, each field represented in native-endian.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":365362,"byte_end":365421,"line_start":640,"line_end":640,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":365426,"byte_end":365429,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ The progress callback will be called at least once at the start and the end of decoding,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":365434,"byte_end":365526,"line_start":642,"line_end":642,"column_start":5,"column_end":97}},{"value":"/ implementations are encouraged to call this more often,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":365531,"byte_end":365590,"line_start":643,"line_end":643,"column_start":5,"column_end":64}},{"value":"/ with a frequency meaningful for display to the end-user.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":365595,"byte_end":365655,"line_start":644,"line_end":644,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":365660,"byte_end":365663,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the output buffer isn't at least","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":365668,"byte_end":365732,"line_start":646,"line_end":646,"column_start":5,"column_end":69}},{"value":"/ `color_type().bytes_per_pixel() * color_type().channel_count() * width * height` bytes long.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":365737,"byte_end":365833,"line_start":647,"line_end":647,"column_start":5,"column_end":101}}]},{"kind":"Trait","id":{"krate":0,"index":2164},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":366095,"byte_end":366111,"line_start":660,"line_end":660,"column_start":11,"column_end":27},"name":"AnimationDecoder","qualname":"::image::AnimationDecoder","value":"AnimationDecoder<'a>","parent":null,"children":[{"krate":0,"index":2166}],"decl_id":null,"docs":" AnimationDecoder trait\n","sig":null,"attributes":[{"value":"/ AnimationDecoder trait","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":366058,"byte_end":366084,"line_start":659,"line_end":659,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":2166},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":366183,"byte_end":366194,"line_start":662,"line_end":662,"column_start":8,"column_end":19},"name":"into_frames","qualname":"::image::AnimationDecoder::into_frames","value":"pub fn into_frames(Self) -> Frames","parent":{"krate":0,"index":2164},"children":[],"decl_id":null,"docs":" Consume the decoder producing a series of frames.\n","sig":null,"attributes":[{"value":"/ Consume the decoder producing a series of frames.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":366122,"byte_end":366175,"line_start":661,"line_end":661,"column_start":5,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":2167},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":366266,"byte_end":366278,"line_start":666,"line_end":666,"column_start":11,"column_end":23},"name":"ImageEncoder","qualname":"::image::ImageEncoder","value":"ImageEncoder","parent":null,"children":[{"krate":0,"index":2168}],"decl_id":null,"docs":" The trait all encoders implement\n","sig":null,"attributes":[{"value":"/ The trait all encoders implement","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":366219,"byte_end":366255,"line_start":665,"line_end":665,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":2168},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":366827,"byte_end":366838,"line_start":677,"line_end":677,"column_start":8,"column_end":19},"name":"write_image","qualname":"::image::ImageEncoder::write_image","value":"pub fn write_image(Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":{"krate":0,"index":2167},"children":[],"decl_id":null,"docs":" Writes all the bytes in an image to the encoder.","sig":null,"attributes":[{"value":"/ Writes all the bytes in an image to the encoder.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":366285,"byte_end":366337,"line_start":667,"line_end":667,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":366342,"byte_end":366345,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ This function takes a slice of bytes of the pixel data of the image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":366350,"byte_end":366421,"line_start":669,"line_end":669,"column_start":5,"column_end":76}},{"value":"/ and encodes them. Unlike particular format encoders inherent impl encode","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":366426,"byte_end":366502,"line_start":670,"line_end":670,"column_start":5,"column_end":81}},{"value":"/ methods where endianness is not specified, here image data bytes should","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":366507,"byte_end":366582,"line_start":671,"line_end":671,"column_start":5,"column_end":80}},{"value":"/ always be in native endian. The implementor will reorder the endianess","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":366587,"byte_end":366661,"line_start":672,"line_end":672,"column_start":5,"column_end":79}},{"value":"/ as necessary for the target encoding format.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":366666,"byte_end":366714,"line_start":673,"line_end":673,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":366719,"byte_end":366722,"line_start":674,"line_end":674,"column_start":5,"column_end":8}},{"value":"/ See also `ImageDecoder::read_image` which reads byte buffers into","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":366727,"byte_end":366796,"line_start":675,"line_end":675,"column_start":5,"column_end":74}},{"value":"/ native endian.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":366801,"byte_end":366819,"line_start":676,"line_end":676,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3503},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":367032,"byte_end":367038,"line_start":688,"line_end":688,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::image::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":3506},{"krate":0,"index":3507},{"krate":0,"index":3508},{"krate":0,"index":3509},{"krate":0,"index":3510}],"decl_id":null,"docs":" Immutable pixel iterator\n","sig":null,"attributes":[{"value":"/ Immutable pixel iterator","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":366975,"byte_end":367003,"line_start":686,"line_end":686,"column_start":1,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":2177},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":367779,"byte_end":367795,"line_start":725,"line_end":725,"column_start":11,"column_end":27},"name":"GenericImageView","qualname":"::image::GenericImageView","value":"GenericImageView","parent":null,"children":[{"krate":0,"index":2178},{"krate":0,"index":2179},{"krate":0,"index":2180},{"krate":0,"index":2181},{"krate":0,"index":2182},{"krate":0,"index":2183},{"krate":0,"index":2184},{"krate":0,"index":2185},{"krate":0,"index":2186},{"krate":0,"index":2187},{"krate":0,"index":2188},{"krate":0,"index":2189}],"decl_id":null,"docs":" Trait to inspect an image.\n","sig":null,"attributes":[{"value":"/ Trait to inspect an image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":367738,"byte_end":367768,"line_start":724,"line_end":724,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":2178},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":367834,"byte_end":367839,"line_start":727,"line_end":727,"column_start":10,"column_end":15},"name":"Pixel","qualname":"::image::GenericImageView::Pixel","value":"type Pixel: Pixel;","parent":{"krate":0,"index":2177},"children":[],"decl_id":null,"docs":" The type of pixel.\n","sig":null,"attributes":[{"value":"/ The type of pixel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":367802,"byte_end":367824,"line_start":726,"line_end":726,"column_start":5,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":2179},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":368073,"byte_end":368087,"line_start":732,"line_end":732,"column_start":10,"column_end":24},"name":"InnerImageView","qualname":"::image::GenericImageView::InnerImageView","value":"type InnerImageView: GenericImageView<Pixel = Self::Pixel>;","parent":{"krate":0,"index":2177},"children":[],"decl_id":null,"docs":" Underlying image type. This is mainly used by SubImages in order to\n always have a reference to the original image. This allows for less\n indirections and it eases the use of nested SubImages.\n","sig":null,"attributes":[{"value":"/ Underlying image type. This is mainly used by SubImages in order to","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":367853,"byte_end":367924,"line_start":729,"line_end":729,"column_start":5,"column_end":76}},{"value":"/ always have a reference to the original image. This allows for less","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":367929,"byte_end":368000,"line_start":730,"line_end":730,"column_start":5,"column_end":76}},{"value":"/ indirections and it eases the use of nested SubImages.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":368005,"byte_end":368063,"line_start":731,"line_end":731,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2180},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":368180,"byte_end":368190,"line_start":735,"line_end":735,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::GenericImageView::dimensions","value":"pub fn dimensions(&Self) -> (u32, u32)","parent":{"krate":0,"index":2177},"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[{"value":"/ The width and height of this image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":368133,"byte_end":368172,"line_start":734,"line_end":734,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2181},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":368254,"byte_end":368259,"line_start":738,"line_end":738,"column_start":8,"column_end":13},"name":"width","qualname":"::image::GenericImageView::width","value":"pub fn width(&Self) -> u32","parent":{"krate":0,"index":2177},"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[{"value":"/ The width of this image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":368218,"byte_end":368246,"line_start":737,"line_end":737,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2182},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":368374,"byte_end":368380,"line_start":744,"line_end":744,"column_start":8,"column_end":14},"name":"height","qualname":"::image::GenericImageView::height","value":"pub fn height(&Self) -> u32","parent":{"krate":0,"index":2177},"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[{"value":"/ The height of this image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":368337,"byte_end":368366,"line_start":743,"line_end":743,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2183},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":368507,"byte_end":368513,"line_start":750,"line_end":750,"column_start":8,"column_end":14},"name":"bounds","qualname":"::image::GenericImageView::bounds","value":"pub fn bounds(&Self) -> (u32, u32, u32, u32)","parent":{"krate":0,"index":2177},"children":[],"decl_id":null,"docs":" The bounding rectangle of this image.\n","sig":null,"attributes":[{"value":"/ The bounding rectangle of this image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":368458,"byte_end":368499,"line_start":749,"line_end":749,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2184},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":368630,"byte_end":368639,"line_start":753,"line_end":753,"column_start":8,"column_end":17},"name":"in_bounds","qualname":"::image::GenericImageView::in_bounds","value":"pub fn in_bounds(&Self, u32, u32) -> bool","parent":{"krate":0,"index":2177},"children":[],"decl_id":null,"docs":" Returns true if this x, y coordinate is contained inside the image.\n","sig":null,"attributes":[{"value":"/ Returns true if this x, y coordinate is contained inside the image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":368551,"byte_end":368622,"line_start":752,"line_end":752,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2185},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":368986,"byte_end":368995,"line_start":765,"line_end":765,"column_start":8,"column_end":17},"name":"get_pixel","qualname":"::image::GenericImageView::get_pixel","value":"pub fn get_pixel(&Self, u32, u32) -> Self::Pixel","parent":{"krate":0,"index":2177},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y). Indexed from top left.","sig":null,"attributes":[{"value":"/ Returns the pixel located at (x, y). Indexed from top left.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":368787,"byte_end":368850,"line_start":758,"line_end":758,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":368855,"byte_end":368858,"line_start":759,"line_end":759,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":368863,"byte_end":368875,"line_start":760,"line_end":760,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":368880,"byte_end":368883,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":368888,"byte_end":368928,"line_start":762,"line_end":762,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":368933,"byte_end":368936,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ TODO: change this signature to &P","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":368941,"byte_end":368978,"line_start":764,"line_end":764,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2186},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":369340,"byte_end":369356,"line_start":775,"line_end":775,"column_start":15,"column_end":31},"name":"unsafe_get_pixel","qualname":"::image::GenericImageView::unsafe_get_pixel","value":"pub unsafe fn unsafe_get_pixel(&Self, u32, u32) -> Self::Pixel","parent":{"krate":0,"index":2177},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y). Indexed from top left.","sig":null,"attributes":[{"value":"/ Returns the pixel located at (x, y). Indexed from top left.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":369040,"byte_end":369103,"line_start":767,"line_end":767,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":369108,"byte_end":369111,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ This function can be implemented in a way that ignores bounds checking.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":369116,"byte_end":369191,"line_start":769,"line_end":769,"column_start":5,"column_end":80}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":369196,"byte_end":369208,"line_start":770,"line_end":770,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":369213,"byte_end":369216,"line_start":771,"line_end":771,"column_start":5,"column_end":8}},{"value":"/ The coordinates must be [`in_bounds`] of the image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":369221,"byte_end":369276,"line_start":772,"line_end":772,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":369281,"byte_end":369284,"line_start":773,"line_end":773,"column_start":5,"column_end":8}},{"value":"/ [`in_bounds`]: #method.in_bounds","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":369289,"byte_end":369325,"line_start":774,"line_end":774,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2187},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":369588,"byte_end":369594,"line_start":782,"line_end":782,"column_start":8,"column_end":14},"name":"pixels","qualname":"::image::GenericImageView::pixels","value":"pub fn pixels(&Self) -> Pixels<, Self>","parent":{"krate":0,"index":2177},"children":[],"decl_id":null,"docs":" Returns an Iterator over the pixels of this image.\n The iterator yields the coordinates of each pixel\n along with their value\n","sig":null,"attributes":[{"value":"/ Returns an Iterator over the pixels of this image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":369437,"byte_end":369491,"line_start":779,"line_end":779,"column_start":5,"column_end":59}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":369496,"byte_end":369549,"line_start":780,"line_end":780,"column_start":5,"column_end":58}},{"value":"/ along with their value","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":369554,"byte_end":369580,"line_start":781,"line_end":781,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2188},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":369864,"byte_end":369869,"line_start":795,"line_end":795,"column_start":8,"column_end":13},"name":"inner","qualname":"::image::GenericImageView::inner","value":"pub fn inner(&Self) -> &Self::InnerImageView","parent":{"krate":0,"index":2177},"children":[],"decl_id":null,"docs":" Returns a reference to the underlying image.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":369808,"byte_end":369856,"line_start":794,"line_end":794,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2189},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":370143,"byte_end":370147,"line_start":800,"line_end":800,"column_start":8,"column_end":12},"name":"view","qualname":"::image::GenericImageView::view","value":"pub fn view(&Self, u32, u32, u32, u32) -> SubImage<&Self::InnerImageView>","parent":{"krate":0,"index":2177},"children":[],"decl_id":null,"docs":" Returns an subimage that is an immutable view into this image.\n You can use [`GenericImage::sub_image`] if you need a mutable view instead.\n The coordinates set the position of the top left corner of the view.\n","sig":null,"attributes":[{"value":"/ Returns an subimage that is an immutable view into this image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":369908,"byte_end":369974,"line_start":797,"line_end":797,"column_start":5,"column_end":71}},{"value":"/ You can use [`GenericImage::sub_image`] if you need a mutable view instead.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":369979,"byte_end":370058,"line_start":798,"line_end":798,"column_start":5,"column_end":84}},{"value":"/ The coordinates set the position of the top left corner of the view.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":370063,"byte_end":370135,"line_start":799,"line_end":799,"column_start":5,"column_end":77}}]},{"kind":"Trait","id":{"krate":0,"index":2190},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":370346,"byte_end":370358,"line_start":806,"line_end":806,"column_start":11,"column_end":23},"name":"GenericImage","qualname":"::image::GenericImage","value":"GenericImage: GenericImageView","parent":null,"children":[{"krate":0,"index":2191},{"krate":0,"index":2192},{"krate":0,"index":2193},{"krate":0,"index":2194},{"krate":0,"index":2195},{"krate":0,"index":2196},{"krate":0,"index":2198},{"krate":0,"index":2200},{"krate":0,"index":2201}],"decl_id":null,"docs":" A trait for manipulating images.\n","sig":null,"attributes":[{"value":"/ A trait for manipulating images.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":370299,"byte_end":370335,"line_start":805,"line_end":805,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":2191},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":370603,"byte_end":370613,"line_start":810,"line_end":810,"column_start":10,"column_end":20},"name":"InnerImage","qualname":"::image::GenericImage::InnerImage","value":"type InnerImage: GenericImage<Pixel = Self::Pixel>;","parent":{"krate":0,"index":2190},"children":[],"decl_id":null,"docs":" Underlying image type. This is mainly used by SubImages in order to\n always have a reference to the original image. This allows for less\n indirections and it eases the use of nested SubImages.\n","sig":null,"attributes":[{"value":"/ Underlying image type. This is mainly used by SubImages in order to","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":370383,"byte_end":370454,"line_start":807,"line_end":807,"column_start":5,"column_end":76}},{"value":"/ always have a reference to the original image. This allows for less","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":370459,"byte_end":370530,"line_start":808,"line_end":808,"column_start":5,"column_end":76}},{"value":"/ indirections and it eases the use of nested SubImages.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":370535,"byte_end":370593,"line_start":809,"line_end":809,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2192},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":370827,"byte_end":370840,"line_start":817,"line_end":817,"column_start":8,"column_end":21},"name":"get_pixel_mut","qualname":"::image::GenericImage::get_pixel_mut","value":"pub fn get_pixel_mut(&mut Self, u32, u32) -> &mut Self::Pixel","parent":{"krate":0,"index":2190},"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`. Indexed from top left.","sig":null,"attributes":[{"value":"/ Gets a reference to the mutable pixel at location `(x, y)`. Indexed from top left.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":370655,"byte_end":370741,"line_start":812,"line_end":812,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":370746,"byte_end":370749,"line_start":813,"line_end":813,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":370754,"byte_end":370766,"line_start":814,"line_end":814,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":370771,"byte_end":370774,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":370779,"byte_end":370819,"line_start":816,"line_end":816,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2193},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":371038,"byte_end":371047,"line_start":824,"line_end":824,"column_start":8,"column_end":17},"name":"put_pixel","qualname":"::image::GenericImage::put_pixel","value":"pub fn put_pixel(&mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":2190},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y). Indexed from top left.","sig":null,"attributes":[{"value":"/ Put a pixel at location (x, y). Indexed from top left.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":370894,"byte_end":370952,"line_start":819,"line_end":819,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":370957,"byte_end":370960,"line_start":820,"line_end":820,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":370965,"byte_end":370977,"line_start":821,"line_end":821,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":370982,"byte_end":370985,"line_start":822,"line_end":822,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":370990,"byte_end":371030,"line_start":823,"line_end":823,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2194},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":371425,"byte_end":371441,"line_start":834,"line_end":834,"column_start":15,"column_end":31},"name":"unsafe_put_pixel","qualname":"::image::GenericImage::unsafe_put_pixel","value":"pub unsafe fn unsafe_put_pixel(&mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":2190},"children":[],"decl_id":null,"docs":" Puts a pixel at location (x, y). Indexed from top left.","sig":null,"attributes":[{"value":"/ Puts a pixel at location (x, y). Indexed from top left.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":371101,"byte_end":371160,"line_start":826,"line_end":826,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":371165,"byte_end":371168,"line_start":827,"line_end":827,"column_start":5,"column_end":8}},{"value":"/ This function can be implemented in a way that ignores bounds checking.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":371173,"byte_end":371248,"line_start":828,"line_end":828,"column_start":5,"column_end":80}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":371253,"byte_end":371265,"line_start":829,"line_end":829,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":371270,"byte_end":371273,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ The coordinates must be [`in_bounds`] of the image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":371278,"byte_end":371333,"line_start":831,"line_end":831,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":371338,"byte_end":371341,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ [`in_bounds`]: traits.GenericImageView.html#method.in_bounds","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":371346,"byte_end":371410,"line_start":833,"line_end":833,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2195},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":371708,"byte_end":371719,"line_start":841,"line_end":841,"column_start":8,"column_end":19},"name":"blend_pixel","qualname":"::image::GenericImage::blend_pixel","value":"pub fn blend_pixel(&mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":2190},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y), taking into account alpha channels","sig":null,"attributes":[{"value":"/ Put a pixel at location (x, y), taking into account alpha channels","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":371539,"byte_end":371609,"line_start":838,"line_end":838,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":371614,"byte_end":371617,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ DEPRECATED: This method will be removed. Blend the pixel directly instead.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":371622,"byte_end":371700,"line_start":840,"line_end":840,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":2196},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":372481,"byte_end":372490,"line_start":858,"line_end":858,"column_start":8,"column_end":17},"name":"copy_from","qualname":"::image::GenericImage::copy_from","value":"pub fn copy_from<O>(&mut Self, &O, u32, u32) -> ImageResult<()> where\nO: GenericImageView<Pixel = Self::Pixel>","parent":{"krate":0,"index":2190},"children":[],"decl_id":null,"docs":" Copies all of the pixels from another image into this image.","sig":null,"attributes":[{"value":"/ Copies all of the pixels from another image into this image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":371773,"byte_end":371837,"line_start":843,"line_end":843,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":371842,"byte_end":371845,"line_start":844,"line_end":844,"column_start":5,"column_end":8}},{"value":"/ The other image is copied with the top-left corner of the","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":371850,"byte_end":371911,"line_start":845,"line_end":845,"column_start":5,"column_end":66}},{"value":"/ other image placed at (x, y).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":371916,"byte_end":371949,"line_start":846,"line_end":846,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":371954,"byte_end":371957,"line_start":847,"line_end":847,"column_start":5,"column_end":8}},{"value":"/ In order to copy only a piece of the other image, use [`GenericImageView::view`].","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":371962,"byte_end":372047,"line_start":848,"line_end":848,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":372052,"byte_end":372055,"line_start":849,"line_end":849,"column_start":5,"column_end":8}},{"value":"/ You can use [`FlatSamples`] to source pixels from an arbitrary regular raster of channel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":372060,"byte_end":372152,"line_start":850,"line_end":850,"column_start":5,"column_end":97}},{"value":"/ values, for example from a foreign interface or a fixed image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":372157,"byte_end":372223,"line_start":851,"line_end":851,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":372228,"byte_end":372231,"line_start":852,"line_end":852,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":372236,"byte_end":372249,"line_start":853,"line_end":853,"column_start":5,"column_end":18}},{"value":"/ Returns an error if the image is too large to be copied at the given position","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":372254,"byte_end":372335,"line_start":854,"line_end":854,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":372340,"byte_end":372343,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ [`GenericImageView::view`]: trait.GenericImageView.html#method.view","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":372348,"byte_end":372419,"line_start":856,"line_end":856,"column_start":5,"column_end":76}},{"value":"/ [`FlatSamples`]: flat/struct.FlatSamples.html","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":372424,"byte_end":372473,"line_start":857,"line_end":857,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2198},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":373537,"byte_end":373548,"line_start":886,"line_end":886,"column_start":8,"column_end":19},"name":"copy_within","qualname":"::image::GenericImage::copy_within","value":"pub fn copy_within(&mut Self, Rect, u32, u32) -> bool","parent":{"krate":0,"index":2190},"children":[],"decl_id":null,"docs":" Copies all of the pixels from one part of this image to another part of this image.","sig":null,"attributes":[{"value":"/ Copies all of the pixels from one part of this image to another part of this image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":373189,"byte_end":373276,"line_start":879,"line_end":879,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":373281,"byte_end":373284,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ The destination rectangle of the copy is specified with the top-left corner placed at (x, y).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":373289,"byte_end":373386,"line_start":881,"line_end":881,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":373391,"byte_end":373394,"line_start":882,"line_end":882,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":373399,"byte_end":373412,"line_start":883,"line_end":883,"column_start":5,"column_end":18}},{"value":"/ `true` if the copy was successful, `false` if the image could not","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":373417,"byte_end":373486,"line_start":884,"line_end":884,"column_start":5,"column_end":74}},{"value":"/ be copied due to size constraints.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":373491,"byte_end":373529,"line_start":885,"line_end":885,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2200},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":375206,"byte_end":375215,"line_start":922,"line_end":922,"column_start":8,"column_end":17},"name":"inner_mut","qualname":"::image::GenericImage::inner_mut","value":"pub fn inner_mut(&mut Self) -> &mut Self::InnerImage","parent":{"krate":0,"index":2190},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying image.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":375142,"byte_end":375198,"line_start":921,"line_end":921,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2201},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":375491,"byte_end":375500,"line_start":927,"line_end":927,"column_start":8,"column_end":17},"name":"sub_image","qualname":"::image::GenericImage::sub_image","value":"pub fn sub_image(&mut Self, u32, u32, u32, u32)\n-> SubImage<&mut Self::InnerImage>","parent":{"krate":0,"index":2190},"children":[],"decl_id":null,"docs":" Returns a mutable subimage that is a view into this image.\n If you want an immutable subimage instead, use [`GenericImageView::view`]\n The coordinates set the position of the top left corner of the SubImage.\n","sig":null,"attributes":[{"value":"/ Returns a mutable subimage that is a view into this image.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":375258,"byte_end":375320,"line_start":924,"line_end":924,"column_start":5,"column_end":67}},{"value":"/ If you want an immutable subimage instead, use [`GenericImageView::view`]","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":375325,"byte_end":375402,"line_start":925,"line_end":925,"column_start":5,"column_end":82}},{"value":"/ The coordinates set the position of the top left corner of the SubImage.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":375407,"byte_end":375483,"line_start":926,"line_end":926,"column_start":5,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":2202},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":375991,"byte_end":375999,"line_start":944,"line_end":944,"column_start":12,"column_end":20},"name":"SubImage","qualname":"::image::SubImage","value":"SubImage {  }","parent":null,"children":[{"krate":0,"index":2204},{"krate":0,"index":2205},{"krate":0,"index":2206},{"krate":0,"index":2207},{"krate":0,"index":2208}],"decl_id":null,"docs":" A View into another image","sig":null,"attributes":[{"value":"/ A View into another image","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":375707,"byte_end":375736,"line_start":938,"line_end":938,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":375737,"byte_end":375740,"line_start":939,"line_end":939,"column_start":1,"column_end":4}},{"value":"/ Instances of this struct can be created using:","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":375741,"byte_end":375791,"line_start":940,"line_end":940,"column_start":1,"column_end":51}},{"value":"/   - [`GenericImage::sub_image`] to create a mutable view,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":375792,"byte_end":375853,"line_start":941,"line_end":941,"column_start":1,"column_end":62}},{"value":"/   - [`GenericImageView::view`] to create an immutable view,","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":375854,"byte_end":375917,"line_start":942,"line_end":942,"column_start":1,"column_end":64}},{"value":"/   - [`SubImage::new`] to instantiate the struct directly.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":375918,"byte_end":375979,"line_start":943,"line_end":943,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2215},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":376468,"byte_end":376471,"line_start":961,"line_end":961,"column_start":12,"column_end":15},"name":"new","qualname":"<SubImage<I>>::new","value":"pub fn new(I, u32, u32, u32, u32) -> SubImage<I>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new subimage\n The coordinates set the position of the top left corner of the SubImage.\n","sig":null,"attributes":[{"value":"/ Construct a new subimage","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":376347,"byte_end":376375,"line_start":959,"line_end":959,"column_start":5,"column_end":33}},{"value":"/ The coordinates set the position of the top left corner of the SubImage.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":376380,"byte_end":376456,"line_start":960,"line_end":960,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":2216},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":376760,"byte_end":376773,"line_start":972,"line_end":972,"column_start":12,"column_end":25},"name":"change_bounds","qualname":"<SubImage<I>>::change_bounds","value":"pub fn change_bounds(&mut Self, u32, u32, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Change the coordinates of this subimage.\n","sig":null,"attributes":[{"value":"/ Change the coordinates of this subimage.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":376704,"byte_end":376748,"line_start":971,"line_end":971,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2217},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":377007,"byte_end":377015,"line_start":980,"line_end":980,"column_start":12,"column_end":20},"name":"to_image","qualname":"<SubImage<I>>::to_image","value":"pub fn to_image(&Self) -> ImageBuffer<DerefPixel<I>, Vec<DerefSubpixel<I>>>\nwhere I: Deref, I::Target: GenericImage + 'static","parent":null,"children":[],"decl_id":null,"docs":" Convert this subimage to an ImageBuffer\n","sig":null,"attributes":[{"value":"/ Convert this subimage to an ImageBuffer","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":376952,"byte_end":376995,"line_start":979,"line_end":979,"column_start":5,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":2272},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":391870,"byte_end":391885,"line_start":12,"line_end":12,"column_start":11,"column_end":26},"name":"EncodableLayout","qualname":"::traits::EncodableLayout","value":"EncodableLayout: seals::EncodableLayout","parent":null,"children":[{"krate":0,"index":2273}],"decl_id":null,"docs":" Types which are safe to treat as an immutable byte slice in a pixel layout\n for image encoding.\n","sig":null,"attributes":[{"value":"/ Types which are safe to treat as an immutable byte slice in a pixel layout","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":391757,"byte_end":391835,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ for image encoding.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":391836,"byte_end":391859,"line_start":11,"line_end":11,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2273},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":391956,"byte_end":391964,"line_start":14,"line_end":14,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::traits::EncodableLayout::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":{"krate":0,"index":2272},"children":[],"decl_id":null,"docs":" Get the bytes of this value.\n","sig":null,"attributes":[{"value":"/ Get the bytes of this value.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":391916,"byte_end":391948,"line_start":13,"line_end":13,"column_start":5,"column_end":37}}]},{"kind":"Trait","id":{"krate":0,"index":2278},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":392252,"byte_end":392261,"line_start":30,"line_end":30,"column_start":11,"column_end":20},"name":"Primitive","qualname":"::traits::Primitive","value":"Primitive: Copy + NumCast + Num + PartialOrd<Self> + Clone + Bounded","parent":null,"children":[],"decl_id":null,"docs":" Primitive trait from old stdlib\n","sig":null,"attributes":[{"value":"/ Primitive trait from old stdlib","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":392206,"byte_end":392241,"line_start":29,"line_end":29,"column_start":1,"column_end":36}}]},{"kind":"Trait","id":{"krate":0,"index":2291},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":392783,"byte_end":392794,"line_start":47,"line_end":47,"column_start":11,"column_end":22},"name":"Enlargeable","qualname":"::traits::Enlargeable","value":"Enlargeable: Sized + Bounded + NumCast","parent":null,"children":[{"krate":0,"index":2292},{"krate":0,"index":2293}],"decl_id":null,"docs":" An Enlargable::Larger value should be enough to calculate\n the sum (average) of a few hundred or thousand Enlargeable values.\n","sig":null,"attributes":[{"value":"/ An Enlargable::Larger value should be enough to calculate","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":392640,"byte_end":392701,"line_start":45,"line_end":45,"column_start":1,"column_end":62}},{"value":"/ the sum (average) of a few hundred or thousand Enlargeable values.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":392702,"byte_end":392772,"line_start":46,"line_end":46,"column_start":1,"column_end":71}}]},{"kind":"Type","id":{"krate":0,"index":2292},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":392833,"byte_end":392839,"line_start":48,"line_end":48,"column_start":10,"column_end":16},"name":"Larger","qualname":"::traits::Enlargeable::Larger","value":"type Larger: Primitive + AddAssign + 'static;","parent":{"krate":0,"index":2291},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2293},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":392882,"byte_end":392892,"line_start":50,"line_end":50,"column_start":8,"column_end":18},"name":"clamp_from","qualname":"::traits::Enlargeable::clamp_from","value":"pub fn clamp_from(Self::Larger) -> Self","parent":{"krate":0,"index":2291},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2300},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":393364,"byte_end":393368,"line_start":71,"line_end":71,"column_start":11,"column_end":15},"name":"Lerp","qualname":"::traits::Lerp","value":"Lerp: Bounded + NumCast","parent":null,"children":[{"krate":0,"index":2301},{"krate":0,"index":2302}],"decl_id":null,"docs":" Linear interpolation without involving floating numbers.\n","sig":null,"attributes":[{"value":"/ Linear interpolation without involving floating numbers.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":393293,"byte_end":393353,"line_start":70,"line_end":70,"column_start":1,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":2301},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":393399,"byte_end":393404,"line_start":72,"line_end":72,"column_start":10,"column_end":15},"name":"Ratio","qualname":"::traits::Lerp::Ratio","value":"type Ratio: Primitive;","parent":{"krate":0,"index":2300},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2302},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":393425,"byte_end":393429,"line_start":74,"line_end":74,"column_start":8,"column_end":12},"name":"lerp","qualname":"::traits::Lerp::lerp","value":"pub fn lerp(Self, Self, Self::Ratio) -> Self","parent":{"krate":0,"index":2300},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2309},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":394155,"byte_end":394160,"line_start":105,"line_end":105,"column_start":11,"column_end":16},"name":"Pixel","qualname":"::traits::Pixel","value":"Pixel: Copy + Clone","parent":null,"children":[{"krate":0,"index":2310},{"krate":0,"index":2311},{"krate":0,"index":2312},{"krate":0,"index":2313},{"krate":0,"index":2314},{"krate":0,"index":2315},{"krate":0,"index":2316},{"krate":0,"index":2317},{"krate":0,"index":2318},{"krate":0,"index":2319},{"krate":0,"index":2320},{"krate":0,"index":2321},{"krate":0,"index":2322},{"krate":0,"index":2323},{"krate":0,"index":2324},{"krate":0,"index":2325},{"krate":0,"index":2326},{"krate":0,"index":2327},{"krate":0,"index":2328},{"krate":0,"index":2329},{"krate":0,"index":2331},{"krate":0,"index":2333},{"krate":0,"index":2336},{"krate":0,"index":2339},{"krate":0,"index":2342},{"krate":0,"index":2345},{"krate":0,"index":2347},{"krate":0,"index":2349},{"krate":0,"index":2350}],"decl_id":null,"docs":" A generalized pixel.","sig":null,"attributes":[{"value":"/ A generalized pixel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":394030,"byte_end":394054,"line_start":102,"line_end":102,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":394055,"byte_end":394058,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ A pixel object is usually not used standalone but as a view into an image buffer.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":394059,"byte_end":394144,"line_start":104,"line_end":104,"column_start":1,"column_end":86}}]},{"kind":"Type","id":{"krate":0,"index":2310},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":394224,"byte_end":394232,"line_start":107,"line_end":107,"column_start":10,"column_end":18},"name":"Subpixel","qualname":"::traits::Pixel::Subpixel","value":"type Subpixel: Primitive;","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" The underlying subpixel type.\n","sig":null,"attributes":[{"value":"/ The underlying subpixel type.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":394181,"byte_end":394214,"line_start":106,"line_end":106,"column_start":5,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":2311},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":394307,"byte_end":394320,"line_start":110,"line_end":110,"column_start":11,"column_end":24},"name":"CHANNEL_COUNT","qualname":"::traits::Pixel::CHANNEL_COUNT","value":"u8","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" The number of channels of this pixel type.\n","sig":null,"attributes":[{"value":"/ The number of channels of this pixel type.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":394250,"byte_end":394296,"line_start":109,"line_end":109,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2312},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":394463,"byte_end":394476,"line_start":113,"line_end":113,"column_start":8,"column_end":21},"name":"channel_count","qualname":"::traits::Pixel::channel_count","value":"pub fn channel_count() -> u8","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" Returns the number of channels of this pixel type.\n","sig":null,"attributes":[{"value":"/ Returns the number of channels of this pixel type.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":394330,"byte_end":394384,"line_start":111,"line_end":111,"column_start":5,"column_end":59}},{"value":"deprecated(note = \"please use CHANNEL_COUNT associated constant\")","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":394389,"byte_end":394455,"line_start":112,"line_end":112,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2313},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":394572,"byte_end":394580,"line_start":118,"line_end":118,"column_start":8,"column_end":16},"name":"channels","qualname":"::traits::Pixel::channels","value":"pub fn channels(&Self) -> &[Self::Subpixel]","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" Returns the components as a slice.\n","sig":null,"attributes":[{"value":"/ Returns the components as a slice.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":394526,"byte_end":394564,"line_start":117,"line_end":117,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2314},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":394668,"byte_end":394680,"line_start":121,"line_end":121,"column_start":8,"column_end":20},"name":"channels_mut","qualname":"::traits::Pixel::channels_mut","value":"pub fn channels_mut(&mut Self) -> &mut [Self::Subpixel]","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" Returns the components as a mutable slice\n","sig":null,"attributes":[{"value":"/ Returns the components as a mutable slice","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":394615,"byte_end":394660,"line_start":120,"line_end":120,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":2315},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":394846,"byte_end":394857,"line_start":125,"line_end":125,"column_start":11,"column_end":22},"name":"COLOR_MODEL","qualname":"::traits::Pixel::COLOR_MODEL","value":"&'static str","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" A string that can help to interpret the meaning each channel\n See [gimp babl](http://gegl.org/babl/).\n","sig":null,"attributes":[{"value":"/ A string that can help to interpret the meaning each channel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":394723,"byte_end":394787,"line_start":123,"line_end":123,"column_start":5,"column_end":69}},{"value":"/ See [gimp babl](http://gegl.org/babl/).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":394792,"byte_end":394835,"line_start":124,"line_end":124,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2316},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":395074,"byte_end":395085,"line_start":129,"line_end":129,"column_start":8,"column_end":19},"name":"color_model","qualname":"::traits::Pixel::color_model","value":"pub fn color_model() -> &'static str","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" Returns a string that can help to interpret the meaning each channel\n See [gimp babl](http://gegl.org/babl/).\n","sig":null,"attributes":[{"value":"/ Returns a string that can help to interpret the meaning each channel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":394877,"byte_end":394949,"line_start":126,"line_end":126,"column_start":5,"column_end":77}},{"value":"/ See [gimp babl](http://gegl.org/babl/).","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":394954,"byte_end":394997,"line_start":127,"line_end":127,"column_start":5,"column_end":48}},{"value":"deprecated(note = \"please use COLOR_MODEL associated constant\")","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":395002,"byte_end":395066,"line_start":128,"line_end":128,"column_start":5,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":2317},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":395189,"byte_end":395199,"line_start":134,"line_end":134,"column_start":11,"column_end":21},"name":"COLOR_TYPE","qualname":"::traits::Pixel::COLOR_TYPE","value":"ColorType","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" ColorType for this pixel format\n","sig":null,"attributes":[{"value":"/ ColorType for this pixel format","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":395143,"byte_end":395178,"line_start":133,"line_end":133,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2318},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":395339,"byte_end":395349,"line_start":137,"line_end":137,"column_start":8,"column_end":18},"name":"color_type","qualname":"::traits::Pixel::color_type","value":"pub fn color_type() -> ColorType","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" Returns the ColorType for this pixel format\n","sig":null,"attributes":[{"value":"/ Returns the ColorType for this pixel format","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":395216,"byte_end":395263,"line_start":135,"line_end":135,"column_start":5,"column_end":52}},{"value":"deprecated(note = \"please use COLOR_TYPE associated constant\")","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":395268,"byte_end":395331,"line_start":136,"line_end":136,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2319},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":395587,"byte_end":395596,"line_start":145,"line_end":145,"column_start":8,"column_end":17},"name":"channels4","qualname":"::traits::Pixel::channels4","value":"pub fn channels4(&Self)\n-> (Self::Subpixel, Self::Subpixel, Self::Subpixel, Self::Subpixel)","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" Returns the channels of this pixel as a 4 tuple. If the pixel\n has less than 4 channels the remainder is filled with the maximum value","sig":null,"attributes":[{"value":"/ Returns the channels of this pixel as a 4 tuple. If the pixel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":395403,"byte_end":395468,"line_start":141,"line_end":141,"column_start":5,"column_end":70}},{"value":"/ has less than 4 channels the remainder is filled with the maximum value","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":395473,"byte_end":395548,"line_start":142,"line_end":142,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":395553,"byte_end":395556,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ TODO deprecate","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":395561,"byte_end":395579,"line_start":144,"line_end":144,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2320},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":395899,"byte_end":395912,"line_start":158,"line_end":158,"column_start":8,"column_end":21},"name":"from_channels","qualname":"::traits::Pixel::from_channels","value":"pub fn from_channels(Self::Subpixel, Self::Subpixel, Self::Subpixel,\n                     Self::Subpixel) -> Self","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" Construct a pixel from the 4 channels a, b, c and d.\n If the pixel does not contain 4 channels the extra are ignored.","sig":null,"attributes":[{"value":"/ Construct a pixel from the 4 channels a, b, c and d.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":395732,"byte_end":395788,"line_start":154,"line_end":154,"column_start":5,"column_end":61}},{"value":"/ If the pixel does not contain 4 channels the extra are ignored.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":395793,"byte_end":395860,"line_start":155,"line_end":155,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":395865,"byte_end":395868,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ TODO deprecate","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":395873,"byte_end":395891,"line_start":157,"line_end":157,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2321},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":396266,"byte_end":396276,"line_start":169,"line_end":169,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::traits::Pixel::from_slice","value":"pub fn from_slice(&[Self::Subpixel]) -> &Self","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" Returns a view into a slice.","sig":null,"attributes":[{"value":"/ Returns a view into a slice.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":396042,"byte_end":396074,"line_start":165,"line_end":165,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":396079,"byte_end":396082,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Note: The slice length is not checked on creation. Thus the caller has to ensure","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":396087,"byte_end":396171,"line_start":167,"line_end":167,"column_start":5,"column_end":89}},{"value":"/ that the slice is long enough to prevent panics if the pixel is used later on.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":396176,"byte_end":396258,"line_start":168,"line_end":168,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2322},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":396556,"byte_end":396570,"line_start":175,"line_end":175,"column_start":8,"column_end":22},"name":"from_slice_mut","qualname":"::traits::Pixel::from_slice_mut","value":"pub fn from_slice_mut(&mut [Self::Subpixel]) -> &mut Self","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" Returns mutable view into a mutable slice.","sig":null,"attributes":[{"value":"/ Returns mutable view into a mutable slice.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":396318,"byte_end":396364,"line_start":171,"line_end":171,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":396369,"byte_end":396372,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ Note: The slice length is not checked on creation. Thus the caller has to ensure","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":396377,"byte_end":396461,"line_start":173,"line_end":173,"column_start":5,"column_end":89}},{"value":"/ that the slice is long enough to prevent panics if the pixel is used later on.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":396466,"byte_end":396548,"line_start":174,"line_end":174,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2323},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":396657,"byte_end":396663,"line_start":178,"line_end":178,"column_start":8,"column_end":14},"name":"to_rgb","qualname":"::traits::Pixel::to_rgb","value":"pub fn to_rgb(&Self) -> Rgb<Self::Subpixel>","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB\n","sig":null,"attributes":[{"value":"/ Convert this pixel to RGB","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":396620,"byte_end":396649,"line_start":177,"line_end":177,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2324},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":396759,"byte_end":396766,"line_start":181,"line_end":181,"column_start":8,"column_end":15},"name":"to_rgba","qualname":"::traits::Pixel::to_rgba","value":"pub fn to_rgba(&Self) -> Rgba<Self::Subpixel>","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to RGB with an alpha channel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":396700,"byte_end":396751,"line_start":180,"line_end":180,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2325},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":396842,"byte_end":396849,"line_start":184,"line_end":184,"column_start":8,"column_end":15},"name":"to_luma","qualname":"::traits::Pixel::to_luma","value":"pub fn to_luma(&Self) -> Luma<Self::Subpixel>","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" Convert this pixel to luma\n","sig":null,"attributes":[{"value":"/ Convert this pixel to luma","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":396804,"byte_end":396834,"line_start":183,"line_end":183,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2326},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":396947,"byte_end":396960,"line_start":187,"line_end":187,"column_start":8,"column_end":21},"name":"to_luma_alpha","qualname":"::traits::Pixel::to_luma_alpha","value":"pub fn to_luma_alpha(&Self) -> LumaA<Self::Subpixel>","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" Convert this pixel to luma with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to luma with an alpha channel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":396887,"byte_end":396939,"line_start":186,"line_end":186,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2327},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":397036,"byte_end":397042,"line_start":190,"line_end":190,"column_start":8,"column_end":14},"name":"to_bgr","qualname":"::traits::Pixel::to_bgr","value":"pub fn to_bgr(&Self) -> Bgr<Self::Subpixel>","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" Convert this pixel to BGR\n","sig":null,"attributes":[{"value":"/ Convert this pixel to BGR","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":396999,"byte_end":397028,"line_start":189,"line_end":189,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2328},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":397138,"byte_end":397145,"line_start":193,"line_end":193,"column_start":8,"column_end":15},"name":"to_bgra","qualname":"::traits::Pixel::to_bgra","value":"pub fn to_bgra(&Self) -> Bgra<Self::Subpixel>","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" Convert this pixel to BGR with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to BGR with an alpha channel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":397079,"byte_end":397130,"line_start":192,"line_end":192,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2329},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":397252,"byte_end":397255,"line_start":196,"line_end":196,"column_start":8,"column_end":11},"name":"map","qualname":"::traits::Pixel::map","value":"pub fn map<F>(&Self, F) -> Self where F: FnMut(Self::Subpixel) ->\nSelf::Subpixel","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":397183,"byte_end":397244,"line_start":195,"line_end":195,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2331},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":397416,"byte_end":397421,"line_start":201,"line_end":201,"column_start":8,"column_end":13},"name":"apply","qualname":"::traits::Pixel::apply","value":"pub fn apply<F>(&mut Self, F) where F: FnMut(Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":397347,"byte_end":397408,"line_start":200,"line_end":200,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2333},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":397646,"byte_end":397660,"line_start":207,"line_end":207,"column_start":8,"column_end":22},"name":"map_with_alpha","qualname":"::traits::Pixel::map_with_alpha","value":"pub fn map_with_alpha<F, G>(&Self, F, G) -> Self where\nF: FnMut(Self::Subpixel) -> Self::Subpixel, G: FnMut(Self::Subpixel) ->\nSelf::Subpixel","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":397509,"byte_end":397581,"line_start":205,"line_end":205,"column_start":5,"column_end":77}},{"value":"/ Apply the function ```g``` to the alpha channel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":397586,"byte_end":397638,"line_start":206,"line_end":206,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2336},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":397966,"byte_end":397982,"line_start":214,"line_end":214,"column_start":8,"column_end":24},"name":"apply_with_alpha","qualname":"::traits::Pixel::apply_with_alpha","value":"pub fn apply_with_alpha<F, G>(&mut Self, F, G) where F: FnMut(Self::Subpixel)\n-> Self::Subpixel, G: FnMut(Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel. Works in-place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":397813,"byte_end":397885,"line_start":212,"line_end":212,"column_start":5,"column_end":77}},{"value":"/ Apply the function ```g``` to the alpha channel. Works in-place.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":397890,"byte_end":397958,"line_start":213,"line_end":213,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2339},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":398211,"byte_end":398228,"line_start":220,"line_end":220,"column_start":8,"column_end":25},"name":"map_without_alpha","qualname":"::traits::Pixel::map_without_alpha","value":"pub fn map_without_alpha<F>(&Self, F) -> Self where F: FnMut(Self::Subpixel)\n-> Self::Subpixel","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":398131,"byte_end":398203,"line_start":219,"line_end":219,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2342},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":398520,"byte_end":398539,"line_start":231,"line_end":231,"column_start":8,"column_end":27},"name":"apply_without_alpha","qualname":"::traits::Pixel::apply_without_alpha","value":"pub fn apply_without_alpha<F>(&mut Self, F) where F: FnMut(Self::Subpixel) ->\nSelf::Subpixel","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Works in place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":398416,"byte_end":398488,"line_start":229,"line_end":229,"column_start":5,"column_end":77}},{"value":"/ Works in place.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":398493,"byte_end":398512,"line_start":230,"line_end":230,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2345},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":398782,"byte_end":398786,"line_start":240,"line_end":240,"column_start":8,"column_end":12},"name":"map2","qualname":"::traits::Pixel::map2","value":"pub fn map2<F>(&Self, &Self, F) -> Self where\nF: FnMut(Self::Subpixel, Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel and","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":398680,"byte_end":398744,"line_start":238,"line_end":238,"column_start":5,"column_end":69}},{"value":"/ ```other``` pairwise.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":398749,"byte_end":398774,"line_start":239,"line_end":239,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2347},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":399026,"byte_end":399032,"line_start":246,"line_end":246,"column_start":8,"column_end":14},"name":"apply2","qualname":"::traits::Pixel::apply2","value":"pub fn apply2<F>(&mut Self, &Self, F) where\nF: FnMut(Self::Subpixel, Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise. Works in-place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel and","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":398908,"byte_end":398972,"line_start":244,"line_end":244,"column_start":5,"column_end":69}},{"value":"/ ```other``` pairwise. Works in-place.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":398977,"byte_end":399018,"line_start":245,"line_end":245,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2349},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":399179,"byte_end":399185,"line_start":251,"line_end":251,"column_start":8,"column_end":14},"name":"invert","qualname":"::traits::Pixel::invert","value":"pub fn invert(&mut Self)","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" Invert this pixel\n","sig":null,"attributes":[{"value":"/ Invert this pixel","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":399150,"byte_end":399171,"line_start":250,"line_end":250,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":2350},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":399296,"byte_end":399301,"line_start":254,"line_end":254,"column_start":8,"column_end":13},"name":"blend","qualname":"::traits::Pixel::blend","value":"pub fn blend(&mut Self, &Self)","parent":{"krate":0,"index":2309},"children":[],"decl_id":null,"docs":" Blend the color of a given pixel into ourself, taking into account alpha channels\n","sig":null,"attributes":[{"value":"/ Blend the color of a given pixel into ourself, taking into account alpha channels","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":399203,"byte_end":399288,"line_start":253,"line_end":253,"column_start":5,"column_end":90}}]},{"kind":"Trait","id":{"krate":0,"index":2352},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":399410,"byte_end":399425,"line_start":259,"line_end":259,"column_start":15,"column_end":30},"name":"EncodableLayout","qualname":"::traits::seals::EncodableLayout","value":"EncodableLayout","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3515},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\utils\\mod.rs","byte_start":403739,"byte_end":403758,"line_start":115,"line_end":115,"column_start":12,"column_end":31},"name":"NonExhaustiveMarker","qualname":"::utils::NonExhaustiveMarker","value":"NonExhaustiveMarker {  }","parent":null,"children":[{"krate":0,"index":3516}],"decl_id":null,"docs":" A marker struct for __NonExhaustive enums.","sig":null,"attributes":[{"value":"/ A marker struct for __NonExhaustive enums.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\utils\\mod.rs","byte_start":403016,"byte_end":403062,"line_start":104,"line_end":104,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\utils\\mod.rs","byte_start":403063,"byte_end":403066,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ This is an empty type that can not be constructed. When an enum contains a tuple variant that","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\utils\\mod.rs","byte_start":403067,"byte_end":403164,"line_start":106,"line_end":106,"column_start":1,"column_end":98}},{"value":"/ includes this type the optimizer can statically determined tha the branch is never taken while","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\utils\\mod.rs","byte_start":403165,"byte_end":403263,"line_start":107,"line_end":107,"column_start":1,"column_end":99}},{"value":"/ at the same time the matching of the branch is required.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\utils\\mod.rs","byte_start":403264,"byte_end":403324,"line_start":108,"line_end":108,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\utils\\mod.rs","byte_start":403325,"byte_end":403328,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ The effect is thus very similar to the actual `#[non_exhaustive]` attribute with no runtime","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\utils\\mod.rs","byte_start":403329,"byte_end":403424,"line_start":110,"line_end":110,"column_start":1,"column_end":96}},{"value":"/ costs. Also note that we use a dirty trick to not only hide this type from the doc but make it","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\utils\\mod.rs","byte_start":403425,"byte_end":403523,"line_start":111,"line_end":111,"column_start":1,"column_end":99}},{"value":"/ inaccessible. The visibility in this module is pub but the module itself is not and the","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\utils\\mod.rs","byte_start":403524,"byte_end":403615,"line_start":112,"line_end":112,"column_start":1,"column_end":92}},{"value":"/ top-level crate never exports the type.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\utils\\mod.rs","byte_start":403616,"byte_end":403659,"line_start":113,"line_end":113,"column_start":1,"column_end":44}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":20090,"byte_end":20106,"line_start":194,"line_end":194,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":20804,"byte_end":20817,"line_start":217,"line_end":217,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":21593,"byte_end":21606,"line_start":245,"line_end":245,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":171},{"krate":0,"index":173},{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":22383,"byte_end":22397,"line_start":273,"line_end":273,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":22776,"byte_end":22786,"line_start":288,"line_end":288,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":179},{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":23143,"byte_end":23153,"line_start":302,"line_end":302,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":23269,"byte_end":23284,"line_start":308,"line_end":308,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":23413,"byte_end":23428,"line_start":314,"line_end":314,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":23678,"byte_end":23694,"line_start":323,"line_end":323,"column_start":32,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":23997,"byte_end":24007,"line_start":335,"line_end":335,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":24468,"byte_end":24478,"line_start":348,"line_end":348,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":24931,"byte_end":24947,"line_start":361,"line_end":361,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":26569,"byte_end":26585,"line_start":404,"line_end":404,"column_start":16,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":26613,"byte_end":26627,"line_start":406,"line_end":406,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":27662,"byte_end":27676,"line_start":438,"line_end":438,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":201}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":27881,"byte_end":27894,"line_start":447,"line_end":447,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":28355,"byte_end":28368,"line_start":465,"line_end":465,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":205}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":28573,"byte_end":28586,"line_start":474,"line_end":474,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":29033,"byte_end":29046,"line_start":486,"line_end":486,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":209}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":29251,"byte_end":29261,"line_start":495,"line_end":495,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":29644,"byte_end":29654,"line_start":505,"line_end":505,"column_start":16,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":29682,"byte_end":29697,"line_start":507,"line_end":507,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":34538,"byte_end":34546,"line_start":86,"line_end":86,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":35116,"byte_end":35124,"line_start":105,"line_end":105,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":256}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":35273,"byte_end":35281,"line_start":112,"line_end":112,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":75030,"byte_end":75037,"line_start":362,"line_end":362,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":75816,"byte_end":75824,"line_start":398,"line_end":398,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":549},{"krate":0,"index":550}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":76363,"byte_end":76371,"line_start":422,"line_end":422,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":556},{"krate":0,"index":557}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":83862,"byte_end":83874,"line_start":112,"line_end":112,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":92155,"byte_end":92167,"line_start":379,"line_end":379,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":640},{"krate":0,"index":641},{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":112150,"byte_end":112156,"line_start":68,"line_end":68,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":770},{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":775}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":113538,"byte_end":113544,"line_start":115,"line_end":115,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":777},{"krate":0,"index":779}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":114330,"byte_end":114336,"line_start":137,"line_end":137,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":782},{"krate":0,"index":783},{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":787}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":132616,"byte_end":132628,"line_start":124,"line_end":124,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":926},{"krate":0,"index":927},{"krate":0,"index":928},{"krate":0,"index":929},{"krate":0,"index":930},{"krate":0,"index":931},{"krate":0,"index":933},{"krate":0,"index":935},{"krate":0,"index":938},{"krate":0,"index":939},{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":942},{"krate":0,"index":946},{"krate":0,"index":947}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":145223,"byte_end":145226,"line_start":437,"line_end":437,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":949},{"krate":0,"index":950},{"krate":0,"index":951}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":145484,"byte_end":145495,"line_start":452,"line_end":452,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":959},{"krate":0,"index":961},{"krate":0,"index":963},{"krate":0,"index":966},{"krate":0,"index":968},{"krate":0,"index":970},{"krate":0,"index":972},{"krate":0,"index":974},{"krate":0,"index":976},{"krate":0,"index":978},{"krate":0,"index":980},{"krate":0,"index":982},{"krate":0,"index":985},{"krate":0,"index":986},{"krate":0,"index":987},{"krate":0,"index":988},{"krate":0,"index":989},{"krate":0,"index":990},{"krate":0,"index":991},{"krate":0,"index":992},{"krate":0,"index":993}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":162650,"byte_end":162661,"line_start":873,"line_end":873,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":997}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":168513,"byte_end":168517,"line_start":1028,"line_end":1028,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1002},{"krate":0,"index":1003},{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":1006},{"krate":0,"index":1007},{"krate":0,"index":1008},{"krate":0,"index":1009},{"krate":0,"index":1010},{"krate":0,"index":1011}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":174102,"byte_end":174109,"line_start":1161,"line_end":1161,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1015},{"krate":0,"index":1016},{"krate":0,"index":1017},{"krate":0,"index":1018},{"krate":0,"index":1019},{"krate":0,"index":1020},{"krate":0,"index":1021},{"krate":0,"index":1022},{"krate":0,"index":1023}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":178485,"byte_end":178496,"line_start":1275,"line_end":1275,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1028},{"krate":0,"index":1029}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":179105,"byte_end":179116,"line_start":1294,"line_end":1294,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1033}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":179720,"byte_end":179724,"line_start":1312,"line_end":1312,"column_start":45,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1038},{"krate":0,"index":1039},{"krate":0,"index":1040},{"krate":0,"index":1041},{"krate":0,"index":1042},{"krate":0,"index":1043},{"krate":0,"index":1046}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":180971,"byte_end":180978,"line_start":1357,"line_end":1357,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1050},{"krate":0,"index":1051},{"krate":0,"index":1052},{"krate":0,"index":1053},{"krate":0,"index":1054},{"krate":0,"index":1055},{"krate":0,"index":1058}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":182245,"byte_end":182252,"line_start":1402,"line_end":1402,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1062},{"krate":0,"index":1063},{"krate":0,"index":1064},{"krate":0,"index":1065},{"krate":0,"index":1066}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":183147,"byte_end":183157,"line_start":1431,"line_end":1431,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1068}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":183309,"byte_end":183332,"line_start":1435,"line_end":1435,"column_start":31,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1070}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":183540,"byte_end":183563,"line_start":1440,"line_end":1440,"column_start":31,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":184137,"byte_end":184142,"line_start":1454,"line_end":1454,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1073}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":185077,"byte_end":185082,"line_start":1478,"line_end":1478,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":185107,"byte_end":185117,"line_start":1480,"line_end":1480,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1076}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":191169,"byte_end":191175,"line_start":14,"line_end":14,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1099},{"krate":0,"index":1100}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":191765,"byte_end":191771,"line_start":30,"line_end":30,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1103},{"krate":0,"index":1104}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":192290,"byte_end":192295,"line_start":55,"line_end":55,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1106},{"krate":0,"index":1107},{"krate":0,"index":1108},{"krate":0,"index":1109},{"krate":0,"index":1110},{"krate":0,"index":1111},{"krate":0,"index":1112},{"krate":0,"index":1113}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":193368,"byte_end":193373,"line_start":107,"line_end":107,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":199409,"byte_end":199417,"line_start":263,"line_end":263,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1130}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":202878,"byte_end":202884,"line_start":26,"line_end":26,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1236},{"krate":0,"index":1237}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":203128,"byte_end":203134,"line_start":38,"line_end":38,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1242}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":203283,"byte_end":203289,"line_start":47,"line_end":47,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1246}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":203498,"byte_end":203504,"line_start":57,"line_end":57,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1250}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":203630,"byte_end":203636,"line_start":63,"line_end":63,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1253}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":204051,"byte_end":204060,"line_start":83,"line_end":83,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1261},{"krate":0,"index":1262}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":204316,"byte_end":204325,"line_start":95,"line_end":95,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1267}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":204474,"byte_end":204483,"line_start":104,"line_end":104,"column_start":49,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1271}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":204731,"byte_end":204740,"line_start":116,"line_end":116,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1275}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":205306,"byte_end":205310,"line_start":140,"line_end":140,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1283}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":206209,"byte_end":206213,"line_start":161,"line_end":161,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1287},{"krate":0,"index":1288}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":206623,"byte_end":206627,"line_start":177,"line_end":177,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1292}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":206776,"byte_end":206780,"line_start":186,"line_end":186,"column_start":49,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1296}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":207147,"byte_end":207151,"line_start":200,"line_end":200,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1299}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":207275,"byte_end":207279,"line_start":206,"line_end":206,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1302}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":207866,"byte_end":207873,"line_start":230,"line_end":230,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1310}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":208794,"byte_end":208801,"line_start":251,"line_end":251,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1314},{"krate":0,"index":1315}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":209224,"byte_end":209231,"line_start":267,"line_end":267,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1319}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":209380,"byte_end":209387,"line_start":276,"line_end":276,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1323}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":209769,"byte_end":209776,"line_start":290,"line_end":290,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1326}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":210232,"byte_end":210247,"line_start":313,"line_end":313,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1337},{"krate":0,"index":1338}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":210650,"byte_end":210665,"line_start":331,"line_end":331,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1343}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":210791,"byte_end":210806,"line_start":340,"line_end":340,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1346}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":210982,"byte_end":210997,"line_start":349,"line_end":349,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1349}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":211536,"byte_end":211549,"line_start":374,"line_end":374,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1359},{"krate":0,"index":1360}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":212087,"byte_end":212100,"line_start":398,"line_end":398,"column_start":47,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1365}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":212224,"byte_end":212237,"line_start":407,"line_end":407,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1368}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":212407,"byte_end":212420,"line_start":416,"line_end":416,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1371}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":212948,"byte_end":212966,"line_start":441,"line_end":441,"column_start":38,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1382},{"krate":0,"index":1383}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":213377,"byte_end":213395,"line_start":459,"line_end":459,"column_start":47,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1388}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":213526,"byte_end":213544,"line_start":468,"line_end":468,"column_start":31,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1391}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":214092,"byte_end":214108,"line_start":493,"line_end":493,"column_start":38,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1401},{"krate":0,"index":1402}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":214655,"byte_end":214671,"line_start":517,"line_end":517,"column_start":47,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1407}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":214800,"byte_end":214816,"line_start":526,"line_end":526,"column_start":31,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1410}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":217838,"byte_end":217849,"line_start":620,"line_end":620,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1414},{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":1417},{"krate":0,"index":1418},{"krate":0,"index":1419},{"krate":0,"index":1420},{"krate":0,"index":1421},{"krate":0,"index":1422},{"krate":0,"index":1423},{"krate":0,"index":1424},{"krate":0,"index":1425},{"krate":0,"index":1426},{"krate":0,"index":1428},{"krate":0,"index":1431},{"krate":0,"index":1432},{"krate":0,"index":1433},{"krate":0,"index":1434},{"krate":0,"index":1435},{"krate":0,"index":1436}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":224674,"byte_end":224685,"line_start":815,"line_end":815,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1440},{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1443},{"krate":0,"index":1444},{"krate":0,"index":1445},{"krate":0,"index":1446}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":227283,"byte_end":227294,"line_start":890,"line_end":890,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1450}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":227946,"byte_end":227957,"line_start":915,"line_end":915,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1455}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":228702,"byte_end":228713,"line_start":942,"line_end":942,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1460}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":228982,"byte_end":228993,"line_start":957,"line_end":957,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1464},{"krate":0,"index":1465}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":229257,"byte_end":229268,"line_start":970,"line_end":970,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1469}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":229534,"byte_end":229545,"line_start":981,"line_end":981,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1473},{"krate":0,"index":1474}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":229816,"byte_end":229827,"line_start":994,"line_end":994,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1478}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":230088,"byte_end":230099,"line_start":1005,"line_end":1005,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1482}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":230458,"byte_end":230469,"line_start":1020,"line_end":1020,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1486},{"krate":0,"index":1487},{"krate":0,"index":1488},{"krate":0,"index":1489},{"krate":0,"index":1490},{"krate":0,"index":1491},{"krate":0,"index":1492}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":231293,"byte_end":231304,"line_start":1053,"line_end":1053,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1496},{"krate":0,"index":1497},{"krate":0,"index":1498},{"krate":0,"index":1499},{"krate":0,"index":1500},{"krate":0,"index":1501},{"krate":0,"index":1502}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":234889,"byte_end":234900,"line_start":1145,"line_end":1145,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1507},{"krate":0,"index":1508},{"krate":0,"index":1509},{"krate":0,"index":1511},{"krate":0,"index":1512}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":237334,"byte_end":237343,"line_start":1223,"line_end":1223,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1517}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":238741,"byte_end":238752,"line_start":1261,"line_end":1261,"column_start":67,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":1525}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":249345,"byte_end":249354,"line_start":37,"line_end":37,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1562},{"krate":0,"index":1563},{"krate":0,"index":1565},{"krate":0,"index":1567},{"krate":0,"index":1568}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":253100,"byte_end":253117,"line_start":150,"line_end":150,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1570}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":254441,"byte_end":254458,"line_start":185,"line_end":185,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1572}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":260558,"byte_end":260559,"line_start":391,"line_end":391,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1579}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":260997,"byte_end":260998,"line_start":405,"line_end":405,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1586}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":262254,"byte_end":262258,"line_start":449,"line_end":449,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1597}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":262487,"byte_end":262491,"line_start":457,"line_end":457,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1600}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":262719,"byte_end":262723,"line_start":465,"line_end":465,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1603}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":262948,"byte_end":262952,"line_start":473,"line_end":473,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1606}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":263179,"byte_end":263183,"line_start":481,"line_end":481,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1609}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":263331,"byte_end":263335,"line_start":488,"line_end":488,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1611}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":263579,"byte_end":263583,"line_start":497,"line_end":497,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1613}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":263827,"byte_end":263831,"line_start":506,"line_end":506,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1615}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":264017,"byte_end":264021,"line_start":513,"line_end":513,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1617}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":264207,"byte_end":264211,"line_start":520,"line_end":520,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1619}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":264399,"byte_end":264403,"line_start":527,"line_end":527,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1621}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":264616,"byte_end":264620,"line_start":535,"line_end":535,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1623}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":264842,"byte_end":264846,"line_start":543,"line_end":543,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1625}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":265070,"byte_end":265074,"line_start":551,"line_end":551,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1627}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":265296,"byte_end":265300,"line_start":559,"line_end":559,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1629}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":265575,"byte_end":265580,"line_start":570,"line_end":570,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1632}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":265842,"byte_end":265847,"line_start":579,"line_end":579,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1635}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":266108,"byte_end":266113,"line_start":588,"line_end":588,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1638}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":266378,"byte_end":266383,"line_start":597,"line_end":597,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1641}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":266649,"byte_end":266654,"line_start":606,"line_end":606,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1644}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":266867,"byte_end":266872,"line_start":614,"line_end":614,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1646}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":267172,"byte_end":267177,"line_start":624,"line_end":624,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1648}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":267472,"byte_end":267477,"line_start":634,"line_end":634,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1650}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":267729,"byte_end":267734,"line_start":643,"line_end":643,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1652}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":267998,"byte_end":268003,"line_start":652,"line_end":652,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1654}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":268276,"byte_end":268281,"line_start":661,"line_end":661,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1656}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":268545,"byte_end":268550,"line_start":670,"line_end":670,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1658}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":268872,"byte_end":268876,"line_start":682,"line_end":682,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1661}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":269177,"byte_end":269181,"line_start":693,"line_end":693,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1664}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":269483,"byte_end":269487,"line_start":704,"line_end":704,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1667}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":269788,"byte_end":269792,"line_start":715,"line_end":715,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1670}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":270093,"byte_end":270097,"line_start":726,"line_end":726,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1673}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":270374,"byte_end":270378,"line_start":737,"line_end":737,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1675}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":270740,"byte_end":270744,"line_start":748,"line_end":748,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1677}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":271094,"byte_end":271098,"line_start":759,"line_end":759,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1679}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":271453,"byte_end":271457,"line_start":772,"line_end":772,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1681}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":271789,"byte_end":271793,"line_start":783,"line_end":783,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1683}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":272112,"byte_end":272116,"line_start":795,"line_end":795,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1685}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":272448,"byte_end":272452,"line_start":806,"line_end":806,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1687}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":272843,"byte_end":272847,"line_start":819,"line_end":819,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1690}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":273148,"byte_end":273152,"line_start":830,"line_end":830,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1693}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":273454,"byte_end":273458,"line_start":841,"line_end":841,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1696}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":273759,"byte_end":273763,"line_start":852,"line_end":852,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1699}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":274064,"byte_end":274068,"line_start":863,"line_end":863,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1702}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":274392,"byte_end":274395,"line_start":877,"line_end":877,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1705}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":274664,"byte_end":274667,"line_start":887,"line_end":887,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1708}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":274935,"byte_end":274938,"line_start":897,"line_end":897,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1711}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":275203,"byte_end":275206,"line_start":907,"line_end":907,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1714}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":275470,"byte_end":275473,"line_start":917,"line_end":917,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1717}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":275711,"byte_end":275714,"line_start":927,"line_end":927,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1719}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":275939,"byte_end":275942,"line_start":935,"line_end":935,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1721}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":276167,"byte_end":276170,"line_start":943,"line_end":943,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1723}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":276453,"byte_end":276456,"line_start":954,"line_end":954,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1725}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":276753,"byte_end":276756,"line_start":964,"line_end":964,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1727}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":277035,"byte_end":277038,"line_start":975,"line_end":975,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1729}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":277330,"byte_end":277333,"line_start":985,"line_end":985,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1731}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":277679,"byte_end":277682,"line_start":998,"line_end":998,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1734}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":277950,"byte_end":277953,"line_start":1008,"line_end":1008,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1737}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":278218,"byte_end":278221,"line_start":1019,"line_end":1019,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1740}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":278491,"byte_end":278494,"line_start":1029,"line_end":1029,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1743}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":278758,"byte_end":278761,"line_start":1039,"line_end":1039,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1746}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":280427,"byte_end":280432,"line_start":1093,"line_end":1093,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1752}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":281437,"byte_end":281441,"line_start":1126,"line_end":1126,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1755}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":281551,"byte_end":281555,"line_start":1132,"line_end":1132,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1758}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":283763,"byte_end":283767,"line_start":1190,"line_end":1190,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1761}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":285973,"byte_end":285976,"line_start":1246,"line_end":1246,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1764}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":286085,"byte_end":286088,"line_start":1252,"line_end":1252,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1767}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":286307,"byte_end":286312,"line_start":1265,"line_end":1265,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1772}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":286485,"byte_end":286489,"line_start":1274,"line_end":1274,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1775}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":286677,"byte_end":286681,"line_start":1285,"line_end":1285,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1778}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":286894,"byte_end":286898,"line_start":1296,"line_end":1296,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1781}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":287111,"byte_end":287114,"line_start":1307,"line_end":1307,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1784}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":287376,"byte_end":287379,"line_start":1321,"line_end":1321,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1787}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":299093,"byte_end":299105,"line_start":137,"line_end":137,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1906},{"krate":0,"index":1907},{"krate":0,"index":1908},{"krate":0,"index":1909},{"krate":0,"index":1910},{"krate":0,"index":1911},{"krate":0,"index":1912},{"krate":0,"index":1913},{"krate":0,"index":1914},{"krate":0,"index":1915},{"krate":0,"index":1916},{"krate":0,"index":1919},{"krate":0,"index":1920},{"krate":0,"index":1921},{"krate":0,"index":1922},{"krate":0,"index":1923},{"krate":0,"index":1924},{"krate":0,"index":1925},{"krate":0,"index":1926},{"krate":0,"index":1927},{"krate":0,"index":1928},{"krate":0,"index":1929},{"krate":0,"index":1930},{"krate":0,"index":1931},{"krate":0,"index":1932},{"krate":0,"index":1933},{"krate":0,"index":1934},{"krate":0,"index":1935},{"krate":0,"index":1936},{"krate":0,"index":1937},{"krate":0,"index":1938},{"krate":0,"index":1939},{"krate":0,"index":1940},{"krate":0,"index":1941},{"krate":0,"index":1942},{"krate":0,"index":1943},{"krate":0,"index":1944},{"krate":0,"index":1945},{"krate":0,"index":1946},{"krate":0,"index":1947},{"krate":0,"index":1948},{"krate":0,"index":1949},{"krate":0,"index":1950},{"krate":0,"index":1951},{"krate":0,"index":1952},{"krate":0,"index":1953},{"krate":0,"index":1954},{"krate":0,"index":1955},{"krate":0,"index":1956},{"krate":0,"index":1957},{"krate":0,"index":1958},{"krate":0,"index":1959},{"krate":0,"index":1960},{"krate":0,"index":1961},{"krate":0,"index":1962},{"krate":0,"index":1963},{"krate":0,"index":1964},{"krate":0,"index":1965},{"krate":0,"index":1966},{"krate":0,"index":1967},{"krate":0,"index":1968},{"krate":0,"index":1969},{"krate":0,"index":1970},{"krate":0,"index":1971},{"krate":0,"index":1972},{"krate":0,"index":1973},{"krate":0,"index":1974},{"krate":0,"index":1975},{"krate":0,"index":1976},{"krate":0,"index":1977},{"krate":0,"index":1978},{"krate":0,"index":1979},{"krate":0,"index":1980},{"krate":0,"index":1981},{"krate":0,"index":1982},{"krate":0,"index":1983},{"krate":0,"index":1984},{"krate":0,"index":1985},{"krate":0,"index":1986},{"krate":0,"index":1987},{"krate":0,"index":1988},{"krate":0,"index":1989},{"krate":0,"index":1990},{"krate":0,"index":1991},{"krate":0,"index":1992},{"krate":0,"index":1993},{"krate":0,"index":1994},{"krate":0,"index":1995},{"krate":0,"index":1996},{"krate":0,"index":1997},{"krate":0,"index":2000},{"krate":0,"index":2002}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":330438,"byte_end":330450,"line_start":1040,"line_end":1040,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2005},{"krate":0,"index":2006},{"krate":0,"index":2007},{"krate":0,"index":2008},{"krate":0,"index":2009},{"krate":0,"index":2010}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":330983,"byte_end":330995,"line_start":1062,"line_end":1062,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2012},{"krate":0,"index":2013},{"krate":0,"index":2014},{"krate":0,"index":2015},{"krate":0,"index":2016}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343567,"byte_end":343578,"line_start":68,"line_end":68,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2107},{"krate":0,"index":2110},{"krate":0,"index":2114},{"krate":0,"index":2115},{"krate":0,"index":2116}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":350240,"byte_end":350257,"line_start":259,"line_end":259,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2118}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":351652,"byte_end":351667,"line_start":298,"line_end":298,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2126},{"krate":0,"index":2127}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":360526,"byte_end":360534,"line_start":506,"line_end":506,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2142},{"krate":0,"index":2143},{"krate":0,"index":2144}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":367182,"byte_end":367188,"line_start":696,"line_end":696,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2172},{"krate":0,"index":2173}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":367656,"byte_end":367662,"line_start":718,"line_end":718,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2176}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Inherent","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":376329,"byte_end":376337,"line_start":958,"line_end":958,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2215},{"krate":0,"index":2216},{"krate":0,"index":2217}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":377555,"byte_end":377563,"line_start":1000,"line_end":1000,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2220},{"krate":0,"index":2221},{"krate":0,"index":2222},{"krate":0,"index":2223},{"krate":0,"index":2224},{"krate":0,"index":2225},{"krate":0,"index":2226}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":378384,"byte_end":378392,"line_start":1032,"line_end":1032,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2229},{"krate":0,"index":2230},{"krate":0,"index":2231},{"krate":0,"index":2232},{"krate":0,"index":2233},{"krate":0,"index":2234}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":5146,"byte_end":5151,"line_start":148,"line_end":148,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":141}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":5544,"byte_end":5548,"line_start":167,"line_end":167,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":244}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\mod.rs","byte_start":30631,"byte_end":30633,"line_start":2,"line_end":2,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":245}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\mod.rs","byte_start":30643,"byte_end":30648,"line_start":3,"line_end":3,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":259}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":5589,"byte_end":5597,"line_start":170,"line_end":170,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":270}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\mod.rs","byte_start":40339,"byte_end":40347,"line_start":29,"line_end":29,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":456}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":5623,"byte_end":5625,"line_start":173,"line_end":173,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":708}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src/lib.rs","byte_start":5671,"byte_end":5675,"line_start":176,"line_end":176,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":856}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":20090,"byte_end":20106,"line_start":194,"line_end":194,"column_start":6,"column_end":22},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":2397},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":20804,"byte_end":20817,"line_start":217,"line_end":217,"column_start":6,"column_end":19},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":2460},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":21593,"byte_end":21606,"line_start":245,"line_end":245,"column_start":6,"column_end":19},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":2426},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":22383,"byte_end":22397,"line_start":273,"line_end":273,"column_start":6,"column_end":20},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":2431},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":22776,"byte_end":22786,"line_start":288,"line_end":288,"column_start":6,"column_end":16},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":2465},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":23143,"byte_end":23153,"line_start":302,"line_end":302,"column_start":26,"column_end":36},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":2376},"to":{"krate":2,"index":2738}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":23269,"byte_end":23284,"line_start":308,"line_end":308,"column_start":28,"column_end":43},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":2491},"to":{"krate":2,"index":2738}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":23413,"byte_end":23428,"line_start":314,"line_end":314,"column_start":36,"column_end":51},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":2491},"to":{"krate":2,"index":2738}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":23678,"byte_end":23694,"line_start":323,"line_end":323,"column_start":32,"column_end":48},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":2397},"to":{"krate":2,"index":2738}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":23997,"byte_end":24007,"line_start":335,"line_end":335,"column_start":23,"column_end":33},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":2376},"to":{"krate":2,"index":8819}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":24468,"byte_end":24478,"line_start":348,"line_end":348,"column_start":16,"column_end":26},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":2376},"to":{"krate":1,"index":2326}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":24931,"byte_end":24947,"line_start":361,"line_end":361,"column_start":23,"column_end":39},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":2397},"to":{"krate":2,"index":8819}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":26569,"byte_end":26585,"line_start":404,"line_end":404,"column_start":16,"column_end":32},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":2397},"to":{"krate":1,"index":2326}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":26613,"byte_end":26627,"line_start":406,"line_end":406,"column_start":23,"column_end":37},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":2431},"to":{"krate":2,"index":8819}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":27662,"byte_end":27676,"line_start":438,"line_end":438,"column_start":16,"column_end":30},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":2431},"to":{"krate":1,"index":2326}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":27881,"byte_end":27894,"line_start":447,"line_end":447,"column_start":23,"column_end":36},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":2426},"to":{"krate":2,"index":8819}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":28355,"byte_end":28368,"line_start":465,"line_end":465,"column_start":16,"column_end":29},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":2426},"to":{"krate":1,"index":2326}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":28573,"byte_end":28586,"line_start":474,"line_end":474,"column_start":23,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":2460},"to":{"krate":2,"index":8819}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":29033,"byte_end":29046,"line_start":486,"line_end":486,"column_start":16,"column_end":29},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":2460},"to":{"krate":1,"index":2326}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":29251,"byte_end":29261,"line_start":495,"line_end":495,"column_start":23,"column_end":33},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":2465},"to":{"krate":2,"index":8819}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":29644,"byte_end":29654,"line_start":505,"line_end":505,"column_start":16,"column_end":26},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":2465},"to":{"krate":1,"index":2326}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\error.rs","byte_start":29682,"byte_end":29697,"line_start":507,"line_end":507,"column_start":23,"column_end":38},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":2491},"to":{"krate":2,"index":8819}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":34538,"byte_end":34546,"line_start":86,"line_end":86,"column_start":6,"column_end":14},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":246},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":35116,"byte_end":35124,"line_start":105,"line_end":105,"column_start":38,"column_end":46},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":246},"to":{"krate":2,"index":2738}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\math\\nq.rs","byte_start":35273,"byte_end":35281,"line_start":112,"line_end":112,"column_start":38,"column_end":46},"kind":{"Impl":{"id":24}},"from":{"krate":20,"index":26},"to":{"krate":2,"index":2738}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":75030,"byte_end":75037,"line_start":362,"line_end":362,"column_start":19,"column_end":26},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":2537},"to":{"krate":0,"index":532}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":75816,"byte_end":75824,"line_start":398,"line_end":398,"column_start":23,"column_end":31},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":246},"to":{"krate":0,"index":532}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\colorops.rs","byte_start":76363,"byte_end":76371,"line_start":422,"line_end":422,"column_start":32,"column_end":40},"kind":{"Impl":{"id":27}},"from":{"krate":20,"index":26},"to":{"krate":0,"index":532}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":83862,"byte_end":83874,"line_start":112,"line_end":112,"column_start":22,"column_end":34},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":607},"to":{"krate":14,"index":294}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\imageops\\sample.rs","byte_start":92155,"byte_end":92167,"line_start":379,"line_end":379,"column_start":34,"column_end":46},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":631},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":112150,"byte_end":112156,"line_start":68,"line_end":68,"column_start":15,"column_end":21},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":764},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":113538,"byte_end":113544,"line_start":115,"line_end":115,"column_start":6,"column_end":12},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":764},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\io\\reader.rs","byte_start":114330,"byte_end":114336,"line_start":137,"line_end":137,"column_start":25,"column_end":31},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":764},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":132616,"byte_end":132628,"line_start":124,"line_end":124,"column_start":6,"column_end":18},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":2572},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":145223,"byte_end":145226,"line_start":437,"line_end":437,"column_start":6,"column_end":9},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":2594},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":145484,"byte_end":145495,"line_start":452,"line_end":452,"column_start":14,"column_end":25},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":2561},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":162650,"byte_end":162661,"line_start":873,"line_end":873,"column_start":22,"column_end":33},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":2561},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":168513,"byte_end":168517,"line_start":1028,"line_end":1028,"column_start":24,"column_end":28},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":2614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":174102,"byte_end":174109,"line_start":1161,"line_end":1161,"column_start":24,"column_end":31},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":2627},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":178485,"byte_end":178496,"line_start":1275,"line_end":1275,"column_start":40,"column_end":51},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":2561},"to":{"krate":2,"index":3139}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":179105,"byte_end":179116,"line_start":1294,"line_end":1294,"column_start":43,"column_end":54},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":2561},"to":{"krate":2,"index":3143}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":179720,"byte_end":179724,"line_start":1312,"line_end":1312,"column_start":45,"column_end":49},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":2614},"to":{"krate":0,"index":2177}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":180971,"byte_end":180978,"line_start":1357,"line_end":1357,"column_start":45,"column_end":52},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":2627},"to":{"krate":0,"index":2177}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":182245,"byte_end":182252,"line_start":1402,"line_end":1402,"column_start":41,"column_end":48},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":2627},"to":{"krate":0,"index":2190}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":183147,"byte_end":183157,"line_start":1431,"line_end":1431,"column_start":22,"column_end":32},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":2376},"to":{"krate":2,"index":2738}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":183309,"byte_end":183332,"line_start":1435,"line_end":1435,"column_start":31,"column_end":54},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":2689},"to":{"krate":2,"index":8819}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":183540,"byte_end":183563,"line_start":1440,"line_end":1440,"column_start":31,"column_end":54},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":2689},"to":{"krate":1,"index":2326}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":184137,"byte_end":184142,"line_start":1454,"line_end":1454,"column_start":23,"column_end":28},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":2640},"to":{"krate":2,"index":8819}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":185077,"byte_end":185082,"line_start":1478,"line_end":1478,"column_start":23,"column_end":28},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":2640},"to":{"krate":1,"index":2326}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\flat.rs","byte_start":185107,"byte_end":185117,"line_start":1480,"line_end":1480,"column_start":21,"column_end":31},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":2664},"to":{"krate":2,"index":2530}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":191169,"byte_end":191175,"line_start":14,"line_end":14,"column_start":10,"column_end":16},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1094},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":191765,"byte_end":191771,"line_start":30,"line_end":30,"column_start":23,"column_end":29},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1094},"to":{"krate":2,"index":7240}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":192290,"byte_end":192295,"line_start":55,"line_end":55,"column_start":6,"column_end":11},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":2694},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":193368,"byte_end":193373,"line_start":107,"line_end":107,"column_start":6,"column_end":11},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":2701},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\animation.rs","byte_start":199409,"byte_end":199417,"line_start":263,"line_end":263,"column_start":22,"column_end":30},"kind":{"Impl":{"id":54}},"from":{"krate":2,"index":42251},"to":{"krate":2,"index":2738}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":202878,"byte_end":202884,"line_start":26,"line_end":26,"column_start":38,"column_end":44},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1229},"to":{"krate":2,"index":7240}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":203128,"byte_end":203134,"line_start":38,"line_end":38,"column_start":47,"column_end":53},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1229},"to":{"krate":2,"index":7129}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":203283,"byte_end":203289,"line_start":47,"line_end":47,"column_start":49,"column_end":55},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1229},"to":{"krate":2,"index":7104}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":203498,"byte_end":203504,"line_start":57,"line_end":57,"column_start":26,"column_end":32},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1229},"to":{"krate":2,"index":2457}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":203630,"byte_end":203636,"line_start":63,"line_end":63,"column_start":31,"column_end":37},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1229},"to":{"krate":2,"index":8812}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":204051,"byte_end":204060,"line_start":83,"line_end":83,"column_start":38,"column_end":47},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1254},"to":{"krate":2,"index":7240}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":204316,"byte_end":204325,"line_start":95,"line_end":95,"column_start":47,"column_end":56},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1254},"to":{"krate":2,"index":7129}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":204474,"byte_end":204483,"line_start":104,"line_end":104,"column_start":49,"column_end":58},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1254},"to":{"krate":2,"index":7104}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":204731,"byte_end":204740,"line_start":116,"line_end":116,"column_start":31,"column_end":40},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1254},"to":{"krate":2,"index":8812}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":205306,"byte_end":205310,"line_start":140,"line_end":140,"column_start":25,"column_end":29},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1276},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":206209,"byte_end":206213,"line_start":161,"line_end":161,"column_start":38,"column_end":42},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1276},"to":{"krate":2,"index":7240}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":206623,"byte_end":206627,"line_start":177,"line_end":177,"column_start":47,"column_end":51},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1276},"to":{"krate":2,"index":7129}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":206776,"byte_end":206780,"line_start":186,"line_end":186,"column_start":49,"column_end":53},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1276},"to":{"krate":2,"index":7104}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":207147,"byte_end":207151,"line_start":200,"line_end":200,"column_start":26,"column_end":30},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1276},"to":{"krate":2,"index":2457}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":207275,"byte_end":207279,"line_start":206,"line_end":206,"column_start":31,"column_end":35},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1276},"to":{"krate":2,"index":8812}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":207866,"byte_end":207873,"line_start":230,"line_end":230,"column_start":25,"column_end":32},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1303},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":208794,"byte_end":208801,"line_start":251,"line_end":251,"column_start":38,"column_end":45},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1303},"to":{"krate":2,"index":7240}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":209224,"byte_end":209231,"line_start":267,"line_end":267,"column_start":47,"column_end":54},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1303},"to":{"krate":2,"index":7129}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":209380,"byte_end":209387,"line_start":276,"line_end":276,"column_start":49,"column_end":56},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1303},"to":{"krate":2,"index":7104}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":209769,"byte_end":209776,"line_start":290,"line_end":290,"column_start":31,"column_end":38},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1303},"to":{"krate":2,"index":8812}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":210232,"byte_end":210247,"line_start":313,"line_end":313,"column_start":38,"column_end":53},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1327},"to":{"krate":2,"index":7240}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":210650,"byte_end":210665,"line_start":331,"line_end":331,"column_start":47,"column_end":62},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1327},"to":{"krate":2,"index":7129}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":210791,"byte_end":210806,"line_start":340,"line_end":340,"column_start":26,"column_end":41},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1327},"to":{"krate":2,"index":2457}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":210982,"byte_end":210997,"line_start":349,"line_end":349,"column_start":31,"column_end":46},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1327},"to":{"krate":2,"index":8812}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":211536,"byte_end":211549,"line_start":374,"line_end":374,"column_start":38,"column_end":51},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1350},"to":{"krate":2,"index":7240}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":212087,"byte_end":212100,"line_start":398,"line_end":398,"column_start":47,"column_end":60},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1350},"to":{"krate":2,"index":7129}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":212224,"byte_end":212237,"line_start":407,"line_end":407,"column_start":26,"column_end":39},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1350},"to":{"krate":2,"index":2457}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":212407,"byte_end":212420,"line_start":416,"line_end":416,"column_start":31,"column_end":44},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1350},"to":{"krate":2,"index":8812}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":212948,"byte_end":212966,"line_start":441,"line_end":441,"column_start":38,"column_end":56},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1372},"to":{"krate":2,"index":7240}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":213377,"byte_end":213395,"line_start":459,"line_end":459,"column_start":47,"column_end":65},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1372},"to":{"krate":2,"index":7129}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":213526,"byte_end":213544,"line_start":468,"line_end":468,"column_start":31,"column_end":49},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1372},"to":{"krate":2,"index":8812}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":214092,"byte_end":214108,"line_start":493,"line_end":493,"column_start":38,"column_end":54},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1392},"to":{"krate":2,"index":7240}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":214655,"byte_end":214671,"line_start":517,"line_end":517,"column_start":47,"column_end":63},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1392},"to":{"krate":2,"index":7129}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":214800,"byte_end":214816,"line_start":526,"line_end":526,"column_start":31,"column_end":47},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1392},"to":{"krate":2,"index":8812}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":217838,"byte_end":217849,"line_start":620,"line_end":620,"column_start":20,"column_end":31},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":2717},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":224674,"byte_end":224685,"line_start":815,"line_end":815,"column_start":20,"column_end":31},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":2717},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":227283,"byte_end":227294,"line_start":890,"line_end":890,"column_start":20,"column_end":31},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":2717},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":227946,"byte_end":227957,"line_start":915,"line_end":915,"column_start":20,"column_end":31},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":2717},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":228702,"byte_end":228713,"line_start":942,"line_end":942,"column_start":32,"column_end":43},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":2717},"to":{"krate":2,"index":2810}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":228982,"byte_end":228993,"line_start":957,"line_end":957,"column_start":30,"column_end":41},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":2717},"to":{"krate":2,"index":3054}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":229257,"byte_end":229268,"line_start":970,"line_end":970,"column_start":33,"column_end":44},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":2717},"to":{"krate":2,"index":3067}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":229534,"byte_end":229545,"line_start":981,"line_end":981,"column_start":42,"column_end":53},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":2717},"to":{"krate":2,"index":3139}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":229816,"byte_end":229827,"line_start":994,"line_end":994,"column_start":45,"column_end":56},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":2717},"to":{"krate":2,"index":3143}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":230088,"byte_end":230099,"line_start":1005,"line_end":1005,"column_start":30,"column_end":41},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":2717},"to":{"krate":2,"index":2457}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":230458,"byte_end":230469,"line_start":1020,"line_end":1020,"column_start":41,"column_end":52},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":2717},"to":{"krate":0,"index":2177}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":231293,"byte_end":231304,"line_start":1053,"line_end":1053,"column_start":37,"column_end":48},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":2717},"to":{"krate":0,"index":2190}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":234889,"byte_end":234900,"line_start":1145,"line_end":1145,"column_start":26,"column_end":37},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":2717},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":237334,"byte_end":237343,"line_start":1223,"line_end":1223,"column_start":6,"column_end":15},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1528},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\buffer.rs","byte_start":238741,"byte_end":238752,"line_start":1261,"line_end":1261,"column_start":67,"column_end":78},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":2717},"to":{"krate":0,"index":1513}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":249345,"byte_end":249354,"line_start":37,"line_end":37,"column_start":6,"column_end":15},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":2748},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":253100,"byte_end":253117,"line_start":150,"line_end":150,"column_start":6,"column_end":23},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":2787},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":254441,"byte_end":254458,"line_start":185,"line_end":185,"column_start":26,"column_end":43},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":2787},"to":{"krate":2,"index":2738}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":260558,"byte_end":260559,"line_start":391,"line_end":391,"column_start":32,"column_end":33},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1578},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":260997,"byte_end":260998,"line_start":405,"line_end":405,"column_start":29,"column_end":30},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1585},"to":{"krate":0,"index":1580}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":262254,"byte_end":262258,"line_start":449,"line_end":449,"column_start":53,"column_end":57},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":3213},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":262487,"byte_end":262491,"line_start":457,"line_end":457,"column_start":53,"column_end":57},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":3213},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":262719,"byte_end":262723,"line_start":465,"line_end":465,"column_start":52,"column_end":56},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":3213},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":262948,"byte_end":262952,"line_start":473,"line_end":473,"column_start":52,"column_end":56},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":3213},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":263179,"byte_end":263183,"line_start":481,"line_end":481,"column_start":54,"column_end":58},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":3213},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":263331,"byte_end":263335,"line_start":488,"line_end":488,"column_start":31,"column_end":35},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":3213},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":263579,"byte_end":263583,"line_start":497,"line_end":497,"column_start":30,"column_end":34},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":3213},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":263827,"byte_end":263831,"line_start":506,"line_end":506,"column_start":31,"column_end":35},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":3213},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":264017,"byte_end":264021,"line_start":513,"line_end":513,"column_start":30,"column_end":34},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":3213},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":264207,"byte_end":264211,"line_start":520,"line_end":520,"column_start":32,"column_end":36},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":3213},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":264399,"byte_end":264403,"line_start":527,"line_end":527,"column_start":31,"column_end":35},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":3213},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":264616,"byte_end":264620,"line_start":535,"line_end":535,"column_start":29,"column_end":33},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":3213},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":264842,"byte_end":264846,"line_start":543,"line_end":543,"column_start":30,"column_end":34},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":3213},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":265070,"byte_end":265074,"line_start":551,"line_end":551,"column_start":29,"column_end":33},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":3213},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":265296,"byte_end":265300,"line_start":559,"line_end":559,"column_start":30,"column_end":34},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":3213},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":265575,"byte_end":265580,"line_start":570,"line_end":570,"column_start":53,"column_end":58},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":3300},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":265842,"byte_end":265847,"line_start":579,"line_end":579,"column_start":53,"column_end":58},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":3300},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":266108,"byte_end":266113,"line_start":588,"line_end":588,"column_start":52,"column_end":57},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":3300},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":266378,"byte_end":266383,"line_start":597,"line_end":597,"column_start":52,"column_end":57},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":3300},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":266649,"byte_end":266654,"line_start":606,"line_end":606,"column_start":53,"column_end":58},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":3300},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":266867,"byte_end":266872,"line_start":614,"line_end":614,"column_start":32,"column_end":37},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":3300},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":267172,"byte_end":267177,"line_start":624,"line_end":624,"column_start":31,"column_end":36},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":3300},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":267472,"byte_end":267477,"line_start":634,"line_end":634,"column_start":30,"column_end":35},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":3300},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":267729,"byte_end":267734,"line_start":643,"line_end":643,"column_start":29,"column_end":34},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":3300},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":267998,"byte_end":268003,"line_start":652,"line_end":652,"column_start":30,"column_end":35},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":3300},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":268276,"byte_end":268281,"line_start":661,"line_end":661,"column_start":29,"column_end":34},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":3300},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":268545,"byte_end":268550,"line_start":670,"line_end":670,"column_start":30,"column_end":35},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":3300},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":268872,"byte_end":268876,"line_start":682,"line_end":682,"column_start":52,"column_end":56},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":3242},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":269177,"byte_end":269181,"line_start":693,"line_end":693,"column_start":52,"column_end":56},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":3242},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":269483,"byte_end":269487,"line_start":704,"line_end":704,"column_start":53,"column_end":57},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":3242},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":269788,"byte_end":269792,"line_start":715,"line_end":715,"column_start":54,"column_end":58},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":3242},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":270093,"byte_end":270097,"line_start":726,"line_end":726,"column_start":53,"column_end":57},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":3242},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":270374,"byte_end":270378,"line_start":737,"line_end":737,"column_start":31,"column_end":35},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":3242},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":270740,"byte_end":270744,"line_start":748,"line_end":748,"column_start":30,"column_end":34},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":3242},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":271094,"byte_end":271098,"line_start":759,"line_end":759,"column_start":31,"column_end":35},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":3242},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":271453,"byte_end":271457,"line_start":772,"line_end":772,"column_start":29,"column_end":33},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":3242},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":271789,"byte_end":271793,"line_start":783,"line_end":783,"column_start":30,"column_end":34},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":3242},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":272112,"byte_end":272116,"line_start":795,"line_end":795,"column_start":29,"column_end":33},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":3242},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":272448,"byte_end":272452,"line_start":806,"line_end":806,"column_start":30,"column_end":34},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":3242},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":272843,"byte_end":272847,"line_start":819,"line_end":819,"column_start":52,"column_end":56},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":3271},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":273148,"byte_end":273152,"line_start":830,"line_end":830,"column_start":52,"column_end":56},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":3271},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":273454,"byte_end":273458,"line_start":841,"line_end":841,"column_start":53,"column_end":57},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":3271},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":273759,"byte_end":273763,"line_start":852,"line_end":852,"column_start":54,"column_end":58},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":3271},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":274064,"byte_end":274068,"line_start":863,"line_end":863,"column_start":53,"column_end":57},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":3271},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":274392,"byte_end":274395,"line_start":877,"line_end":877,"column_start":53,"column_end":56},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":3155},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":274664,"byte_end":274667,"line_start":887,"line_end":887,"column_start":53,"column_end":56},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":3155},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":274935,"byte_end":274938,"line_start":897,"line_end":897,"column_start":52,"column_end":55},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":3155},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":275203,"byte_end":275206,"line_start":907,"line_end":907,"column_start":54,"column_end":57},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":3155},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":275470,"byte_end":275473,"line_start":917,"line_end":917,"column_start":53,"column_end":56},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":3155},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":275711,"byte_end":275714,"line_start":927,"line_end":927,"column_start":30,"column_end":33},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":3155},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":275939,"byte_end":275942,"line_start":935,"line_end":935,"column_start":29,"column_end":32},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":3155},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":276167,"byte_end":276170,"line_start":943,"line_end":943,"column_start":31,"column_end":34},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":3155},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":276453,"byte_end":276456,"line_start":954,"line_end":954,"column_start":30,"column_end":33},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":3155},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":276753,"byte_end":276756,"line_start":964,"line_end":964,"column_start":30,"column_end":33},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":3155},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":277035,"byte_end":277038,"line_start":975,"line_end":975,"column_start":29,"column_end":32},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":3155},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":277330,"byte_end":277333,"line_start":985,"line_end":985,"column_start":30,"column_end":33},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":3155},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":277679,"byte_end":277682,"line_start":998,"line_end":998,"column_start":53,"column_end":56},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":3184},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":277950,"byte_end":277953,"line_start":1008,"line_end":1008,"column_start":52,"column_end":55},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":3184},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":278218,"byte_end":278221,"line_start":1019,"line_end":1019,"column_start":53,"column_end":56},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":3184},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":278491,"byte_end":278494,"line_start":1029,"line_end":1029,"column_start":54,"column_end":57},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":3184},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":278758,"byte_end":278761,"line_start":1039,"line_end":1039,"column_start":53,"column_end":56},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":3184},"to":{"krate":0,"index":1574}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":280427,"byte_end":280432,"line_start":1093,"line_end":1093,"column_start":30,"column_end":35},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":3300},"to":{"krate":0,"index":1748}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":281437,"byte_end":281441,"line_start":1126,"line_end":1126,"column_start":30,"column_end":34},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":3213},"to":{"krate":0,"index":1748}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":281551,"byte_end":281555,"line_start":1132,"line_end":1132,"column_start":30,"column_end":34},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":3242},"to":{"krate":0,"index":1748}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":283763,"byte_end":283767,"line_start":1190,"line_end":1190,"column_start":30,"column_end":34},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":3271},"to":{"krate":0,"index":1748}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":285973,"byte_end":285976,"line_start":1246,"line_end":1246,"column_start":30,"column_end":33},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":3155},"to":{"krate":0,"index":1748}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":286085,"byte_end":286088,"line_start":1252,"line_end":1252,"column_start":30,"column_end":33},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":3184},"to":{"krate":0,"index":1748}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":286307,"byte_end":286312,"line_start":1265,"line_end":1265,"column_start":31,"column_end":36},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":3300},"to":{"krate":0,"index":1768}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":286485,"byte_end":286489,"line_start":1274,"line_end":1274,"column_start":31,"column_end":35},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":3213},"to":{"krate":0,"index":1768}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":286677,"byte_end":286681,"line_start":1285,"line_end":1285,"column_start":31,"column_end":35},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":3242},"to":{"krate":0,"index":1768}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":286894,"byte_end":286898,"line_start":1296,"line_end":1296,"column_start":31,"column_end":35},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":3271},"to":{"krate":0,"index":1768}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":287111,"byte_end":287114,"line_start":1307,"line_end":1307,"column_start":31,"column_end":34},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":3155},"to":{"krate":0,"index":1768}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\color.rs","byte_start":287376,"byte_end":287379,"line_start":1321,"line_end":1321,"column_start":31,"column_end":34},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":3184},"to":{"krate":0,"index":1768}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":299093,"byte_end":299105,"line_start":137,"line_end":137,"column_start":6,"column_end":18},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":3380},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":330438,"byte_end":330450,"line_start":1040,"line_end":1040,"column_start":27,"column_end":39},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":3380},"to":{"krate":0,"index":2177}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\dynimage.rs","byte_start":330983,"byte_end":330995,"line_start":1062,"line_end":1062,"column_start":23,"column_end":35},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":3380},"to":{"krate":0,"index":2190}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":343567,"byte_end":343578,"line_start":68,"line_end":68,"column_start":6,"column_end":17},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":3425},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":350240,"byte_end":350257,"line_start":259,"line_end":259,"column_start":28,"column_end":45},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":3470},"to":{"krate":2,"index":2738}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":351652,"byte_end":351667,"line_start":298,"line_end":298,"column_start":6,"column_end":21},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":2119},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":360526,"byte_end":360534,"line_start":506,"line_end":506,"column_start":6,"column_end":14},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":3488},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":361040,"byte_end":361045,"line_start":526,"line_end":526,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":2837},"to":{"krate":0,"index":2145}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":364741,"byte_end":364753,"line_start":623,"line_end":623,"column_start":32,"column_end":44},"kind":"SuperTrait","from":{"krate":0,"index":2145},"to":{"krate":0,"index":2158}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":364760,"byte_end":364765,"line_start":623,"line_end":623,"column_start":51,"column_end":56},"kind":"SuperTrait","from":{"krate":2,"index":2837},"to":{"krate":0,"index":2158}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":367182,"byte_end":367188,"line_start":696,"line_end":696,"column_start":44,"column_end":50},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":3503},"to":{"krate":2,"index":7240}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":367656,"byte_end":367662,"line_start":718,"line_end":718,"column_start":27,"column_end":33},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":3503},"to":{"krate":2,"index":2457}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":370360,"byte_end":370376,"line_start":806,"line_end":806,"column_start":25,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":2177},"to":{"krate":0,"index":2190}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":376329,"byte_end":376337,"line_start":958,"line_end":958,"column_start":9,"column_end":17},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":2202},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":377555,"byte_end":377563,"line_start":1000,"line_end":1000,"column_start":30,"column_end":38},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":2202},"to":{"krate":0,"index":2177}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\image.rs","byte_start":378384,"byte_end":378392,"line_start":1032,"line_end":1032,"column_start":26,"column_end":34},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":2202},"to":{"krate":0,"index":2190}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":391894,"byte_end":391909,"line_start":12,"line_end":12,"column_start":35,"column_end":50},"kind":"SuperTrait","from":{"krate":0,"index":2352},"to":{"krate":0,"index":2272}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":392263,"byte_end":392267,"line_start":30,"line_end":30,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":2842},"to":{"krate":0,"index":2278}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":392270,"byte_end":392277,"line_start":30,"line_end":30,"column_start":29,"column_end":36},"kind":"SuperTrait","from":{"krate":14,"index":345},"to":{"krate":0,"index":2278}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":392280,"byte_end":392283,"line_start":30,"line_end":30,"column_start":39,"column_end":42},"kind":"SuperTrait","from":{"krate":14,"index":923},"to":{"krate":0,"index":2278}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":392286,"byte_end":392296,"line_start":30,"line_end":30,"column_start":45,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":2530},"to":{"krate":0,"index":2278}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":392305,"byte_end":392310,"line_start":30,"line_end":30,"column_start":64,"column_end":69},"kind":"SuperTrait","from":{"krate":2,"index":2457},"to":{"krate":0,"index":2278}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":392313,"byte_end":392320,"line_start":30,"line_end":30,"column_start":72,"column_end":79},"kind":"SuperTrait","from":{"krate":14,"index":230},"to":{"krate":0,"index":2278}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":392796,"byte_end":392801,"line_start":47,"line_end":47,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":2837},"to":{"krate":0,"index":2291}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":392804,"byte_end":392811,"line_start":47,"line_end":47,"column_start":32,"column_end":39},"kind":"SuperTrait","from":{"krate":14,"index":230},"to":{"krate":0,"index":2291}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":392814,"byte_end":392821,"line_start":47,"line_end":47,"column_start":42,"column_end":49},"kind":"SuperTrait","from":{"krate":14,"index":345},"to":{"krate":0,"index":2291}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":393370,"byte_end":393377,"line_start":71,"line_end":71,"column_start":17,"column_end":24},"kind":"SuperTrait","from":{"krate":14,"index":230},"to":{"krate":0,"index":2300}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":393380,"byte_end":393387,"line_start":71,"line_end":71,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":14,"index":345},"to":{"krate":0,"index":2300}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":394162,"byte_end":394166,"line_start":105,"line_end":105,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":2842},"to":{"krate":0,"index":2309}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.23.14\\./src\\traits.rs","byte_start":394169,"byte_end":394174,"line_start":105,"line_end":105,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2457},"to":{"krate":0,"index":2309}}]}