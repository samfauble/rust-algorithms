{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3","program":"C:\\Users\\samfa\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","conv","C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=2d83f93b0ffe4c46","-C","extra-filename=-2d83f93b0ffe4c46","--out-dir","c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps","--extern","custom_derive=c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps\\libcustom_derive-2fa5fb714058f6de.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\samfa\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\samfa\\Documents\\rustPractice\\algorithms\\target\\rls\\debug\\deps\\libconv-2d83f93b0ffe4c46.rmeta"},"prelude":{"crate_id":{"name":"conv","disambiguator":[251684435904151109,5445014293091629220]},"crate_root":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src","external_crates":[{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[3270634090130538391,14263718429753122316]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[5532051063976025760,2256364509988431667]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7281929168992546274,2424678954744988439]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[353429176083156877,8877241423562725442]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12196241746694410349,3365331946273478086]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[13433537899495627439,16859208643582984883]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8262757423788146228,17823423584984973278]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15770910386717746279,2673050061768012116]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[15973938195753786773,1947565178479551552]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1495831041033125177,733230368880816191]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[17679945988426249108,16004284943229030185]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[4674106540844190265,14311593861468432536]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[12112277384381649788,786361786206656603]}},{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","num":14,"id":{"name":"custom_derive","disambiguator":[2741206187499138967,14482466239573803689]}}],"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":0,"byte_end":23674,"line_start":1,"line_end":525,"column_start":1,"column_end":38}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":512},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12270,"byte_end":12277,"line_start":213,"line_end":213,"column_start":5,"column_end":12},"alias_span":null,"name":"NoError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":407},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12279,"byte_end":12291,"line_start":213,"line_end":213,"column_start":14,"column_end":26},"alias_span":null,"name":"GeneralError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":467},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12293,"byte_end":12309,"line_start":213,"line_end":213,"column_start":28,"column_end":44},"alias_span":null,"name":"GeneralErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":528},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12311,"byte_end":12326,"line_start":213,"line_end":213,"column_start":46,"column_end":61},"alias_span":null,"name":"Unrepresentable","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":529},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12311,"byte_end":12326,"line_start":213,"line_end":213,"column_start":46,"column_end":61},"alias_span":null,"name":"Unrepresentable","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":569},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12332,"byte_end":12343,"line_start":214,"line_end":214,"column_start":5,"column_end":16},"alias_span":null,"name":"NegOverflow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":570},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12332,"byte_end":12343,"line_start":214,"line_end":214,"column_start":5,"column_end":16},"alias_span":null,"name":"NegOverflow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":610},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12345,"byte_end":12356,"line_start":214,"line_end":214,"column_start":18,"column_end":29},"alias_span":null,"name":"PosOverflow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":611},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12345,"byte_end":12356,"line_start":214,"line_end":214,"column_start":18,"column_end":29},"alias_span":null,"name":"PosOverflow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":651},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12362,"byte_end":12372,"line_start":215,"line_end":215,"column_start":5,"column_end":15},"alias_span":null,"name":"FloatError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":708},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12374,"byte_end":12384,"line_start":215,"line_end":215,"column_start":17,"column_end":27},"alias_span":null,"name":"RangeError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":759},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12386,"byte_end":12400,"line_start":215,"line_end":215,"column_start":29,"column_end":43},"alias_span":null,"name":"RangeErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":160},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12406,"byte_end":12414,"line_start":216,"line_end":216,"column_start":5,"column_end":13},"alias_span":null,"name":"Saturate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":180},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12420,"byte_end":12428,"line_start":217,"line_end":217,"column_start":5,"column_end":13},"alias_span":null,"name":"UnwrapOk","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12430,"byte_end":12441,"line_start":217,"line_end":217,"column_start":15,"column_end":26},"alias_span":null,"name":"UnwrapOrInf","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12443,"byte_end":12458,"line_start":217,"line_end":217,"column_start":28,"column_end":43},"alias_span":null,"name":"UnwrapOrInvalid","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":192},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12460,"byte_end":12476,"line_start":217,"line_end":217,"column_start":45,"column_end":61},"alias_span":null,"name":"UnwrapOrSaturate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":317},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12842,"byte_end":12852,"line_start":229,"line_end":229,"column_start":9,"column_end":19},"alias_span":null,"name":"ApproxFrom","value":"","parent":{"krate":0,"index":52}},{"kind":"Use","ref_id":{"krate":0,"index":327},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12854,"byte_end":12864,"line_start":229,"line_end":229,"column_start":21,"column_end":31},"alias_span":null,"name":"ApproxInto","value":"","parent":{"krate":0,"index":52}},{"kind":"Use","ref_id":{"krate":0,"index":368},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12874,"byte_end":12883,"line_start":230,"line_end":230,"column_start":9,"column_end":18},"alias_span":null,"name":"ValueFrom","value":"","parent":{"krate":0,"index":52}},{"kind":"Use","ref_id":{"krate":0,"index":376},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12885,"byte_end":12894,"line_start":230,"line_end":230,"column_start":20,"column_end":29},"alias_span":null,"name":"ValueInto","value":"","parent":{"krate":0,"index":52}},{"kind":"Use","ref_id":{"krate":0,"index":407},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12904,"byte_end":12916,"line_start":231,"line_end":231,"column_start":9,"column_end":21},"alias_span":null,"name":"GeneralError","value":"","parent":{"krate":0,"index":52}},{"kind":"Use","ref_id":{"krate":0,"index":467},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12918,"byte_end":12934,"line_start":231,"line_end":231,"column_start":23,"column_end":39},"alias_span":null,"name":"GeneralErrorKind","value":"","parent":{"krate":0,"index":52}},{"kind":"Use","ref_id":{"krate":0,"index":160},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12944,"byte_end":12952,"line_start":232,"line_end":232,"column_start":9,"column_end":17},"alias_span":null,"name":"Saturate","value":"","parent":{"krate":0,"index":52}},{"kind":"Use","ref_id":{"krate":0,"index":180},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12962,"byte_end":12970,"line_start":233,"line_end":233,"column_start":9,"column_end":17},"alias_span":null,"name":"UnwrapOk","value":"","parent":{"krate":0,"index":52}},{"kind":"Use","ref_id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12972,"byte_end":12983,"line_start":233,"line_end":233,"column_start":19,"column_end":30},"alias_span":null,"name":"UnwrapOrInf","value":"","parent":{"krate":0,"index":52}},{"kind":"Use","ref_id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12985,"byte_end":13000,"line_start":233,"line_end":233,"column_start":32,"column_end":47},"alias_span":null,"name":"UnwrapOrInvalid","value":"","parent":{"krate":0,"index":52}},{"kind":"Use","ref_id":{"krate":0,"index":192},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":13002,"byte_end":13018,"line_start":233,"line_end":233,"column_start":49,"column_end":65},"alias_span":null,"name":"UnwrapOrSaturate","value":"","parent":{"krate":0,"index":52}},{"kind":"Use","ref_id":{"krate":0,"index":385},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":13028,"byte_end":13036,"line_start":234,"line_end":234,"column_start":9,"column_end":17},"alias_span":null,"name":"ConvUtil","value":"","parent":{"krate":0,"index":52}},{"kind":"Use","ref_id":{"krate":0,"index":399},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":13038,"byte_end":13048,"line_start":234,"line_end":234,"column_start":19,"column_end":29},"alias_span":null,"name":"ConvAsUtil","value":"","parent":{"krate":0,"index":52}},{"kind":"Use","ref_id":{"krate":0,"index":343},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":13058,"byte_end":13072,"line_start":235,"line_end":235,"column_start":9,"column_end":23},"alias_span":null,"name":"RoundToNearest","value":"","parent":{"krate":0,"index":52}},{"kind":"Use","ref_id":{"krate":0,"index":349},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":13074,"byte_end":13085,"line_start":235,"line_end":235,"column_start":25,"column_end":36},"alias_span":null,"name":"RoundToZero","value":"","parent":{"krate":0,"index":52}},{"kind":"Use","ref_id":{"krate":0,"index":341},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":13087,"byte_end":13095,"line_start":235,"line_end":235,"column_start":38,"column_end":46},"alias_span":null,"name":"Wrapping","value":"","parent":{"krate":0,"index":52}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":0,"byte_end":23674,"line_start":1,"line_end":525,"column_start":1,"column_end":38},"name":"","qualname":"::","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":104},{"krate":0,"index":212},{"krate":0,"index":221},{"krate":0,"index":317},{"krate":0,"index":322},{"krate":0,"index":327},{"krate":0,"index":332},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":355},{"krate":0,"index":359},{"krate":0,"index":363},{"krate":0,"index":368},{"krate":0,"index":372},{"krate":0,"index":376},{"krate":0,"index":380},{"krate":0,"index":385},{"krate":0,"index":397},{"krate":0,"index":399},{"krate":0,"index":404}],"decl_id":null,"docs":"This crate provides a number of conversion traits with more specific semantics than those provided by `as` or `From`/`Into`.","sig":null,"attributes":[{"value":"*\nThis crate provides a number of conversion traits with more specific semantics than those provided by `as` or `From`/`Into`.\n\nThe goal with the traits provided here is to be more specific about what generic code can rely on, as well as provide reasonably self-describing alternatives to the standard `From`/`Into` traits.  For example, the although `T: From<U>` might be satisfied, it imposes no restrictions on the *kind* of conversion being implemented.  As such, the traits in this crate try to be very specific about what conversions are allowed.  This makes them less generally applicable, but more useful where they *do* apply.\n\nIn addition, `From`/`Into` requires all conversions to succeed or panic.  All conversion traits in this crate define an associated error type, allowing code to react to failed conversions as appropriate.\n\n<style type=\"text/css\">\n.link-block { font-family: \"Fira Sans\"; }\n.link-block > p { display: inline-block; }\n.link-block > p > strong { font-weight: 500; margin-right: 1em; }\n.link-block > ul { display: inline-block; padding: 0; list-style: none; }\n.link-block > ul > li {\n  font-size: 0.8em;\n  background-color: #eee;\n  border: 1px solid #ccc;\n  padding: 0.3em;\n  display: inline-block;\n}\n</style>\n<span></span><div class=\"link-block\">\n\n**Links**\n\n* [Latest Release](https://crates.io/crates/scan-rules/)\n* [Latest Docs](https://danielkeep.github.io/rust-scan-rules/doc/scan_rules/index.html)\n* [Repository](https://github.com/DanielKeep/rust-scan-rules)\n\n<span></span></div>\n\n## Compatibility\n\n`conv` is compatible with Rust 1.2 and higher.\n\n## Change Log\n\n### v0.3.2\n\n- Added integer ↔ `char` conversions.\n- Added missing `isize`/`usize` → `f32`/`f64` conversions.\n- Fixed the error type of `i64` → `usize` for 64-bit targets.\n\n### v0.3.1\n\n- Change to `unwrap_ok` for better codegen (thanks bluss).\n- Fix for Rust breaking change (code in question was dodgy anyway; thanks m4rw3r).\n\n### v0.3.0\n\n- Added an `Error` constraint to all `Err` associated types.  This will break any user-defined conversions where the `Err` type does not implement `Error`.\n- Renamed the `Overflow` and `Underflow` errors to `PosOverflow` and `NegOverflow` respectively.  In the context of floating point conversions, \"underflow\" usually means the value was too close to zero to correctly represent.\n\n### v0.2.1\n\n- Added `ConvUtil::into_as<Dst>` as a shortcut for `Into::<Dst>::into`.\n- Added `#[inline]` attributes.\n- Added `Saturate::saturate`, which can saturate `Result`s arising from over/underflow.\n\n### v0.2.0\n\n- Changed all error types to include the original input as payload.  This breaks pretty much *everything*.  Sorry about that.  On the bright side, there's now no downside to using the conversion traits for non-`Copy` types.\n- Added the normal rounding modes for float → int approximations: `RoundToNearest`, `RoundToNegInf`, `RoundToPosInf`, and `RoundToZero`.\n- `ApproxWith` is now subsumed by a pair of extension traits (`ConvUtil` and `ConvAsUtil`), that also have shortcuts for `TryInto` and `ValueInto` so that you can specify the destination type on the method.\n\n# Overview\n\nThe following traits are used to define various conversion semantics:\n\n- [`ApproxFrom`](./trait.ApproxFrom.html)/[`ApproxInto`](./trait.ApproxInto.html) - approximate conversions, with selectable approximation scheme (see [`ApproxScheme`](./trait.ApproxScheme.html)).\n- [`TryFrom`](./trait.TryFrom.html)/[`TryInto`](./trait.TryInto.html) - general, potentially failing value conversions.\n- [`ValueFrom`](./trait.ValueFrom.html)/[`ValueInto`](./trait.ValueInto.html) - exact, value-preserving conversions.\n\nWhen *defining* a conversion, try to implement the `*From` trait variant where possible.  When *using* a conversion, try to depend on the `*Into` trait variant where possible.  This is because the `*Into` traits automatically use `*From` implementations, but not the reverse.  Implementing `*From` and using `*Into` ensures conversions work in as many contexts as possible.\n\nThese extension methods are provided to help with some common cases:\n\n- [`ConvUtil::approx_as<Dst>`](./trait.ConvUtil.html#method.approx_as) - approximates to `Dst` with the `DefaultApprox` scheme.\n- [`ConvUtil::approx_as_by<Dst, S>`](./trait.ConvUtil.html#method.approx_as_by) - approximates to `Dst` with the scheme `S`.\n- [`ConvUtil::into_as<Dst>`](./trait.ConvUtil.html#method.into_as) - converts to `Dst` using `Into::into`.\n- [`ConvUtil::try_as<Dst>`](./trait.ConvUtil.html#method.try_as) - converts to `Dst` using `TryInto::try_into`.\n- [`ConvUtil::value_as<Dst>`](./trait.ConvUtil.html#method.value_as) - converts to `Dst` using `ValueInto::value_into`.\n- [`ConvAsUtil::approx`](./trait.ConvAsUtil.html#method.approx) - approximates to an inferred destination type with the `DefaultApprox` scheme.\n- [`ConvAsUtil::approx_by<S>`](./trait.ConvAsUtil.html#method.approx_by) - approximates to an inferred destination type with the scheme `S`.\n- [`Saturate::saturate`](./errors/trait.Saturate.html#tymethod.saturate) - saturates on overflow.\n- [`UnwrapOk::unwrap_ok`](./errors/trait.UnwrapOk.html#tymethod.unwrap_ok) - unwraps results from conversions that cannot fail.\n- [`UnwrapOrInf::unwrap_or_inf`](./errors/trait.UnwrapOrInf.html#tymethod.unwrap_or_inf) - saturates to ±∞ on failure.\n- [`UnwrapOrInvalid::unwrap_or_invalid`](./errors/trait.UnwrapOrInvalid.html#tymethod.unwrap_or_invalid) - substitutes the target type's \"invalid\" sentinel value on failure.\n- [`UnwrapOrSaturate::unwrap_or_saturate`](./errors/trait.UnwrapOrSaturate.html#tymethod.unwrap_or_saturate) - saturates to the maximum or minimum value of the target type on failure.\n\nA macro is provided to assist in implementing conversions:\n\n- [`TryFrom!`](./macros/index.html#tryfrom!) - derives an implementation of [`TryFrom`](./trait.TryFrom.html).\n\nIf you are implementing your own types, you may also be interested in the traits contained in the [`misc`](./misc/index.html) module.\n\n## Provided Implementations\n\nThe crate provides several blanket implementations:\n\n- `*From<A> for A` (all types can be converted from and into themselves).\n- `*Into<Dst> for Src where Dst: *From<Src>` (`*From` implementations imply a matching `*Into` implementation).\n\nConversions for the builtin numeric (integer and floating point) types are provided.  In general, `ValueFrom` conversions exist for all pairs except for float → integer (since such a conversion is generally unlikely to *exactly* succeed) and `f64 → f32` (for the same reason).  `ApproxFrom` conversions with the `DefaultApprox` scheme exist between all pairs.  `ApproxFrom` with the `Wrapping` scheme exist between integers.\n\n## Errors\n\nA number of error types are defined in the [`errors`](./errors/index.html) module.  Generally, conversions use whichever error type most *narrowly* defines the kinds of failures that can occur.  For example:\n\n- `ValueFrom<u8> for u16` cannot possibly fail, and as such it uses `NoError`.\n- `ValueFrom<i8> for u16` can *only* fail with a negative overflow, thus it uses the `NegOverflow` type.\n- `ValueFrom<i32> for u16` can overflow in either direction, hence it uses `RangeError`.\n- Finally, `ApproxFrom<f32> for u16` can overflow (positive or negative), or attempt to convert NaN; `FloatError` covers those three cases.\n\nBecause there are *numerous* error types, the `GeneralError` enum is provided.  `From<E, T> for GeneralError<T>` exists for each error type `E<T>` defined by this crate (even for `NoError`!), allowing errors to be translated automatically by `try!`.  In fact, all errors can be \"expanded\" to *all* more general forms (*e.g.* `NoError` → `NegOverflow`, `PosOverflow` → `RangeError` → `FloatError`).\n\nAside from `NoError`, the various error types wrap the input value that you attempted to convert.  This is so that non-`Copy` types do not need to be pre-emptively cloned prior to conversion, just in case the conversion fails.  A downside is that this means there are many, *many* incompatible error types.\n\nTo help alleviate this, there is also `GeneralErrorKind`, which is simply `GeneralError<T>` without the payload, and all errors can be converted into it directly.\n\nThe reason for not just using `GeneralErrorKind` in the first place is to statically reduce the number of potential error cases you need to deal with.  It also allows the `Unwrap*` extension traits to be defined *without* the possibility for runtime failure (*e.g.* you cannot use `unwrap_or_saturate` with a `FloatError`, because what do you do if the error is `NotANumber`; saturate to max or to min?  Or panic?).\n\n# Examples\n\n```\n# extern crate conv;\n# use conv::*;\n# fn main() {\n// This *cannot* fail, so we can use `unwrap_ok` to discard the `Result`.\nassert_eq!(u8::value_from(0u8).unwrap_ok(), 0u8);\n\n// This *can* fail.  Specifically, it can overflow toward negative infinity.\nassert_eq!(u8::value_from(0i8),     Ok(0u8));\nassert_eq!(u8::value_from(-1i8),    Err(NegOverflow(-1)));\n\n// This can overflow in *either* direction; hence the change to `RangeError`.\nassert_eq!(u8::value_from(-1i16),   Err(RangeError::NegOverflow(-1)));\nassert_eq!(u8::value_from(0i16),    Ok(0u8));\nassert_eq!(u8::value_from(256i16),  Err(RangeError::PosOverflow(256)));\n\n// We can use the extension traits to simplify this a little.\nassert_eq!(u8::value_from(-1i16).unwrap_or_saturate(),  0u8);\nassert_eq!(u8::value_from(0i16).unwrap_or_saturate(),   0u8);\nassert_eq!(u8::value_from(256i16).unwrap_or_saturate(), 255u8);\n\n// Obviously, all integers can be \"approximated\" using the default scheme (it\n// doesn't *do* anything), but they can *also* be approximated with the\n// `Wrapping` scheme.\nassert_eq!(\n    <u8 as ApproxFrom<_, DefaultApprox>>::approx_from(400u16),\n    Err(PosOverflow(400)));\nassert_eq!(\n    <u8 as ApproxFrom<_, Wrapping>>::approx_from(400u16),\n    Ok(144u8));\n\n// This is rather inconvenient; as such, there are a number of convenience\n// extension methods available via `ConvUtil` and `ConvAsUtil`.\nassert_eq!(400u16.approx(),                       Err::<u8, _>(PosOverflow(400)));\nassert_eq!(400u16.approx_by::<Wrapping>(),        Ok::<u8, _>(144u8));\nassert_eq!(400u16.approx_as::<u8>(),              Err(PosOverflow(400)));\nassert_eq!(400u16.approx_as_by::<u8, Wrapping>(), Ok(144));\n\n// Integer -> float conversions *can* fail due to limited precision.\n// Once the continuous range of exactly representable integers is exceeded, the\n// provided implementations fail with overflow errors.\nassert_eq!(f32::value_from(16_777_216i32), Ok(16_777_216.0f32));\nassert_eq!(f32::value_from(16_777_217i32), Err(RangeError::PosOverflow(16_777_217)));\n\n// Float -> integer conversions have to be done using approximations.  Although\n// exact conversions are *possible*, \"advertising\" this with an implementation\n// is misleading.\n//\n// Note that `DefaultApprox` for float -> integer uses whatever rounding\n// mode is currently active (*i.e.* whatever `as` would do).\nassert_eq!(41.0f32.approx(), Ok(41u8));\nassert_eq!(41.3f32.approx(), Ok(41u8));\nassert_eq!(41.5f32.approx(), Ok(41u8));\nassert_eq!(41.8f32.approx(), Ok(41u8));\nassert_eq!(42.0f32.approx(), Ok(42u8));\n\nassert_eq!(255.0f32.approx(), Ok(255u8));\nassert_eq!(256.0f32.approx(), Err::<u8, _>(FloatError::PosOverflow(256.0)));\n\n// Sometimes, it can be useful to saturate the conversion from float to\n// integer directly, then account for NaN as input separately.  The `Saturate`\n// extension trait exists for this reason.\nassert_eq!((-23.0f32).approx_as::<u8>().saturate(), Ok(0));\nassert_eq!(302.0f32.approx_as::<u8>().saturate(), Ok(255u8));\nassert!(std::f32::NAN.approx_as::<u8>().saturate().is_err());\n\n// If you really don't care about the specific kind of error, you can just rely\n// on automatic conversion to `GeneralErrorKind`.\nfn too_many_errors() -> Result<(), GeneralErrorKind> {\n    assert_eq!({let r: u8 = try!(0u8.value_into()); r},  0u8);\n    assert_eq!({let r: u8 = try!(0i8.value_into()); r},  0u8);\n    assert_eq!({let r: u8 = try!(0i16.value_into()); r}, 0u8);\n    assert_eq!({let r: u8 = try!(0.0f32.approx()); r},   0u8);\n    Ok(())\n}\n# let _ = too_many_errors();\n# }\n```\n\n*/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":0,"byte_end":12143,"line_start":1,"line_end":203,"column_start":1,"column_end":3}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12145,"byte_end":12167,"line_start":205,"line_end":205,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\macros.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"macros","qualname":"::macros","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\macros.rs","parent":null,"children":[],"decl_id":null,"docs":"This module provides convenience macros to help with implementing the conversion traits.","sig":null,"attributes":[{"value":"*\nThis module provides convenience macros to help with implementing the conversion traits.\n\n# `TryFrom!`\n\n```ignore\nmacro_rules! TryFrom {\n    (($target:ty) $enum:item) => { ... };\n}\n```\n\nThis macro attempts to derive an implementation of the [`TryFrom`](../trait.TryFrom.html) trait.  Specifically, it supports `enum`s consisting entirely of unitary variants, with or without explicit values.  The source type can be any integer type which the variants of the enumeration can be explicitly cast to (*i.e.* using `as`).\n\nIf a conversion fails (due to there being no matching variant for the specified integer value `src`), then the conversion returns `Err(Unrepresentable(src))` (see [`Unrepresentable`](../errors/struct.Unrepresentable.html)).\n\nIt is compatible with the [`custom_derive!`](https://crates.io/crates/custom_derive) macro.\n\n## Example\n\nUsing `custom_derive!`:\n\n```\n#[macro_use] extern crate conv;\n#[macro_use] extern crate custom_derive;\n\ncustom_derive! {\n    #[derive(Debug, PartialEq, TryFrom(i32))]\n    enum Colours {\n        Red = 0,\n        Green = 5,\n        Blue\n    }\n}\n\nfn main() {\n    use conv::{TryFrom, Unrepresentable};\n\n    assert_eq!(Colours::try_from(0), Ok(Colours::Red));\n    assert_eq!(Colours::try_from(1), Err(Unrepresentable(1)));\n    assert_eq!(Colours::try_from(5), Ok(Colours::Green));\n    assert_eq!(Colours::try_from(6), Ok(Colours::Blue));\n    assert_eq!(Colours::try_from(7), Err(Unrepresentable(7)));\n}\n```\n\nThe above is equivalent to the following:\n\n```\n#[macro_use] extern crate conv;\n\n#[derive(Debug, PartialEq)]\nenum Colours {\n    Red = 0,\n    Green = 5,\n    Blue\n}\n\nTryFrom! { (i32) enum Colours {\n    Red = 0,\n    Green = 5,\n    Blue\n} }\n# fn main() {}\n```\n*/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\macros.rs","byte_start":24201,"byte_end":25913,"line_start":1,"line_end":65,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":52},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12803,"byte_end":12810,"line_start":227,"line_end":227,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":57},{"krate":0,"index":60},{"krate":0,"index":63},{"krate":0,"index":66},{"krate":0,"index":69},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":87},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":96},{"krate":0,"index":99}],"decl_id":null,"docs":"Publicly re-exports the most generally useful set of items.","sig":null,"attributes":[{"value":"*\nPublicly re-exports the most generally useful set of items.\n\nUsage of the prelude should be considered **unstable**.  Although items will likely *not* be removed without bumping the major version, new items *may* be added, which could potentially cause name conflicts in user code.\n*/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12506,"byte_end":12794,"line_start":222,"line_end":226,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"errors","qualname":"::errors","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":108},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":125},{"krate":0,"index":128},{"krate":0,"index":407},{"krate":0,"index":418},{"krate":0,"index":420},{"krate":0,"index":423},{"krate":0,"index":425},{"krate":0,"index":428},{"krate":0,"index":430},{"krate":0,"index":434},{"krate":0,"index":437},{"krate":0,"index":440},{"krate":0,"index":443},{"krate":0,"index":446},{"krate":0,"index":449},{"krate":0,"index":452},{"krate":0,"index":455},{"krate":0,"index":458},{"krate":0,"index":461},{"krate":0,"index":464},{"krate":0,"index":138},{"krate":0,"index":467},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":483},{"krate":0,"index":485},{"krate":0,"index":487},{"krate":0,"index":489},{"krate":0,"index":491},{"krate":0,"index":493},{"krate":0,"index":495},{"krate":0,"index":498},{"krate":0,"index":501},{"krate":0,"index":504},{"krate":0,"index":506},{"krate":0,"index":509},{"krate":0,"index":147},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":522},{"krate":0,"index":524},{"krate":0,"index":526},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":528},{"krate":0,"index":532},{"krate":0,"index":534},{"krate":0,"index":537},{"krate":0,"index":539},{"krate":0,"index":542},{"krate":0,"index":544},{"krate":0,"index":548},{"krate":0,"index":551},{"krate":0,"index":554},{"krate":0,"index":557},{"krate":0,"index":560},{"krate":0,"index":563},{"krate":0,"index":566},{"krate":0,"index":569},{"krate":0,"index":573},{"krate":0,"index":575},{"krate":0,"index":578},{"krate":0,"index":580},{"krate":0,"index":583},{"krate":0,"index":585},{"krate":0,"index":589},{"krate":0,"index":592},{"krate":0,"index":595},{"krate":0,"index":598},{"krate":0,"index":601},{"krate":0,"index":604},{"krate":0,"index":607},{"krate":0,"index":610},{"krate":0,"index":614},{"krate":0,"index":616},{"krate":0,"index":619},{"krate":0,"index":621},{"krate":0,"index":624},{"krate":0,"index":626},{"krate":0,"index":630},{"krate":0,"index":633},{"krate":0,"index":636},{"krate":0,"index":639},{"krate":0,"index":642},{"krate":0,"index":645},{"krate":0,"index":648},{"krate":0,"index":651},{"krate":0,"index":662},{"krate":0,"index":664},{"krate":0,"index":667},{"krate":0,"index":669},{"krate":0,"index":672},{"krate":0,"index":674},{"krate":0,"index":678},{"krate":0,"index":681},{"krate":0,"index":684},{"krate":0,"index":687},{"krate":0,"index":690},{"krate":0,"index":693},{"krate":0,"index":696},{"krate":0,"index":699},{"krate":0,"index":702},{"krate":0,"index":705},{"krate":0,"index":708},{"krate":0,"index":716},{"krate":0,"index":718},{"krate":0,"index":721},{"krate":0,"index":723},{"krate":0,"index":726},{"krate":0,"index":728},{"krate":0,"index":732},{"krate":0,"index":735},{"krate":0,"index":738},{"krate":0,"index":741},{"krate":0,"index":744},{"krate":0,"index":747},{"krate":0,"index":750},{"krate":0,"index":753},{"krate":0,"index":756},{"krate":0,"index":759},{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":770},{"krate":0,"index":771},{"krate":0,"index":773},{"krate":0,"index":775},{"krate":0,"index":777},{"krate":0,"index":779},{"krate":0,"index":781},{"krate":0,"index":783},{"krate":0,"index":785},{"krate":0,"index":788},{"krate":0,"index":791},{"krate":0,"index":160},{"krate":0,"index":163},{"krate":0,"index":169},{"krate":0,"index":175},{"krate":0,"index":180},{"krate":0,"index":183},{"krate":0,"index":186},{"krate":0,"index":189},{"krate":0,"index":192},{"krate":0,"index":195},{"krate":0,"index":201},{"krate":0,"index":206}],"decl_id":null,"docs":"This module defines the various error types that can be produced by a failed conversion.","sig":null,"attributes":[{"value":"*\nThis module defines the various error types that can be produced by a failed conversion.\n\nIn addition, it also defines some extension traits to make working with failable conversions more ergonomic (see the `Unwrap*` traits).\n*/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":28175,"byte_end":28407,"line_start":1,"line_end":5,"column_start":1,"column_end":3}}]},{"kind":"TupleVariant","id":{"krate":0,"index":409},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":34887,"byte_end":34898,"line_start":248,"line_end":248,"column_start":9,"column_end":20},"name":"NegOverflow","qualname":"::errors::GeneralError::NegOverflow","value":"GeneralError::NegOverflow(T)","parent":{"krate":0,"index":407},"children":[],"decl_id":null,"docs":" Input was too negative for the target type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":412},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":34968,"byte_end":34979,"line_start":251,"line_end":251,"column_start":9,"column_end":20},"name":"PosOverflow","qualname":"::errors::GeneralError::PosOverflow","value":"GeneralError::PosOverflow(T)","parent":{"krate":0,"index":407},"children":[],"decl_id":null,"docs":" Input was too positive for the target type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":415},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":35053,"byte_end":35068,"line_start":254,"line_end":254,"column_start":9,"column_end":24},"name":"Unrepresentable","qualname":"::errors::GeneralError::Unrepresentable","value":"GeneralError::Unrepresentable(T)","parent":{"krate":0,"index":407},"children":[],"decl_id":null,"docs":" Input was not representable in the target type.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":407},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":34805,"byte_end":34817,"line_start":246,"line_end":246,"column_start":14,"column_end":26},"name":"GeneralError","qualname":"::errors::GeneralError","value":"pub enum GeneralError<T> {\n    NegOverflow(T),\n    PosOverflow(T),\n    Unrepresentable(T),\n}","parent":null,"children":[{"krate":0,"index":409},{"krate":0,"index":412},{"krate":0,"index":415}],"decl_id":null,"docs":"    A general error enumeration that subsumes all other conversion errors.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":468},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":36527,"byte_end":36538,"line_start":294,"line_end":294,"column_start":9,"column_end":20},"name":"NegOverflow","qualname":"::errors::GeneralErrorKind::NegOverflow","value":"GeneralErrorKind::NegOverflow","parent":{"krate":0,"index":467},"children":[],"decl_id":null,"docs":" Input was too negative for the target type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":470},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":36605,"byte_end":36616,"line_start":297,"line_end":297,"column_start":9,"column_end":20},"name":"PosOverflow","qualname":"::errors::GeneralErrorKind::PosOverflow","value":"GeneralErrorKind::PosOverflow","parent":{"krate":0,"index":467},"children":[],"decl_id":null,"docs":" Input was too positive for the target type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":472},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":36687,"byte_end":36702,"line_start":300,"line_end":300,"column_start":9,"column_end":24},"name":"Unrepresentable","qualname":"::errors::GeneralErrorKind::Unrepresentable","value":"GeneralErrorKind::Unrepresentable","parent":{"krate":0,"index":467},"children":[],"decl_id":null,"docs":" Input was not representable in the target type.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":467},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":36444,"byte_end":36460,"line_start":292,"line_end":292,"column_start":14,"column_end":30},"name":"GeneralErrorKind","qualname":"::errors::GeneralErrorKind","value":"pub enum GeneralErrorKind { NegOverflow, PosOverflow, Unrepresentable, }","parent":null,"children":[{"krate":0,"index":468},{"krate":0,"index":470},{"krate":0,"index":472}],"decl_id":null,"docs":"    A general error enumeration that subsumes all other conversion errors, but discards all input payloads the errors may be carrying.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":512},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":37483,"byte_end":37490,"line_start":323,"line_end":323,"column_start":10,"column_end":17},"name":"NoError","qualname":"::errors::NoError","value":"pub enum NoError { }","parent":null,"children":[],"decl_id":null,"docs":"Indicates that it is not possible for the conversion to fail.","sig":null,"attributes":[{"value":"*\nIndicates that it is not possible for the conversion to fail.\n\nYou can use the [`UnwrapOk::unwrap_ok`](./trait.UnwrapOk.html#tymethod.unwrap_ok) method to discard the (statically impossible) `Err` case from a `Result<_, NoError>`, without using `Result::unwrap` (which is typically viewed as a \"code smell\").\n*/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":37096,"byte_end":37411,"line_start":317,"line_end":321,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":528},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":38009,"byte_end":38024,"line_start":344,"line_end":344,"column_start":16,"column_end":31},"name":"Unrepresentable","qualname":"::errors::Unrepresentable","value":"","parent":null,"children":[],"decl_id":null,"docs":" Indicates that the conversion failed because the value was not representable.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":531},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":38028,"byte_end":38033,"line_start":344,"line_end":344,"column_start":35,"column_end":40},"name":"0","qualname":"::errors::Unrepresentable::0","value":"T","parent":{"krate":0,"index":528},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":569},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":38319,"byte_end":38330,"line_start":354,"line_end":354,"column_start":16,"column_end":27},"name":"NegOverflow","qualname":"::errors::NegOverflow","value":"","parent":null,"children":[],"decl_id":null,"docs":" Indicates that the conversion failed due to a negative overflow.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":572},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":38334,"byte_end":38339,"line_start":354,"line_end":354,"column_start":31,"column_end":36},"name":"0","qualname":"::errors::NegOverflow::0","value":"T","parent":{"krate":0,"index":569},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":610},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":38625,"byte_end":38636,"line_start":364,"line_end":364,"column_start":16,"column_end":27},"name":"PosOverflow","qualname":"::errors::PosOverflow","value":"","parent":null,"children":[],"decl_id":null,"docs":" Indicates that the conversion failed due to a positive overflow.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":613},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":38640,"byte_end":38645,"line_start":364,"line_end":364,"column_start":31,"column_end":36},"name":"0","qualname":"::errors::PosOverflow::0","value":"T","parent":{"krate":0,"index":610},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":653},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":39327,"byte_end":39338,"line_start":385,"line_end":385,"column_start":9,"column_end":20},"name":"NegOverflow","qualname":"::errors::FloatError::NegOverflow","value":"FloatError::NegOverflow(T)","parent":{"krate":0,"index":651},"children":[],"decl_id":null,"docs":" Input was too negative for the target type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":656},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":39408,"byte_end":39419,"line_start":388,"line_end":388,"column_start":9,"column_end":20},"name":"PosOverflow","qualname":"::errors::FloatError::PosOverflow","value":"FloatError::PosOverflow(T)","parent":{"krate":0,"index":651},"children":[],"decl_id":null,"docs":" Input was too positive for the target type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":659},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":39512,"byte_end":39522,"line_start":391,"line_end":391,"column_start":9,"column_end":19},"name":"NotANumber","qualname":"::errors::FloatError::NotANumber","value":"FloatError::NotANumber(T)","parent":{"krate":0,"index":651},"children":[],"decl_id":null,"docs":" Input was not-a-number, which the target type could not represent.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":651},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":39247,"byte_end":39257,"line_start":383,"line_end":383,"column_start":14,"column_end":24},"name":"FloatError","qualname":"::errors::FloatError","value":"pub enum FloatError<T> { NegOverflow(T), PosOverflow(T), NotANumber(T), }","parent":null,"children":[{"krate":0,"index":653},{"krate":0,"index":656},{"krate":0,"index":659}],"decl_id":null,"docs":"    Indicates that a conversion from a floating point type failed.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":710},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":40072,"byte_end":40083,"line_start":411,"line_end":411,"column_start":9,"column_end":20},"name":"NegOverflow","qualname":"::errors::RangeError::NegOverflow","value":"RangeError::NegOverflow(T)","parent":{"krate":0,"index":708},"children":[],"decl_id":null,"docs":" Input was too negative for the target type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":713},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":40149,"byte_end":40160,"line_start":414,"line_end":414,"column_start":9,"column_end":20},"name":"PosOverflow","qualname":"::errors::RangeError::PosOverflow","value":"RangeError::PosOverflow(T)","parent":{"krate":0,"index":708},"children":[],"decl_id":null,"docs":" Input was too positive the target type.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":708},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":39992,"byte_end":40002,"line_start":409,"line_end":409,"column_start":14,"column_end":24},"name":"RangeError","qualname":"::errors::RangeError","value":"pub enum RangeError<T> { NegOverflow(T), PosOverflow(T), }","parent":null,"children":[{"krate":0,"index":710},{"krate":0,"index":713}],"decl_id":null,"docs":"    Indicates that a conversion failed due to a range error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":760},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":40997,"byte_end":41008,"line_start":437,"line_end":437,"column_start":9,"column_end":20},"name":"NegOverflow","qualname":"::errors::RangeErrorKind::NegOverflow","value":"RangeErrorKind::NegOverflow","parent":{"krate":0,"index":759},"children":[],"decl_id":null,"docs":" Input was too negative for the target type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":762},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":41075,"byte_end":41086,"line_start":440,"line_end":440,"column_start":9,"column_end":20},"name":"PosOverflow","qualname":"::errors::RangeErrorKind::PosOverflow","value":"RangeErrorKind::PosOverflow","parent":{"krate":0,"index":759},"children":[],"decl_id":null,"docs":" Input was too positive for the target type.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":759},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":40916,"byte_end":40930,"line_start":435,"line_end":435,"column_start":14,"column_end":28},"name":"RangeErrorKind","qualname":"::errors::RangeErrorKind","value":"pub enum RangeErrorKind { NegOverflow, PosOverflow, }","parent":null,"children":[{"krate":0,"index":760},{"krate":0,"index":762}],"decl_id":null,"docs":"    Indicates that a conversion failed due to a range error.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":160},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":41136,"byte_end":41144,"line_start":447,"line_end":447,"column_start":11,"column_end":19},"name":"Saturate","qualname":"::errors::Saturate","value":"Saturate","parent":null,"children":[{"krate":0,"index":161},{"krate":0,"index":162}],"decl_id":null,"docs":"Saturates a `Result`.\n","sig":null,"attributes":[{"value":"*\nSaturates a `Result`.\n*/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":41097,"byte_end":41125,"line_start":444,"line_end":446,"column_start":1,"column_end":3}}]},{"kind":"Type","id":{"krate":0,"index":161},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":41190,"byte_end":41196,"line_start":449,"line_end":449,"column_start":10,"column_end":16},"name":"Output","qualname":"::errors::Saturate::Output","value":"type Output;","parent":{"krate":0,"index":160},"children":[],"decl_id":null,"docs":" The result of saturating.\n","sig":null,"attributes":[{"value":"/ The result of saturating.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":41151,"byte_end":41180,"line_start":448,"line_end":448,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":41790,"byte_end":41798,"line_start":458,"line_end":458,"column_start":8,"column_end":16},"name":"saturate","qualname":"::errors::Saturate::saturate","value":"pub fn saturate(Self) -> Self::Output","parent":{"krate":0,"index":160},"children":[],"decl_id":null,"docs":"    Replaces an overflow error with a saturated value.","sig":null,"attributes":[{"value":"*\n    Replaces an overflow error with a saturated value.\n\n    Unlike `unwrap_or_saturate`, this method can be used in cases where the `Result` error type can encode failures *other* than overflow and underflow.  For example, you cannot saturate a float-to-integer conversion using `unwrap_or_saturate` as the error might be `NotANumber`, which doesn't have a meaningful saturation \"direction\".\n\n    The output of this method will be a `Result` where the error type *does not* contain overflow conditions.  What conditions remain must still be dealt with in some fashion.\n    */","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":41203,"byte_end":41782,"line_start":451,"line_end":457,"column_start":5,"column_end":7}}]},{"kind":"Trait","id":{"krate":0,"index":180},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":43106,"byte_end":43114,"line_start":510,"line_end":510,"column_start":11,"column_end":19},"name":"UnwrapOk","qualname":"::errors::UnwrapOk","value":"UnwrapOk<T>","parent":null,"children":[{"krate":0,"index":182}],"decl_id":null,"docs":"Safely unwrap a `Result` that cannot contain an error.\n","sig":null,"attributes":[{"value":"*\nSafely unwrap a `Result` that cannot contain an error.\n*/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":43034,"byte_end":43095,"line_start":507,"line_end":509,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":43295,"byte_end":43304,"line_start":516,"line_end":516,"column_start":8,"column_end":17},"name":"unwrap_ok","qualname":"::errors::UnwrapOk::unwrap_ok","value":"pub fn unwrap_ok(Self) -> T","parent":{"krate":0,"index":180},"children":[],"decl_id":null,"docs":"    Unwraps a `Result` without possibility of failing.","sig":null,"attributes":[{"value":"*\n    Unwraps a `Result` without possibility of failing.\n\n    Technically, this is not necessary; it's provided simply to make user code a little clearer.\n    */","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":43124,"byte_end":43287,"line_start":511,"line_end":515,"column_start":5,"column_end":7}}]},{"kind":"Trait","id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":43585,"byte_end":43596,"line_start":532,"line_end":532,"column_start":11,"column_end":22},"name":"UnwrapOrInf","qualname":"::errors::UnwrapOrInf","value":"UnwrapOrInf","parent":null,"children":[{"krate":0,"index":187},{"krate":0,"index":188}],"decl_id":null,"docs":"Unwrap a conversion by saturating to infinity.\n","sig":null,"attributes":[{"value":"*\nUnwrap a conversion by saturating to infinity.\n*/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":43521,"byte_end":43574,"line_start":529,"line_end":531,"column_start":1,"column_end":3}}]},{"kind":"Type","id":{"krate":0,"index":187},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":43642,"byte_end":43648,"line_start":534,"line_end":534,"column_start":10,"column_end":16},"name":"Output","qualname":"::errors::UnwrapOrInf::Output","value":"type Output;","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" The result of unwrapping.\n","sig":null,"attributes":[{"value":"/ The result of unwrapping.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":43603,"byte_end":43632,"line_start":533,"line_end":533,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":43783,"byte_end":43796,"line_start":539,"line_end":539,"column_start":8,"column_end":21},"name":"unwrap_or_inf","qualname":"::errors::UnwrapOrInf::unwrap_or_inf","value":"pub fn unwrap_or_inf(Self) -> Self::Output","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":"    Either unwraps the successfully converted value, or saturates to infinity in the \"direction\" of overflow.\n","sig":null,"attributes":[{"value":"*\n    Either unwraps the successfully converted value, or saturates to infinity in the \"direction\" of overflow.\n    */","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":43655,"byte_end":43775,"line_start":536,"line_end":538,"column_start":5,"column_end":7}}]},{"kind":"Trait","id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":43915,"byte_end":43930,"line_start":545,"line_end":545,"column_start":11,"column_end":26},"name":"UnwrapOrInvalid","qualname":"::errors::UnwrapOrInvalid","value":"UnwrapOrInvalid","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":191}],"decl_id":null,"docs":"Unwrap a conversion by replacing a failure with an invalid sentinel value.\n","sig":null,"attributes":[{"value":"*\nUnwrap a conversion by replacing a failure with an invalid sentinel value.\n*/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":43823,"byte_end":43904,"line_start":542,"line_end":544,"column_start":1,"column_end":3}}]},{"kind":"Type","id":{"krate":0,"index":190},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":43976,"byte_end":43982,"line_start":547,"line_end":547,"column_start":10,"column_end":16},"name":"Output","qualname":"::errors::UnwrapOrInvalid::Output","value":"type Output;","parent":{"krate":0,"index":189},"children":[],"decl_id":null,"docs":" The result of unwrapping.\n","sig":null,"attributes":[{"value":"/ The result of unwrapping.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":43937,"byte_end":43966,"line_start":546,"line_end":546,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":44113,"byte_end":44130,"line_start":552,"line_end":552,"column_start":8,"column_end":25},"name":"unwrap_or_invalid","qualname":"::errors::UnwrapOrInvalid::unwrap_or_invalid","value":"pub fn unwrap_or_invalid(Self) -> Self::Output","parent":{"krate":0,"index":189},"children":[],"decl_id":null,"docs":"    Either unwraps the successfully converted value, or returns the output type's invalid sentinel value.\n","sig":null,"attributes":[{"value":"*\n    Either unwraps the successfully converted value, or returns the output type's invalid sentinel value.\n    */","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":43989,"byte_end":44105,"line_start":549,"line_end":551,"column_start":5,"column_end":7}}]},{"kind":"Trait","id":{"krate":0,"index":192},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":44209,"byte_end":44225,"line_start":558,"line_end":558,"column_start":11,"column_end":27},"name":"UnwrapOrSaturate","qualname":"::errors::UnwrapOrSaturate","value":"UnwrapOrSaturate","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194}],"decl_id":null,"docs":"Unwrap a conversion by saturating.\n","sig":null,"attributes":[{"value":"*\nUnwrap a conversion by saturating.\n*/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":44157,"byte_end":44198,"line_start":555,"line_end":557,"column_start":1,"column_end":3}}]},{"kind":"Type","id":{"krate":0,"index":193},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":44271,"byte_end":44277,"line_start":560,"line_end":560,"column_start":10,"column_end":16},"name":"Output","qualname":"::errors::UnwrapOrSaturate::Output","value":"type Output;","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" The result of unwrapping.\n","sig":null,"attributes":[{"value":"/ The result of unwrapping.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":44232,"byte_end":44261,"line_start":559,"line_end":559,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":44400,"byte_end":44418,"line_start":565,"line_end":565,"column_start":8,"column_end":26},"name":"unwrap_or_saturate","qualname":"::errors::UnwrapOrSaturate::unwrap_or_saturate","value":"pub fn unwrap_or_saturate(Self) -> Self::Output","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":"    Either unwraps the successfully converted value, or saturates in the \"direction\" of overflow.\n","sig":null,"attributes":[{"value":"*\n    Either unwraps the successfully converted value, or saturates in the \"direction\" of overflow.\n    */","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":44284,"byte_end":44392,"line_start":562,"line_end":564,"column_start":5,"column_end":7}}]},{"kind":"Mod","id":{"krate":0,"index":212},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\misc.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"misc","qualname":"::misc","value":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\misc.rs","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":795},{"krate":0,"index":798},{"krate":0,"index":801},{"krate":0,"index":804},{"krate":0,"index":807},{"krate":0,"index":810},{"krate":0,"index":813},{"krate":0,"index":816},{"krate":0,"index":819},{"krate":0,"index":822},{"krate":0,"index":216},{"krate":0,"index":826},{"krate":0,"index":828},{"krate":0,"index":218},{"krate":0,"index":831},{"krate":0,"index":834}],"decl_id":null,"docs":"This module defines some additional traits not *directly* tied to conversions.\n","sig":null,"attributes":[{"value":"*\nThis module defines some additional traits not *directly* tied to conversions.\n*/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\misc.rs","byte_start":46078,"byte_end":46163,"line_start":1,"line_end":3,"column_start":1,"column_end":3}}]},{"kind":"Trait","id":{"krate":0,"index":213},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\misc.rs","byte_start":46320,"byte_end":46329,"line_start":10,"line_end":10,"column_start":11,"column_end":20},"name":"Saturated","qualname":"::misc::Saturated","value":"Saturated","parent":null,"children":[{"krate":0,"index":214},{"krate":0,"index":215}],"decl_id":null,"docs":"This trait indicates that values of a type can be logically \"saturated\".","sig":null,"attributes":[{"value":"*\nThis trait indicates that values of a type can be logically \"saturated\".\n\nThis is used by the `errors::UnwrapOrSaturate` extension trait.\n*/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\misc.rs","byte_start":46165,"byte_end":46309,"line_start":5,"line_end":9,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\misc.rs","byte_start":46392,"byte_end":46405,"line_start":12,"line_end":12,"column_start":8,"column_end":21},"name":"saturated_max","qualname":"::misc::Saturated::saturated_max","value":"pub fn saturated_max() -> Self","parent":{"krate":0,"index":213},"children":[],"decl_id":null,"docs":" Returns the type's saturated, maximum value.\n","sig":null,"attributes":[{"value":"/ Returns the type's saturated, maximum value.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\misc.rs","byte_start":46336,"byte_end":46384,"line_start":11,"line_end":11,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\misc.rs","byte_start":46478,"byte_end":46491,"line_start":15,"line_end":15,"column_start":8,"column_end":21},"name":"saturated_min","qualname":"::misc::Saturated::saturated_min","value":"pub fn saturated_min() -> Self","parent":{"krate":0,"index":213},"children":[],"decl_id":null,"docs":" Returns the type's saturated, minimum value.\n","sig":null,"attributes":[{"value":"/ Returns the type's saturated, minimum value.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\misc.rs","byte_start":46422,"byte_end":46470,"line_start":14,"line_end":14,"column_start":5,"column_end":53}}]},{"kind":"Trait","id":{"krate":0,"index":216},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\misc.rs","byte_start":46996,"byte_end":47011,"line_start":34,"line_end":34,"column_start":11,"column_end":26},"name":"InvalidSentinel","qualname":"::misc::InvalidSentinel","value":"InvalidSentinel","parent":null,"children":[{"krate":0,"index":217}],"decl_id":null,"docs":"This trait indicates that a type has an \"invalid\" sentinel value.","sig":null,"attributes":[{"value":"*\nThis trait indicates that a type has an \"invalid\" sentinel value.\n\nThis is used by the `errors::UnwrapOrInvalid` extension trait.\n*/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\misc.rs","byte_start":46849,"byte_end":46985,"line_start":29,"line_end":33,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\misc.rs","byte_start":47074,"byte_end":47090,"line_start":36,"line_end":36,"column_start":8,"column_end":24},"name":"invalid_sentinel","qualname":"::misc::InvalidSentinel::invalid_sentinel","value":"pub fn invalid_sentinel() -> Self","parent":{"krate":0,"index":216},"children":[],"decl_id":null,"docs":" Returns the type's \"invalid\" sentinel value.\n","sig":null,"attributes":[{"value":"/ Returns the type's \"invalid\" sentinel value.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\misc.rs","byte_start":47018,"byte_end":47066,"line_start":35,"line_end":35,"column_start":5,"column_end":53}}]},{"kind":"Trait","id":{"krate":0,"index":218},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\misc.rs","byte_start":47480,"byte_end":47494,"line_start":54,"line_end":54,"column_start":11,"column_end":25},"name":"SignedInfinity","qualname":"::misc::SignedInfinity","value":"SignedInfinity","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":220}],"decl_id":null,"docs":"This trait indicates that a type has positive and negative \"infinity\" values.","sig":null,"attributes":[{"value":"*\nThis trait indicates that a type has positive and negative \"infinity\" values.\n\nThis is used by the `errors::UnwrapOrInf` extension trait.\n*/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\misc.rs","byte_start":47325,"byte_end":47469,"line_start":49,"line_end":53,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\misc.rs","byte_start":47556,"byte_end":47568,"line_start":56,"line_end":56,"column_start":8,"column_end":20},"name":"neg_infinity","qualname":"::misc::SignedInfinity::neg_infinity","value":"pub fn neg_infinity() -> Self","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Returns the type's positive infinity value.\n","sig":null,"attributes":[{"value":"/ Returns the type's positive infinity value.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\misc.rs","byte_start":47501,"byte_end":47548,"line_start":55,"line_end":55,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\misc.rs","byte_start":47640,"byte_end":47652,"line_start":59,"line_end":59,"column_start":8,"column_end":20},"name":"pos_infinity","qualname":"::misc::SignedInfinity::pos_infinity","value":"pub fn pos_infinity() -> Self","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Returns the type's negative infinity value.\n","sig":null,"attributes":[{"value":"/ Returns the type's negative infinity value.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\misc.rs","byte_start":47585,"byte_end":47632,"line_start":58,"line_end":58,"column_start":5,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":317},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":15110,"byte_end":15120,"line_start":279,"line_end":279,"column_start":11,"column_end":21},"name":"ApproxFrom","qualname":"::ApproxFrom","value":"ApproxFrom<Src, Scheme = DefaultApprox>: Sized","parent":null,"children":[{"krate":0,"index":320},{"krate":0,"index":321}],"decl_id":null,"docs":"This trait is used to perform a conversion that is permitted to approximate the result, but *not* to wrap or saturate the result to fit into the destination type's representable range.","sig":null,"attributes":[{"value":"*\nThis trait is used to perform a conversion that is permitted to approximate the result, but *not* to wrap or saturate the result to fit into the destination type's representable range.\n\nWhere possible, prefer *implementing* this trait over `ApproxInto`, but prefer *using* `ApproxInto` for generic constraints.\n\n# Details\n\nAll implementations of this trait must provide a conversion that can be separated into two logical steps: an approximation transform, and a representation transform.\n\nThe \"approximation transform\" step involves transforming the input value into an approximately equivalent value which is supported by the target type *without* taking the target type's representable range into account.  For example, this might involve rounding or truncating a floating point value to an integer, or reducing the accuracy of a floating point value.\n\nThe \"representation transform\" step *exactly* rewrites the value from the source type's binary representation into the destination type's binary representation.  This step *may not* transform the value in any way.  If the result of the approximation is not representable, the conversion *must* fail.\n\nThe major reason for this formulation is to exactly define what happens when converting between floating point and integer types.  Often, it is unclear what happens to floating point values beyond the range of the target integer type.  Do they saturate, wrap, or cause a failure?\n\nWith this formulation, it is well-defined: if a floating point value is outside the representable range, the conversion fails.  This allows users to distinguish between approximation and range violation, and act accordingly.\n*/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":13430,"byte_end":15099,"line_start":262,"line_end":278,"column_start":1,"column_end":3}}]},{"kind":"Type","id":{"krate":0,"index":320},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":15249,"byte_end":15252,"line_start":281,"line_end":281,"column_start":10,"column_end":13},"name":"Err","qualname":"::ApproxFrom::Err","value":"type Err: Error;","parent":{"krate":0,"index":317},"children":[],"decl_id":null,"docs":" The error type produced by a failed conversion.\n","sig":null,"attributes":[{"value":"/ The error type produced by a failed conversion.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":15188,"byte_end":15239,"line_start":280,"line_end":280,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":15350,"byte_end":15361,"line_start":284,"line_end":284,"column_start":8,"column_end":19},"name":"approx_from","qualname":"::ApproxFrom::approx_from","value":"pub fn approx_from(Src) -> Result<Self, Self::Err>","parent":{"krate":0,"index":317},"children":[],"decl_id":null,"docs":" Convert the given value into an approximately equivalent representation.\n","sig":null,"attributes":[{"value":"/ Convert the given value into an approximately equivalent representation.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":15266,"byte_end":15342,"line_start":283,"line_end":283,"column_start":5,"column_end":81}}]},{"kind":"Trait","id":{"krate":0,"index":327},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":15798,"byte_end":15808,"line_start":299,"line_end":299,"column_start":11,"column_end":21},"name":"ApproxInto","qualname":"::ApproxInto","value":"ApproxInto<Dst, Scheme = DefaultApprox>","parent":null,"children":[{"krate":0,"index":330},{"krate":0,"index":331}],"decl_id":null,"docs":"This is the dual of `ApproxFrom`; see that trait for information.","sig":null,"attributes":[{"value":"*\nThis is the dual of `ApproxFrom`; see that trait for information.\n\nWhere possible, prefer *using* this trait over `ApproxFrom` for generic constraints, but prefer *implementing* `ApproxFrom`.\n*/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":15589,"byte_end":15787,"line_start":294,"line_end":298,"column_start":1,"column_end":3}}]},{"kind":"Type","id":{"krate":0,"index":330},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":15930,"byte_end":15933,"line_start":301,"line_end":301,"column_start":10,"column_end":13},"name":"Err","qualname":"::ApproxInto::Err","value":"type Err: Error;","parent":{"krate":0,"index":327},"children":[],"decl_id":null,"docs":" The error type produced by a failed conversion.\n","sig":null,"attributes":[{"value":"/ The error type produced by a failed conversion.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":15869,"byte_end":15920,"line_start":300,"line_end":300,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":16027,"byte_end":16038,"line_start":304,"line_end":304,"column_start":8,"column_end":19},"name":"approx_into","qualname":"::ApproxInto::approx_into","value":"pub fn approx_into(Self) -> Result<Dst, Self::Err>","parent":{"krate":0,"index":327},"children":[],"decl_id":null,"docs":" Convert the subject into an approximately equivalent representation.\n","sig":null,"attributes":[{"value":"/ Convert the subject into an approximately equivalent representation.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":15947,"byte_end":16019,"line_start":303,"line_end":303,"column_start":5,"column_end":77}}]},{"kind":"Trait","id":{"krate":0,"index":338},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":16395,"byte_end":16407,"line_start":321,"line_end":321,"column_start":11,"column_end":23},"name":"ApproxScheme","qualname":"::ApproxScheme","value":"ApproxScheme","parent":null,"children":[],"decl_id":null,"docs":"This trait is used to mark approximation scheme types.\n","sig":null,"attributes":[{"value":"*\nThis trait is used to mark approximation scheme types.\n*/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":16323,"byte_end":16384,"line_start":318,"line_end":320,"column_start":1,"column_end":3}}]},{"kind":"Enum","id":{"krate":0,"index":339},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":16736,"byte_end":16749,"line_start":328,"line_end":328,"column_start":10,"column_end":23},"name":"DefaultApprox","qualname":"::DefaultApprox","value":"pub enum DefaultApprox { }","parent":null,"children":[],"decl_id":null,"docs":"The \"default\" approximation scheme.  This scheme does whatever would generally be expected of a lossy conversion, assuming no additional context or instruction is given.","sig":null,"attributes":[{"value":"*\nThe \"default\" approximation scheme.  This scheme does whatever would generally be expected of a lossy conversion, assuming no additional context or instruction is given.\n\nThis is a double-edged sword: it has the loosest semantics, but is far more likely to exist than more complicated approximation schemes.\n*/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":16412,"byte_end":16726,"line_start":323,"line_end":327,"column_start":1,"column_end":3}}]},{"kind":"Enum","id":{"krate":0,"index":341},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":17065,"byte_end":17073,"line_start":336,"line_end":336,"column_start":10,"column_end":18},"name":"Wrapping","qualname":"::Wrapping","value":"pub enum Wrapping { }","parent":null,"children":[],"decl_id":null,"docs":"This scheme is used to convert a value by \"wrapping\" it into a narrower range.","sig":null,"attributes":[{"value":"*\nThis scheme is used to convert a value by \"wrapping\" it into a narrower range.\n\nIn abstract, this can be viewed as the opposite of rounding: rather than preserving the most significant bits of a value, it preserves the *least* significant bits of a value.\n*/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":16793,"byte_end":17055,"line_start":331,"line_end":335,"column_start":1,"column_end":3}}]},{"kind":"Enum","id":{"krate":0,"index":343},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":17253,"byte_end":17267,"line_start":342,"line_end":342,"column_start":10,"column_end":24},"name":"RoundToNearest","qualname":"::RoundToNearest","value":"pub enum RoundToNearest { }","parent":null,"children":[],"decl_id":null,"docs":"This scheme is used to convert a value by rounding it to the nearest representable value, with ties rounding away from zero.\n","sig":null,"attributes":[{"value":"*\nThis scheme is used to convert a value by rounding it to the nearest representable value, with ties rounding away from zero.\n*/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":17112,"byte_end":17243,"line_start":339,"line_end":341,"column_start":1,"column_end":3}}]},{"kind":"Enum","id":{"krate":0,"index":345},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":17443,"byte_end":17456,"line_start":348,"line_end":348,"column_start":10,"column_end":23},"name":"RoundToNegInf","qualname":"::RoundToNegInf","value":"pub enum RoundToNegInf { }","parent":null,"children":[],"decl_id":null,"docs":"This scheme is used to convert a value by rounding it toward negative infinity to the nearest representable value.\n","sig":null,"attributes":[{"value":"*\nThis scheme is used to convert a value by rounding it toward negative infinity to the nearest representable value.\n*/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":17312,"byte_end":17433,"line_start":345,"line_end":347,"column_start":1,"column_end":3}}]},{"kind":"Enum","id":{"krate":0,"index":347},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":17631,"byte_end":17644,"line_start":354,"line_end":354,"column_start":10,"column_end":23},"name":"RoundToPosInf","qualname":"::RoundToPosInf","value":"pub enum RoundToPosInf { }","parent":null,"children":[],"decl_id":null,"docs":"This scheme is used to convert a value by rounding it toward positive infinity to the nearest representable value.\n","sig":null,"attributes":[{"value":"*\nThis scheme is used to convert a value by rounding it toward positive infinity to the nearest representable value.\n*/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":17500,"byte_end":17621,"line_start":351,"line_end":353,"column_start":1,"column_end":3}}]},{"kind":"Enum","id":{"krate":0,"index":349},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":17806,"byte_end":17817,"line_start":360,"line_end":360,"column_start":10,"column_end":21},"name":"RoundToZero","qualname":"::RoundToZero","value":"pub enum RoundToZero { }","parent":null,"children":[],"decl_id":null,"docs":"This scheme is used to convert a value by rounding it toward zero to the nearest representable value.\n","sig":null,"attributes":[{"value":"*\nThis scheme is used to convert a value by rounding it toward zero to the nearest representable value.\n*/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":17688,"byte_end":17796,"line_start":357,"line_end":359,"column_start":1,"column_end":3}}]},{"kind":"Trait","id":{"krate":0,"index":351},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":18399,"byte_end":18406,"line_start":372,"line_end":372,"column_start":11,"column_end":18},"name":"TryFrom","qualname":"::TryFrom","value":"TryFrom<Src>: Sized","parent":null,"children":[{"krate":0,"index":353},{"krate":0,"index":354}],"decl_id":null,"docs":"This trait is used to perform a conversion between different semantic types which might fail.","sig":null,"attributes":[{"value":"*\nThis trait is used to perform a conversion between different semantic types which might fail.\n\nWhere possible, prefer *implementing* this trait over `TryInto`, but prefer *using* `TryInto` for generic constraints.\n\n# Details\n\nTypically, this should be used in cases where you are converting between values whose ranges and/or representations only partially overlap.  That the conversion may fail should be a reasonably expected outcome.  A standard example of this is converting from integers to enums of unitary variants.\n*/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":17859,"byte_end":18388,"line_start":363,"line_end":371,"column_start":1,"column_end":3}}]},{"kind":"Type","id":{"krate":0,"index":353},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":18486,"byte_end":18489,"line_start":374,"line_end":374,"column_start":10,"column_end":13},"name":"Err","qualname":"::TryFrom::Err","value":"type Err: Error;","parent":{"krate":0,"index":351},"children":[],"decl_id":null,"docs":" The error type produced by a failed conversion.\n","sig":null,"attributes":[{"value":"/ The error type produced by a failed conversion.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":18425,"byte_end":18476,"line_start":373,"line_end":373,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":18561,"byte_end":18569,"line_start":377,"line_end":377,"column_start":8,"column_end":16},"name":"try_from","qualname":"::TryFrom::try_from","value":"pub fn try_from(Src) -> Result<Self, Self::Err>","parent":{"krate":0,"index":351},"children":[],"decl_id":null,"docs":" Convert the given value into the subject type.\n","sig":null,"attributes":[{"value":"/ Convert the given value into the subject type.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":18503,"byte_end":18553,"line_start":376,"line_end":376,"column_start":5,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":359},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":18948,"byte_end":18955,"line_start":392,"line_end":392,"column_start":11,"column_end":18},"name":"TryInto","qualname":"::TryInto","value":"TryInto<Dst>","parent":null,"children":[{"krate":0,"index":361},{"krate":0,"index":362}],"decl_id":null,"docs":"This is the dual of `TryFrom`; see that trait for information.","sig":null,"attributes":[{"value":"*\nThis is the dual of `TryFrom`; see that trait for information.\n\nWhere possible, prefer *using* this trait over `TryFrom` for generic constraints, but prefer *implementing* `TryFrom`.\n*/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":18748,"byte_end":18937,"line_start":387,"line_end":391,"column_start":1,"column_end":3}}]},{"kind":"Type","id":{"krate":0,"index":361},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":19028,"byte_end":19031,"line_start":394,"line_end":394,"column_start":10,"column_end":13},"name":"Err","qualname":"::TryInto::Err","value":"type Err: Error;","parent":{"krate":0,"index":359},"children":[],"decl_id":null,"docs":" The error type produced by a failed conversion.\n","sig":null,"attributes":[{"value":"/ The error type produced by a failed conversion.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":18967,"byte_end":19018,"line_start":393,"line_end":393,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":19103,"byte_end":19111,"line_start":397,"line_end":397,"column_start":8,"column_end":16},"name":"try_into","qualname":"::TryInto::try_into","value":"pub fn try_into(Self) -> Result<Dst, Self::Err>","parent":{"krate":0,"index":359},"children":[],"decl_id":null,"docs":" Convert the subject into the destination type.\n","sig":null,"attributes":[{"value":"/ Convert the subject into the destination type.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":19045,"byte_end":19095,"line_start":396,"line_end":396,"column_start":5,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":368},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":19893,"byte_end":19902,"line_start":416,"line_end":416,"column_start":11,"column_end":20},"name":"ValueFrom","qualname":"::ValueFrom","value":"ValueFrom<Src>: Sized","parent":null,"children":[{"krate":0,"index":370},{"krate":0,"index":371}],"decl_id":null,"docs":"This trait is used to perform an exact, value-preserving conversion.","sig":null,"attributes":[{"value":"*\nThis trait is used to perform an exact, value-preserving conversion.\n\nWhere possible, prefer *implementing* this trait over `ValueInto`, but prefer *using* `ValueInto` for generic constraints.\n\n# Details\n\nImplementations of this trait should be reflexive, associative and commutative (in the absence of conversion errors).  That is, all possible cycles of `ValueFrom` conversions (for which each \"step\" has a defined implementation) should produce the same result, with a given value either being \"round-tripped\" exactly, or an error being produced.\n*/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":19326,"byte_end":19882,"line_start":407,"line_end":415,"column_start":1,"column_end":3}}]},{"kind":"Type","id":{"krate":0,"index":370},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":19982,"byte_end":19985,"line_start":418,"line_end":418,"column_start":10,"column_end":13},"name":"Err","qualname":"::ValueFrom::Err","value":"type Err: Error;","parent":{"krate":0,"index":368},"children":[],"decl_id":null,"docs":" The error type produced by a failed conversion.\n","sig":null,"attributes":[{"value":"/ The error type produced by a failed conversion.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":19921,"byte_end":19972,"line_start":417,"line_end":417,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":20077,"byte_end":20087,"line_start":421,"line_end":421,"column_start":8,"column_end":18},"name":"value_from","qualname":"::ValueFrom::value_from","value":"pub fn value_from(Src) -> Result<Self, Self::Err>","parent":{"krate":0,"index":368},"children":[],"decl_id":null,"docs":" Convert the given value into an exactly equivalent representation.\n","sig":null,"attributes":[{"value":"/ Convert the given value into an exactly equivalent representation.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":19999,"byte_end":20069,"line_start":420,"line_end":420,"column_start":5,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":376},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":20476,"byte_end":20485,"line_start":436,"line_end":436,"column_start":11,"column_end":20},"name":"ValueInto","qualname":"::ValueInto","value":"ValueInto<Dst>","parent":null,"children":[{"krate":0,"index":378},{"krate":0,"index":379}],"decl_id":null,"docs":"This is the dual of `ValueFrom`; see that trait for information.","sig":null,"attributes":[{"value":"*\nThis is the dual of `ValueFrom`; see that trait for information.\n\nWhere possible, prefer *using* this trait over `ValueFrom` for generic constraints, but prefer *implementing* `ValueFrom`.\n*/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":20270,"byte_end":20465,"line_start":431,"line_end":435,"column_start":1,"column_end":3}}]},{"kind":"Type","id":{"krate":0,"index":378},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":20558,"byte_end":20561,"line_start":438,"line_end":438,"column_start":10,"column_end":13},"name":"Err","qualname":"::ValueInto::Err","value":"type Err: Error;","parent":{"krate":0,"index":376},"children":[],"decl_id":null,"docs":" The error type produced by a failed conversion.\n","sig":null,"attributes":[{"value":"/ The error type produced by a failed conversion.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":20497,"byte_end":20548,"line_start":437,"line_end":437,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":20653,"byte_end":20663,"line_start":441,"line_end":441,"column_start":8,"column_end":18},"name":"value_into","qualname":"::ValueInto::value_into","value":"pub fn value_into(Self) -> Result<Dst, Self::Err>","parent":{"krate":0,"index":376},"children":[],"decl_id":null,"docs":" Convert the subject into an exactly equivalent representation.\n","sig":null,"attributes":[{"value":"/ Convert the subject into an exactly equivalent representation.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":20579,"byte_end":20645,"line_start":440,"line_end":440,"column_start":5,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":385},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":21532,"byte_end":21540,"line_start":460,"line_end":460,"column_start":11,"column_end":19},"name":"ConvUtil","qualname":"::ConvUtil","value":"ConvUtil","parent":null,"children":[{"krate":0,"index":386},{"krate":0,"index":388},{"krate":0,"index":391},{"krate":0,"index":393},{"krate":0,"index":395}],"decl_id":null,"docs":"This extension trait exists to simplify using various conversions.","sig":null,"attributes":[{"value":"*\nThis extension trait exists to simplify using various conversions.\n\nIf there is more than one implementation for a given type/trait pair, a simple call to `*_into` may not be uniquely resolvable.  Due to the position of the type parameter (on the trait itself), it is cumbersome to specify the destination type.  A similar problem exists for approximation schemes.\n\nSee also the [`ConvAsUtil`](./trait.ConvAsUtil.html) trait.\n\n> **Note**: There appears to be a bug in `rustdoc`'s output.  This trait is implemented *for all* types, though the methods are only available for types where the appropriate conversions are defined.\n*/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":20888,"byte_end":21521,"line_start":451,"line_end":459,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":21623,"byte_end":21632,"line_start":462,"line_end":462,"column_start":8,"column_end":17},"name":"approx_as","qualname":"::ConvUtil::approx_as","value":"pub fn approx_as<Dst>(Self) -> Result<Dst, Self::Err> where Self: Sized +\nApproxInto<Dst>","parent":{"krate":0,"index":385},"children":[],"decl_id":null,"docs":" Approximate the subject to a given type with the default scheme.\n","sig":null,"attributes":[{"value":"/ Approximate the subject to a given type with the default scheme.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":21547,"byte_end":21615,"line_start":461,"line_end":461,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":21825,"byte_end":21837,"line_start":468,"line_end":468,"column_start":8,"column_end":20},"name":"approx_as_by","qualname":"::ConvUtil::approx_as_by","value":"pub fn approx_as_by<Dst, Scheme>(Self) -> Result<Dst, Self::Err> where\nSelf: Sized + ApproxInto<Dst, Scheme>, Scheme: ApproxScheme","parent":{"krate":0,"index":385},"children":[],"decl_id":null,"docs":" Approximate the subject to a given type with a specific scheme.\n","sig":null,"attributes":[{"value":"/ Approximate the subject to a given type with a specific scheme.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":21750,"byte_end":21817,"line_start":467,"line_end":467,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":22062,"byte_end":22069,"line_start":477,"line_end":477,"column_start":8,"column_end":15},"name":"into_as","qualname":"::ConvUtil::into_as","value":"pub fn into_as<Dst>(Self) -> Dst where Self: Sized + Into<Dst>","parent":{"krate":0,"index":385},"children":[],"decl_id":null,"docs":" Convert the subject to a given type.\n","sig":null,"attributes":[{"value":"/ Convert the subject to a given type.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":22014,"byte_end":22054,"line_start":476,"line_end":476,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":22214,"byte_end":22220,"line_start":483,"line_end":483,"column_start":8,"column_end":14},"name":"try_as","qualname":"::ConvUtil::try_as","value":"pub fn try_as<Dst>(Self) -> Result<Dst, Self::Err> where Self: Sized +\nTryInto<Dst>","parent":{"krate":0,"index":385},"children":[],"decl_id":null,"docs":" Attempt to convert the subject to a given type.\n","sig":null,"attributes":[{"value":"/ Attempt to convert the subject to a given type.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":22155,"byte_end":22206,"line_start":482,"line_end":482,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":22402,"byte_end":22410,"line_start":489,"line_end":489,"column_start":8,"column_end":16},"name":"value_as","qualname":"::ConvUtil::value_as","value":"pub fn value_as<Dst>(Self) -> Result<Dst, Self::Err> where Self: Sized +\nValueInto<Dst>","parent":{"krate":0,"index":385},"children":[],"decl_id":null,"docs":" Attempt a value conversion of the subject to a given type.\n","sig":null,"attributes":[{"value":"/ Attempt a value conversion of the subject to a given type.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":22332,"byte_end":22394,"line_start":488,"line_end":488,"column_start":5,"column_end":67}}]},{"kind":"Trait","id":{"krate":0,"index":399},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":23198,"byte_end":23208,"line_start":508,"line_end":508,"column_start":11,"column_end":21},"name":"ConvAsUtil","qualname":"::ConvAsUtil","value":"ConvAsUtil<Dst>","parent":null,"children":[{"krate":0,"index":401},{"krate":0,"index":402}],"decl_id":null,"docs":"This extension trait exists to simplify using various conversions.","sig":null,"attributes":[{"value":"*\nThis extension trait exists to simplify using various conversions.\n\nIf there is more than one `ApproxFrom` implementation for a given type, a simple call to `approx_into` may not be uniquely resolvable.  Due to the position of the scheme parameter (on the trait itself), it is cumbersome to specify which scheme you wanted.\n\nThe destination type is inferred from context.\n\nSee also the [`ConvUtil`](./trait.ConvUtil.html) trait.\n\n> **Note**: There appears to be a bug in `rustdoc`'s output.  This trait is implemented *for all* types, though the methods are only available for types where the appropriate conversions are defined.\n*/","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":22551,"byte_end":23187,"line_start":497,"line_end":507,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":23280,"byte_end":23286,"line_start":510,"line_end":510,"column_start":8,"column_end":14},"name":"approx","qualname":"::ConvAsUtil::approx","value":"pub fn approx(Self) -> Result<Dst, Self::Err> where Self: Sized +\nApproxInto<Dst>","parent":{"krate":0,"index":399},"children":[],"decl_id":null,"docs":" Approximate the subject with the default scheme.\n","sig":null,"attributes":[{"value":"/ Approximate the subject with the default scheme.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":23220,"byte_end":23272,"line_start":509,"line_end":509,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":23458,"byte_end":23467,"line_start":516,"line_end":516,"column_start":8,"column_end":17},"name":"approx_by","qualname":"::ConvAsUtil::approx_by","value":"pub fn approx_by<Scheme>(Self) -> Result<Dst, Self::Err> where Self: Sized +\nApproxInto<Dst, Scheme>, Scheme: ApproxScheme","parent":{"krate":0,"index":399},"children":[],"decl_id":null,"docs":" Approximate the subject with a specific scheme.\n","sig":null,"attributes":[{"value":"/ Approximate the subject with a specific scheme.","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":23399,"byte_end":23450,"line_start":515,"line_end":515,"column_start":5,"column_end":56}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":35114,"byte_end":35126,"line_start":258,"line_end":258,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":36745,"byte_end":36761,"line_start":304,"line_end":304,"column_start":33,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":37512,"byte_end":37519,"line_start":325,"line_end":325,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":37639,"byte_end":37646,"line_start":331,"line_end":331,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":41849,"byte_end":41855,"line_start":461,"line_end":461,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":42300,"byte_end":42306,"line_start":477,"line_end":477,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":42678,"byte_end":42684,"line_start":492,"line_end":492,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":43344,"byte_end":43350,"line_start":519,"line_end":519,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":44472,"byte_end":44478,"line_start":568,"line_end":568,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":198},{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":44859,"byte_end":44865,"line_start":582,"line_end":582,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":204},{"krate":0,"index":205}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":45114,"byte_end":45120,"line_start":594,"line_end":594,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":209},{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":15449,"byte_end":15452,"line_start":287,"line_end":287,"column_start":47,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":325},{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":16126,"byte_end":16129,"line_start":307,"line_end":307,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":336},{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":16775,"byte_end":16788,"line_start":329,"line_end":329,"column_start":23,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":17099,"byte_end":17107,"line_start":337,"line_end":337,"column_start":23,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":17293,"byte_end":17307,"line_start":343,"line_end":343,"column_start":23,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":17482,"byte_end":17495,"line_start":349,"line_end":349,"column_start":23,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":17670,"byte_end":17683,"line_start":355,"line_end":355,"column_start":23,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":17843,"byte_end":17854,"line_start":361,"line_end":361,"column_start":23,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":18638,"byte_end":18641,"line_start":380,"line_end":380,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":357},{"krate":0,"index":358}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":19180,"byte_end":19183,"line_start":400,"line_end":400,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":366},{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":20158,"byte_end":20161,"line_start":424,"line_end":424,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":20734,"byte_end":20737,"line_start":444,"line_end":444,"column_start":35,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":383},{"krate":0,"index":384}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":22545,"byte_end":22546,"line_start":495,"line_end":495,"column_start":22,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":23670,"byte_end":23671,"line_start":525,"line_end":525,"column_start":34,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":12239,"byte_end":12245,"line_start":210,"line_end":210,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":13395,"byte_end":13401,"line_start":257,"line_end":257,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":104}},{"kind":"Mod","span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":13411,"byte_end":13415,"line_start":258,"line_end":258,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":212}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":35114,"byte_end":35126,"line_start":258,"line_end":258,"column_start":33,"column_end":45},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":407},"to":{"krate":2,"index":2738}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":36745,"byte_end":36761,"line_start":304,"line_end":304,"column_start":33,"column_end":49},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":467},"to":{"krate":2,"index":2738}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":37512,"byte_end":37519,"line_start":325,"line_end":325,"column_start":18,"column_end":25},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":512},"to":{"krate":2,"index":8819}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":37639,"byte_end":37646,"line_start":331,"line_end":331,"column_start":16,"column_end":23},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":512},"to":{"krate":1,"index":2326}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":41849,"byte_end":41855,"line_start":461,"line_end":461,"column_start":25,"column_end":31},"kind":{"Impl":{"id":4}},"from":{"krate":2,"index":39857},"to":{"krate":0,"index":160}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":42300,"byte_end":42306,"line_start":477,"line_end":477,"column_start":25,"column_end":31},"kind":{"Impl":{"id":5}},"from":{"krate":2,"index":39857},"to":{"krate":0,"index":160}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":42678,"byte_end":42684,"line_start":492,"line_end":492,"column_start":22,"column_end":28},"kind":{"Impl":{"id":6}},"from":{"krate":2,"index":39857},"to":{"krate":0,"index":160}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":43344,"byte_end":43350,"line_start":519,"line_end":519,"column_start":25,"column_end":31},"kind":{"Impl":{"id":7}},"from":{"krate":2,"index":39857},"to":{"krate":0,"index":180}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":44472,"byte_end":44478,"line_start":568,"line_end":568,"column_start":28,"column_end":34},"kind":{"Impl":{"id":8}},"from":{"krate":2,"index":39857},"to":{"krate":0,"index":186}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":44859,"byte_end":44865,"line_start":582,"line_end":582,"column_start":32,"column_end":38},"kind":{"Impl":{"id":9}},"from":{"krate":2,"index":39857},"to":{"krate":0,"index":189}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\errors.rs","byte_start":45114,"byte_end":45120,"line_start":594,"line_end":594,"column_start":33,"column_end":39},"kind":{"Impl":{"id":10}},"from":{"krate":2,"index":39857},"to":{"krate":0,"index":192}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":15149,"byte_end":15154,"line_start":279,"line_end":279,"column_start":50,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":2837},"to":{"krate":0,"index":317}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":15449,"byte_end":15452,"line_start":287,"line_end":287,"column_start":47,"column_end":50},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":323},"to":{"krate":0,"index":317}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":16126,"byte_end":16129,"line_start":307,"line_end":307,"column_start":52,"column_end":55},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":334},"to":{"krate":0,"index":327}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":16775,"byte_end":16788,"line_start":329,"line_end":329,"column_start":23,"column_end":36},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":339},"to":{"krate":0,"index":338}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":17099,"byte_end":17107,"line_start":337,"line_end":337,"column_start":23,"column_end":31},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":341},"to":{"krate":0,"index":338}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":17293,"byte_end":17307,"line_start":343,"line_end":343,"column_start":23,"column_end":37},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":343},"to":{"krate":0,"index":338}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":17482,"byte_end":17495,"line_start":349,"line_end":349,"column_start":23,"column_end":36},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":345},"to":{"krate":0,"index":338}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":17670,"byte_end":17683,"line_start":355,"line_end":355,"column_start":23,"column_end":36},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":347},"to":{"krate":0,"index":338}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":17843,"byte_end":17854,"line_start":361,"line_end":361,"column_start":23,"column_end":34},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":349},"to":{"krate":0,"index":338}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":18413,"byte_end":18418,"line_start":372,"line_end":372,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2837},"to":{"krate":0,"index":351}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":18638,"byte_end":18641,"line_start":380,"line_end":380,"column_start":28,"column_end":31},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":356},"to":{"krate":0,"index":351}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":19180,"byte_end":19183,"line_start":400,"line_end":400,"column_start":33,"column_end":36},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":364},"to":{"krate":0,"index":359}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":19909,"byte_end":19914,"line_start":416,"line_end":416,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":2837},"to":{"krate":0,"index":368}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":20158,"byte_end":20161,"line_start":424,"line_end":424,"column_start":30,"column_end":33},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":373},"to":{"krate":0,"index":368}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":20734,"byte_end":20737,"line_start":444,"line_end":444,"column_start":35,"column_end":38},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":381},"to":{"krate":0,"index":376}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":22545,"byte_end":22546,"line_start":495,"line_end":495,"column_start":22,"column_end":23},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":398},"to":{"krate":0,"index":385}},{"span":{"file_name":"C:\\Users\\samfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\conv-0.3.3\\src\\lib.rs","byte_start":23670,"byte_end":23671,"line_start":525,"line_end":525,"column_start":34,"column_end":35},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":405},"to":{"krate":0,"index":399}}]}